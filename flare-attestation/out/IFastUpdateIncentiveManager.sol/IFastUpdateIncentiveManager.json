{"abi":[{"type":"function","name":"getBaseScale","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"Scale"}],"stateMutability":"view"},{"type":"function","name":"getCurrentSampleSizeIncreasePrice","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"Fee"}],"stateMutability":"view"},{"type":"function","name":"getExpectedSampleSize","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"SampleSize"}],"stateMutability":"view"},{"type":"function","name":"getIncentiveDuration","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getPrecision","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"Precision"}],"stateMutability":"view"},{"type":"function","name":"getRange","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"Range"}],"stateMutability":"view"},{"type":"function","name":"getScale","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"Scale"}],"stateMutability":"view"},{"type":"function","name":"offerIncentive","inputs":[{"name":"_offer","type":"tuple","internalType":"struct IFastUpdateIncentiveManager.IncentiveOffer","components":[{"name":"rangeIncrease","type":"uint256","internalType":"Range"},{"name":"rangeLimit","type":"uint256","internalType":"Range"}]}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"rangeIncreaseLimit","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"Range"}],"stateMutability":"view"},{"type":"function","name":"rangeIncreasePrice","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"Fee"}],"stateMutability":"view"},{"type":"function","name":"sampleIncreaseLimit","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"SampleSize"}],"stateMutability":"view"},{"type":"event","name":"IncentiveOffered","inputs":[{"name":"rewardEpochId","type":"uint24","indexed":true,"internalType":"uint24"},{"name":"rangeIncrease","type":"uint256","indexed":false,"internalType":"Range"},{"name":"sampleSizeIncrease","type":"uint256","indexed":false,"internalType":"SampleSize"},{"name":"offerAmount","type":"uint256","indexed":false,"internalType":"Fee"}],"anonymous":false},{"type":"event","name":"InflationRewardsOffered","inputs":[{"name":"rewardEpochId","type":"uint24","indexed":true,"internalType":"uint24"},{"name":"feedConfigurations","type":"tuple[]","indexed":false,"internalType":"struct IFastUpdatesConfiguration.FeedConfiguration[]","components":[{"name":"feedId","type":"bytes21","internalType":"bytes21"},{"name":"rewardBandValue","type":"uint32","internalType":"uint32"},{"name":"inflationShare","type":"uint24","internalType":"uint24"}]},{"name":"amount","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"getBaseScale()":"7a68533f","getCurrentSampleSizeIncreasePrice()":"2de490c3","getExpectedSampleSize()":"6d62b413","getIncentiveDuration()":"dd8dca9f","getPrecision()":"9670c0bc","getRange()":"9b85961f","getScale()":"b5cddab8","offerIncentive((uint256,uint256))":"36247180","rangeIncreaseLimit()":"74f3eff9","rangeIncreasePrice()":"52545a7c","sampleIncreaseLimit()":"d4ab8f94"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"rewardEpochId\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"Range\",\"name\":\"rangeIncrease\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"SampleSize\",\"name\":\"sampleSizeIncrease\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"Fee\",\"name\":\"offerAmount\",\"type\":\"uint256\"}],\"name\":\"IncentiveOffered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"rewardEpochId\",\"type\":\"uint24\"},{\"components\":[{\"internalType\":\"bytes21\",\"name\":\"feedId\",\"type\":\"bytes21\"},{\"internalType\":\"uint32\",\"name\":\"rewardBandValue\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"inflationShare\",\"type\":\"uint24\"}],\"indexed\":false,\"internalType\":\"struct IFastUpdatesConfiguration.FeedConfiguration[]\",\"name\":\"feedConfigurations\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InflationRewardsOffered\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getBaseScale\",\"outputs\":[{\"internalType\":\"Scale\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentSampleSizeIncreasePrice\",\"outputs\":[{\"internalType\":\"Fee\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExpectedSampleSize\",\"outputs\":[{\"internalType\":\"SampleSize\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIncentiveDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrecision\",\"outputs\":[{\"internalType\":\"Precision\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRange\",\"outputs\":[{\"internalType\":\"Range\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getScale\",\"outputs\":[{\"internalType\":\"Scale\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"Range\",\"name\":\"rangeIncrease\",\"type\":\"uint256\"},{\"internalType\":\"Range\",\"name\":\"rangeLimit\",\"type\":\"uint256\"}],\"internalType\":\"struct IFastUpdateIncentiveManager.IncentiveOffer\",\"name\":\"_offer\",\"type\":\"tuple\"}],\"name\":\"offerIncentive\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rangeIncreaseLimit\",\"outputs\":[{\"internalType\":\"Range\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rangeIncreasePrice\",\"outputs\":[{\"internalType\":\"Fee\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sampleIncreaseLimit\",\"outputs\":[{\"internalType\":\"SampleSize\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"offerIncentive((uint256,uint256))\":{\"params\":{\"_offer\":\"The requested amount of per-block variation range increase, along with a cap for the ultimate range.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"IncentiveOffered(uint24,uint256,uint256,uint256)\":{\"notice\":\"Event emitted when an incentive is offered.\"},\"InflationRewardsOffered(uint24,(bytes21,uint32,uint24)[],uint256)\":{\"notice\":\"Event emitted when inflation rewards are offered.\"}},\"kind\":\"user\",\"methods\":{\"getBaseScale()\":{\"notice\":\"Viewer for the base value of the scale itself.\"},\"getCurrentSampleSizeIncreasePrice()\":{\"notice\":\"Viewer for the current value of sample size increase price.\"},\"getExpectedSampleSize()\":{\"notice\":\"Viewer for the current value of the expected sample size.\"},\"getPrecision()\":{\"notice\":\"Viewer for the current value of the unit delta's precision (the fractional part of the scale).\"},\"getRange()\":{\"notice\":\"Viewer for the current value of the per-block variation range.\"},\"getScale()\":{\"notice\":\"Viewer for the current value of the scale itself.\"},\"offerIncentive((uint256,uint256))\":{\"notice\":\"The entry point for third parties to make incentive offers. It accepts a payment and, using the contents of `_offer`, computes how much the expected sample size will be increased to apply the requested (but capped) range increase. If the ultimate value of the range exceeds the cap, funds are returned to the sender in proportion to the amount by which the increase is adjusted to reach the cap.\"},\"rangeIncreaseLimit()\":{\"notice\":\"The maximum value that the range can be increased to by an incentive offer.\"},\"rangeIncreasePrice()\":{\"notice\":\"The price for increasing the per-block range of variation by 1, prorated for the actual amount of increase.\"},\"sampleIncreaseLimit()\":{\"notice\":\"The maximum amount by which the expected sample size can be increased by an incentive offer. This is controlled by governance and forces a minimum cost to increasing the sample size greatly, which would otherwise be an attack on the protocol.\"}},\"notice\":\"Fast update incentive manager interface.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/flare-periphery-contracts/coston2/IFastUpdateIncentiveManager.sol\":\"IFastUpdateIncentiveManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@flarenetwork/flare-periphery-contracts/=lib/flare-periphery-contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":flare-periphery-contracts/=lib/flare-periphery-contracts/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\"]},\"sources\":{\"lib/flare-periphery-contracts/coston2/IFastUpdateIncentiveManager.sol\":{\"keccak256\":\"0x54902290268700e5feee26896b85c8adf63e4ec740a57abbfa17bafbe30d4d76\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6cfae8a92cf606ae5350fec58ecf319d745e41dc753f2a8b66d6ca41278b71ee\",\"dweb:/ipfs/Qmd2f4yy7DHuh7L7deextCX8ULpxjA25v8riQ3e26M5uDp\"]},\"lib/flare-periphery-contracts/coston2/IFastUpdatesConfiguration.sol\":{\"keccak256\":\"0x52f88f75d59f6e065354af8f6843a51155a6304797788559bfeea25d66e27778\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f05beda7cac5c4cabab0c51b38ad03191ed7ee9712830b55f8452200501c9a88\",\"dweb:/ipfs/QmSfhXJTcXNjRZTHZyJLdS9GbkJpa76UJehQ47UTByMra7\"]},\"lib/flare-periphery-contracts/coston2/IFixedPointArithmetic.sol\":{\"keccak256\":\"0x654f39a367efcda750dfa931070b828fe4c3498678dc75c46f4f9f366df58b0d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://174f32f7cc21068689bf9beef81c4ed8c7ca0a8a05971656daa5a40972dbd059\",\"dweb:/ipfs/QmbQvPWA54Jb4VieL5ncaV7T4ax2kYQFyYCVSvfVTA6so8\"]},\"lib/flare-periphery-contracts/coston2/IIncreaseManager.sol\":{\"keccak256\":\"0xd483962efcae8fcada9b8c8112c497939ac4289c441280e5a3f468056b2c4e0f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5d83eb7982f9eaaef70923dbb704238deec9a8aa387f404efeed0a46e195136f\",\"dweb:/ipfs/QmRffbMzLtgQ2KkDrRZUadhmfuHi6AsoBz3Mu7qQVnEmJ6\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.20+commit.a1b79de6"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"uint24","name":"rewardEpochId","type":"uint24","indexed":true},{"internalType":"Range","name":"rangeIncrease","type":"uint256","indexed":false},{"internalType":"SampleSize","name":"sampleSizeIncrease","type":"uint256","indexed":false},{"internalType":"Fee","name":"offerAmount","type":"uint256","indexed":false}],"type":"event","name":"IncentiveOffered","anonymous":false},{"inputs":[{"internalType":"uint24","name":"rewardEpochId","type":"uint24","indexed":true},{"internalType":"struct IFastUpdatesConfiguration.FeedConfiguration[]","name":"feedConfigurations","type":"tuple[]","components":[{"internalType":"bytes21","name":"feedId","type":"bytes21"},{"internalType":"uint32","name":"rewardBandValue","type":"uint32"},{"internalType":"uint24","name":"inflationShare","type":"uint24"}],"indexed":false},{"internalType":"uint256","name":"amount","type":"uint256","indexed":false}],"type":"event","name":"InflationRewardsOffered","anonymous":false},{"inputs":[],"stateMutability":"view","type":"function","name":"getBaseScale","outputs":[{"internalType":"Scale","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getCurrentSampleSizeIncreasePrice","outputs":[{"internalType":"Fee","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getExpectedSampleSize","outputs":[{"internalType":"SampleSize","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getIncentiveDuration","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getPrecision","outputs":[{"internalType":"Precision","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getRange","outputs":[{"internalType":"Range","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getScale","outputs":[{"internalType":"Scale","name":"","type":"uint256"}]},{"inputs":[{"internalType":"struct IFastUpdateIncentiveManager.IncentiveOffer","name":"_offer","type":"tuple","components":[{"internalType":"Range","name":"rangeIncrease","type":"uint256"},{"internalType":"Range","name":"rangeLimit","type":"uint256"}]}],"stateMutability":"payable","type":"function","name":"offerIncentive"},{"inputs":[],"stateMutability":"view","type":"function","name":"rangeIncreaseLimit","outputs":[{"internalType":"Range","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"rangeIncreasePrice","outputs":[{"internalType":"Fee","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"sampleIncreaseLimit","outputs":[{"internalType":"SampleSize","name":"","type":"uint256"}]}],"devdoc":{"kind":"dev","methods":{"offerIncentive((uint256,uint256))":{"params":{"_offer":"The requested amount of per-block variation range increase, along with a cap for the ultimate range."}}},"version":1},"userdoc":{"kind":"user","methods":{"getBaseScale()":{"notice":"Viewer for the base value of the scale itself."},"getCurrentSampleSizeIncreasePrice()":{"notice":"Viewer for the current value of sample size increase price."},"getExpectedSampleSize()":{"notice":"Viewer for the current value of the expected sample size."},"getPrecision()":{"notice":"Viewer for the current value of the unit delta's precision (the fractional part of the scale)."},"getRange()":{"notice":"Viewer for the current value of the per-block variation range."},"getScale()":{"notice":"Viewer for the current value of the scale itself."},"offerIncentive((uint256,uint256))":{"notice":"The entry point for third parties to make incentive offers. It accepts a payment and, using the contents of `_offer`, computes how much the expected sample size will be increased to apply the requested (but capped) range increase. If the ultimate value of the range exceeds the cap, funds are returned to the sender in proportion to the amount by which the increase is adjusted to reach the cap."},"rangeIncreaseLimit()":{"notice":"The maximum value that the range can be increased to by an incentive offer."},"rangeIncreasePrice()":{"notice":"The price for increasing the per-block range of variation by 1, prorated for the actual amount of increase."},"sampleIncreaseLimit()":{"notice":"The maximum amount by which the expected sample size can be increased by an incentive offer. This is controlled by governance and forces a minimum cost to increasing the sample size greatly, which would otherwise be an attack on the protocol."}},"version":1}},"settings":{"remappings":["@flarenetwork/flare-periphery-contracts/=lib/flare-periphery-contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","flare-periphery-contracts/=lib/flare-periphery-contracts/","forge-std/=lib/forge-std/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin/=lib/openzeppelin-contracts/contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/flare-periphery-contracts/coston2/IFastUpdateIncentiveManager.sol":"IFastUpdateIncentiveManager"},"evmVersion":"paris","libraries":{}},"sources":{"lib/flare-periphery-contracts/coston2/IFastUpdateIncentiveManager.sol":{"keccak256":"0x54902290268700e5feee26896b85c8adf63e4ec740a57abbfa17bafbe30d4d76","urls":["bzz-raw://6cfae8a92cf606ae5350fec58ecf319d745e41dc753f2a8b66d6ca41278b71ee","dweb:/ipfs/Qmd2f4yy7DHuh7L7deextCX8ULpxjA25v8riQ3e26M5uDp"],"license":"MIT"},"lib/flare-periphery-contracts/coston2/IFastUpdatesConfiguration.sol":{"keccak256":"0x52f88f75d59f6e065354af8f6843a51155a6304797788559bfeea25d66e27778","urls":["bzz-raw://f05beda7cac5c4cabab0c51b38ad03191ed7ee9712830b55f8452200501c9a88","dweb:/ipfs/QmSfhXJTcXNjRZTHZyJLdS9GbkJpa76UJehQ47UTByMra7"],"license":"MIT"},"lib/flare-periphery-contracts/coston2/IFixedPointArithmetic.sol":{"keccak256":"0x654f39a367efcda750dfa931070b828fe4c3498678dc75c46f4f9f366df58b0d","urls":["bzz-raw://174f32f7cc21068689bf9beef81c4ed8c7ca0a8a05971656daa5a40972dbd059","dweb:/ipfs/QmbQvPWA54Jb4VieL5ncaV7T4ax2kYQFyYCVSvfVTA6so8"],"license":"MIT"},"lib/flare-periphery-contracts/coston2/IIncreaseManager.sol":{"keccak256":"0xd483962efcae8fcada9b8c8112c497939ac4289c441280e5a3f468056b2c4e0f","urls":["bzz-raw://5d83eb7982f9eaaef70923dbb704238deec9a8aa387f404efeed0a46e195136f","dweb:/ipfs/QmRffbMzLtgQ2KkDrRZUadhmfuHi6AsoBz3Mu7qQVnEmJ6"],"license":"MIT"}},"version":1},"id":8}