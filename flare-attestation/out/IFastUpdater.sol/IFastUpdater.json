{"abi":[{"type":"function","name":"blockScoreCutoff","inputs":[{"name":"_blockNum","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"_cutoff","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"currentRewardEpochId","inputs":[],"outputs":[{"name":"","type":"uint24","internalType":"uint24"}],"stateMutability":"view"},{"type":"function","name":"currentScoreCutoff","inputs":[],"outputs":[{"name":"_cutoff","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"currentSortitionWeight","inputs":[{"name":"_signingPolicyAddress","type":"address","internalType":"address"}],"outputs":[{"name":"_weight","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"fetchAllCurrentFeeds","inputs":[],"outputs":[{"name":"_feedIds","type":"bytes21[]","internalType":"bytes21[]"},{"name":"_feeds","type":"uint256[]","internalType":"uint256[]"},{"name":"_decimals","type":"int8[]","internalType":"int8[]"},{"name":"_timestamp","type":"uint64","internalType":"uint64"}],"stateMutability":"payable"},{"type":"function","name":"fetchCurrentFeeds","inputs":[{"name":"_indices","type":"uint256[]","internalType":"uint256[]"}],"outputs":[{"name":"_feeds","type":"uint256[]","internalType":"uint256[]"},{"name":"_decimals","type":"int8[]","internalType":"int8[]"},{"name":"_timestamp","type":"uint64","internalType":"uint64"}],"stateMutability":"payable"},{"type":"function","name":"numberOfUpdates","inputs":[{"name":"_historySize","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"_noOfUpdates","type":"uint256[]","internalType":"uint256[]"}],"stateMutability":"view"},{"type":"function","name":"numberOfUpdatesInBlock","inputs":[{"name":"_blockNumber","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"_noOfUpdates","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"submissionWindow","inputs":[],"outputs":[{"name":"","type":"uint8","internalType":"uint8"}],"stateMutability":"view"},{"type":"function","name":"submitUpdates","inputs":[{"name":"_updates","type":"tuple","internalType":"struct IFastUpdater.FastUpdates","components":[{"name":"sortitionBlock","type":"uint256","internalType":"uint256"},{"name":"sortitionCredential","type":"tuple","internalType":"struct SortitionCredential","components":[{"name":"replicate","type":"uint256","internalType":"uint256"},{"name":"gamma","type":"tuple","internalType":"struct G1Point","components":[{"name":"x","type":"uint256","internalType":"uint256"},{"name":"y","type":"uint256","internalType":"uint256"}]},{"name":"c","type":"uint256","internalType":"uint256"},{"name":"s","type":"uint256","internalType":"uint256"}]},{"name":"deltas","type":"bytes","internalType":"bytes"},{"name":"signature","type":"tuple","internalType":"struct IFastUpdater.Signature","components":[{"name":"v","type":"uint8","internalType":"uint8"},{"name":"r","type":"bytes32","internalType":"bytes32"},{"name":"s","type":"bytes32","internalType":"bytes32"}]}]}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"FastUpdateFeedRemoved","inputs":[{"name":"index","type":"uint256","indexed":true,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"FastUpdateFeedReset","inputs":[{"name":"votingRoundId","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"index","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"id","type":"bytes21","indexed":true,"internalType":"bytes21"},{"name":"value","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"decimals","type":"int8","indexed":false,"internalType":"int8"}],"anonymous":false},{"type":"event","name":"FastUpdateFeeds","inputs":[{"name":"votingEpochId","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"feeds","type":"uint256[]","indexed":false,"internalType":"uint256[]"},{"name":"decimals","type":"int8[]","indexed":false,"internalType":"int8[]"}],"anonymous":false},{"type":"event","name":"FastUpdateFeedsSubmitted","inputs":[{"name":"votingRoundId","type":"uint32","indexed":true,"internalType":"uint32"},{"name":"signingPolicyAddress","type":"address","indexed":true,"internalType":"address"}],"anonymous":false}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"blockScoreCutoff(uint256)":"dcb1476e","currentRewardEpochId()":"8e0e9f7c","currentScoreCutoff()":"0799fe75","currentSortitionWeight(address)":"a14634a7","fetchAllCurrentFeeds()":"4691377f","fetchCurrentFeeds(uint256[])":"45a15d3c","numberOfUpdates(uint256)":"e36da7b7","numberOfUpdatesInBlock(uint256)":"fc79c300","submissionWindow()":"e621dbc7","submitUpdates((uint256,(uint256,(uint256,uint256),uint256,uint256),bytes,(uint8,bytes32,bytes32)))":"470e91df"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"FastUpdateFeedRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"votingRoundId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes21\",\"name\":\"id\",\"type\":\"bytes21\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int8\",\"name\":\"decimals\",\"type\":\"int8\"}],\"name\":\"FastUpdateFeedReset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"votingEpochId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"feeds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"int8[]\",\"name\":\"decimals\",\"type\":\"int8[]\"}],\"name\":\"FastUpdateFeeds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"votingRoundId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signingPolicyAddress\",\"type\":\"address\"}],\"name\":\"FastUpdateFeedsSubmitted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockNum\",\"type\":\"uint256\"}],\"name\":\"blockScoreCutoff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_cutoff\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRewardEpochId\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentScoreCutoff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_cutoff\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signingPolicyAddress\",\"type\":\"address\"}],\"name\":\"currentSortitionWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_weight\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fetchAllCurrentFeeds\",\"outputs\":[{\"internalType\":\"bytes21[]\",\"name\":\"_feedIds\",\"type\":\"bytes21[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_feeds\",\"type\":\"uint256[]\"},{\"internalType\":\"int8[]\",\"name\":\"_decimals\",\"type\":\"int8[]\"},{\"internalType\":\"uint64\",\"name\":\"_timestamp\",\"type\":\"uint64\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_indices\",\"type\":\"uint256[]\"}],\"name\":\"fetchCurrentFeeds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_feeds\",\"type\":\"uint256[]\"},{\"internalType\":\"int8[]\",\"name\":\"_decimals\",\"type\":\"int8[]\"},{\"internalType\":\"uint64\",\"name\":\"_timestamp\",\"type\":\"uint64\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_historySize\",\"type\":\"uint256\"}],\"name\":\"numberOfUpdates\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_noOfUpdates\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"numberOfUpdatesInBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_noOfUpdates\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"submissionWindow\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sortitionBlock\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"replicate\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct G1Point\",\"name\":\"gamma\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"c\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"}],\"internalType\":\"struct SortitionCredential\",\"name\":\"sortitionCredential\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"deltas\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IFastUpdater.Signature\",\"name\":\"signature\",\"type\":\"tuple\"}],\"internalType\":\"struct IFastUpdater.FastUpdates\",\"name\":\"_updates\",\"type\":\"tuple\"}],\"name\":\"submitUpdates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"blockScoreCutoff(uint256)\":{\"params\":{\"_blockNum\":\"The block for which the cutoff is requested.\"},\"returns\":{\"_cutoff\":\"The upper endpoint of the acceptable range of \\\"scores\\\" that providers generate for sortition. A score below the cutoff indicates eligibility to submit updates in the present sortition round.\"}},\"currentScoreCutoff()\":{\"returns\":{\"_cutoff\":\"The upper endpoint of the acceptable range of \\\"scores\\\" that providers generate for sortition. A score below the cutoff indicates eligibility to submit updates in the present sortition round.\"}},\"currentSortitionWeight(address)\":{\"params\":{\"_signingPolicyAddress\":\"The signing policy address of the specified provider. This is different from the sender of an update transaction, due to the signature included in the `FastUpdates` type.\"},\"returns\":{\"_weight\":\"The specified provider's weight for sortition purposes. This is derived from the provider's delegation weight for the FTSO, but rescaled against a fixed number of \\\"virtual providers\\\", indicating how many potential updates a single provider may make in a sortition round.\"}},\"fetchAllCurrentFeeds()\":{\"returns\":{\"_decimals\":\"The list of decimal places for feeds.\",\"_feedIds\":\"The list of feed ids.\",\"_feeds\":\"The list of feeds.\",\"_timestamp\":\"The timestamp of the last update.\"}},\"fetchCurrentFeeds(uint256[])\":{\"params\":{\"_indices\":\"Index numbers of the feeds for which data should be returned, corresponding to `feedIds` in the `FastUpdatesConfiguration` contract.\"},\"returns\":{\"_decimals\":\"The list of decimal places for the requested feeds, in the same order as the feed indices were given (which may not be their sorted order).\",\"_feeds\":\"The list of data for the requested feeds, in the same order as the feed indices were given (which may not be their sorted order).\",\"_timestamp\":\"The timestamp of the last update.\"}},\"numberOfUpdates(uint256)\":{\"params\":{\"_historySize\":\"The number of blocks for which the number of updates should be returned.\"},\"returns\":{\"_noOfUpdates\":\"The number of updates submitted in each block for the last `_historySize` blocks. The array is ordered from the current block to the oldest block.\"}},\"numberOfUpdatesInBlock(uint256)\":{\"params\":{\"_blockNumber\":\"The block number for which the number of updates should be returned.\"},\"returns\":{\"_noOfUpdates\":\"The number of updates submitted in the specified block.\"}},\"submitUpdates((uint256,(uint256,(uint256,uint256),uint256,uint256),bytes,(uint8,bytes32,bytes32)))\":{\"params\":{\"_updates\":\"Data of an update transaction, which in addition to the actual list of updates, includes the sortition credential proving the provider's eligibility to make updates in the also-included sortition round, as well as a signature allowing a single registered provider to submit from multiple EVM accounts.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"FastUpdateFeedRemoved(uint256)\":{\"notice\":\"Event emitted when a feed is removed.\"},\"FastUpdateFeedReset(uint256,uint256,bytes21,uint256,int8)\":{\"notice\":\"Event emitted when a feed is added or reset.\"},\"FastUpdateFeeds(uint256,uint256[],int8[])\":{\"notice\":\"Event emitted at the start of a new voting epoch - current feeds' values and decimals.\"},\"FastUpdateFeedsSubmitted(uint32,address)\":{\"notice\":\"Event emitted when a new set of updates is submitted.\"}},\"kind\":\"user\",\"methods\":{\"blockScoreCutoff(uint256)\":{\"notice\":\"Informational getter concerning the eligibility criterion for being chosen by sortition in a given block.\"},\"currentRewardEpochId()\":{\"notice\":\"Id of the current reward epoch.\"},\"currentScoreCutoff()\":{\"notice\":\"Informational getter concerning the eligibility criterion for being chosen by sortition.\"},\"currentSortitionWeight(address)\":{\"notice\":\"Informational getter concerning a provider's likelihood of being chosen by sortition.\"},\"fetchAllCurrentFeeds()\":{\"notice\":\"Public access to the stored data of all feeds. A fee (calculated by the FeeCalculator contract) may need to be paid. **NOTE:** Overpayment is not refunded.\"},\"fetchCurrentFeeds(uint256[])\":{\"notice\":\"Public access to the stored data of each feed, allowing controlled batch access to the lengthy complete data. Feeds should be sorted for better performance. A fee (calculated by the FeeCalculator contract) may need to be paid. **NOTE:** Overpayment is not refunded.\"},\"numberOfUpdates(uint256)\":{\"notice\":\"The number of updates submitted in each block for the last `_historySize` blocks (up to `MAX_BLOCKS_HISTORY`).\"},\"numberOfUpdatesInBlock(uint256)\":{\"notice\":\"The number of updates submitted in a block - available only for the last `MAX_BLOCKS_HISTORY` blocks.\"},\"submissionWindow()\":{\"notice\":\"The submission window is a number of blocks forming a \\\"grace period\\\" after a round of sortition starts, during which providers may submit updates for that round. In other words, each block starts a new round of sortition and that round lasts `submissionWindow` blocks.\"},\"submitUpdates((uint256,(uint256,(uint256,uint256),uint256,uint256),bytes,(uint8,bytes32,bytes32)))\":{\"notice\":\"The entry point for providers to submit an update transaction.\"}},\"notice\":\"Fast updater interface.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/flare-periphery-contracts/coston2/IFastUpdater.sol\":\"IFastUpdater\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@flarenetwork/flare-periphery-contracts/=lib/flare-periphery-contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":flare-periphery-contracts/=lib/flare-periphery-contracts/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\"]},\"sources\":{\"lib/flare-periphery-contracts/coston2/IBn256.sol\":{\"keccak256\":\"0xd04c3b6f729dbe78f57526de2b58510c4e906810dadf5836ba0715e4d60fe6f0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://50e44cf8560ae5e922eb038d3d9cd7b027d372a637377ab3de940018e21d95a0\",\"dweb:/ipfs/Qmaqkda1YiXGZQqaGfpMgx9sgBZabBYAs6WMtZKToWUfNi\"]},\"lib/flare-periphery-contracts/coston2/IFastUpdater.sol\":{\"keccak256\":\"0x3686a45d54ded58b4350421c6b74f10c328be61351e86d2d0e9c7cc51b3470c5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://70dfb84850b38a489c5bd751f84c8fa8f54ea00827a4ffaf5c7daa3cea4ecb36\",\"dweb:/ipfs/QmUbSqTHkuXbDeEUFG1TnKZ4ZtYHreSEXYmAmt8yq7UP84\"]},\"lib/flare-periphery-contracts/coston2/ISortition.sol\":{\"keccak256\":\"0xce8eac4878a9af3a2aea4f4dc74995358de06a0d3b937ad84d3fe98b953c0a6c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://66a85cee95f651b711fca4e828b067ec35f5f7720310942303cd5adb0ddb2a94\",\"dweb:/ipfs/QmQVggejpPVf9sHG69dUSPPEh1Bimt5DML8jydV4Qmnfao\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.20+commit.a1b79de6"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"uint256","name":"index","type":"uint256","indexed":true}],"type":"event","name":"FastUpdateFeedRemoved","anonymous":false},{"inputs":[{"internalType":"uint256","name":"votingRoundId","type":"uint256","indexed":true},{"internalType":"uint256","name":"index","type":"uint256","indexed":true},{"internalType":"bytes21","name":"id","type":"bytes21","indexed":true},{"internalType":"uint256","name":"value","type":"uint256","indexed":false},{"internalType":"int8","name":"decimals","type":"int8","indexed":false}],"type":"event","name":"FastUpdateFeedReset","anonymous":false},{"inputs":[{"internalType":"uint256","name":"votingEpochId","type":"uint256","indexed":true},{"internalType":"uint256[]","name":"feeds","type":"uint256[]","indexed":false},{"internalType":"int8[]","name":"decimals","type":"int8[]","indexed":false}],"type":"event","name":"FastUpdateFeeds","anonymous":false},{"inputs":[{"internalType":"uint32","name":"votingRoundId","type":"uint32","indexed":true},{"internalType":"address","name":"signingPolicyAddress","type":"address","indexed":true}],"type":"event","name":"FastUpdateFeedsSubmitted","anonymous":false},{"inputs":[{"internalType":"uint256","name":"_blockNum","type":"uint256"}],"stateMutability":"view","type":"function","name":"blockScoreCutoff","outputs":[{"internalType":"uint256","name":"_cutoff","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"currentRewardEpochId","outputs":[{"internalType":"uint24","name":"","type":"uint24"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"currentScoreCutoff","outputs":[{"internalType":"uint256","name":"_cutoff","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"_signingPolicyAddress","type":"address"}],"stateMutability":"view","type":"function","name":"currentSortitionWeight","outputs":[{"internalType":"uint256","name":"_weight","type":"uint256"}]},{"inputs":[],"stateMutability":"payable","type":"function","name":"fetchAllCurrentFeeds","outputs":[{"internalType":"bytes21[]","name":"_feedIds","type":"bytes21[]"},{"internalType":"uint256[]","name":"_feeds","type":"uint256[]"},{"internalType":"int8[]","name":"_decimals","type":"int8[]"},{"internalType":"uint64","name":"_timestamp","type":"uint64"}]},{"inputs":[{"internalType":"uint256[]","name":"_indices","type":"uint256[]"}],"stateMutability":"payable","type":"function","name":"fetchCurrentFeeds","outputs":[{"internalType":"uint256[]","name":"_feeds","type":"uint256[]"},{"internalType":"int8[]","name":"_decimals","type":"int8[]"},{"internalType":"uint64","name":"_timestamp","type":"uint64"}]},{"inputs":[{"internalType":"uint256","name":"_historySize","type":"uint256"}],"stateMutability":"view","type":"function","name":"numberOfUpdates","outputs":[{"internalType":"uint256[]","name":"_noOfUpdates","type":"uint256[]"}]},{"inputs":[{"internalType":"uint256","name":"_blockNumber","type":"uint256"}],"stateMutability":"view","type":"function","name":"numberOfUpdatesInBlock","outputs":[{"internalType":"uint256","name":"_noOfUpdates","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"submissionWindow","outputs":[{"internalType":"uint8","name":"","type":"uint8"}]},{"inputs":[{"internalType":"struct IFastUpdater.FastUpdates","name":"_updates","type":"tuple","components":[{"internalType":"uint256","name":"sortitionBlock","type":"uint256"},{"internalType":"struct SortitionCredential","name":"sortitionCredential","type":"tuple","components":[{"internalType":"uint256","name":"replicate","type":"uint256"},{"internalType":"struct G1Point","name":"gamma","type":"tuple","components":[{"internalType":"uint256","name":"x","type":"uint256"},{"internalType":"uint256","name":"y","type":"uint256"}]},{"internalType":"uint256","name":"c","type":"uint256"},{"internalType":"uint256","name":"s","type":"uint256"}]},{"internalType":"bytes","name":"deltas","type":"bytes"},{"internalType":"struct IFastUpdater.Signature","name":"signature","type":"tuple","components":[{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}]}]}],"stateMutability":"nonpayable","type":"function","name":"submitUpdates"}],"devdoc":{"kind":"dev","methods":{"blockScoreCutoff(uint256)":{"params":{"_blockNum":"The block for which the cutoff is requested."},"returns":{"_cutoff":"The upper endpoint of the acceptable range of \"scores\" that providers generate for sortition. A score below the cutoff indicates eligibility to submit updates in the present sortition round."}},"currentScoreCutoff()":{"returns":{"_cutoff":"The upper endpoint of the acceptable range of \"scores\" that providers generate for sortition. A score below the cutoff indicates eligibility to submit updates in the present sortition round."}},"currentSortitionWeight(address)":{"params":{"_signingPolicyAddress":"The signing policy address of the specified provider. This is different from the sender of an update transaction, due to the signature included in the `FastUpdates` type."},"returns":{"_weight":"The specified provider's weight for sortition purposes. This is derived from the provider's delegation weight for the FTSO, but rescaled against a fixed number of \"virtual providers\", indicating how many potential updates a single provider may make in a sortition round."}},"fetchAllCurrentFeeds()":{"returns":{"_decimals":"The list of decimal places for feeds.","_feedIds":"The list of feed ids.","_feeds":"The list of feeds.","_timestamp":"The timestamp of the last update."}},"fetchCurrentFeeds(uint256[])":{"params":{"_indices":"Index numbers of the feeds for which data should be returned, corresponding to `feedIds` in the `FastUpdatesConfiguration` contract."},"returns":{"_decimals":"The list of decimal places for the requested feeds, in the same order as the feed indices were given (which may not be their sorted order).","_feeds":"The list of data for the requested feeds, in the same order as the feed indices were given (which may not be their sorted order).","_timestamp":"The timestamp of the last update."}},"numberOfUpdates(uint256)":{"params":{"_historySize":"The number of blocks for which the number of updates should be returned."},"returns":{"_noOfUpdates":"The number of updates submitted in each block for the last `_historySize` blocks. The array is ordered from the current block to the oldest block."}},"numberOfUpdatesInBlock(uint256)":{"params":{"_blockNumber":"The block number for which the number of updates should be returned."},"returns":{"_noOfUpdates":"The number of updates submitted in the specified block."}},"submitUpdates((uint256,(uint256,(uint256,uint256),uint256,uint256),bytes,(uint8,bytes32,bytes32)))":{"params":{"_updates":"Data of an update transaction, which in addition to the actual list of updates, includes the sortition credential proving the provider's eligibility to make updates in the also-included sortition round, as well as a signature allowing a single registered provider to submit from multiple EVM accounts."}}},"version":1},"userdoc":{"kind":"user","methods":{"blockScoreCutoff(uint256)":{"notice":"Informational getter concerning the eligibility criterion for being chosen by sortition in a given block."},"currentRewardEpochId()":{"notice":"Id of the current reward epoch."},"currentScoreCutoff()":{"notice":"Informational getter concerning the eligibility criterion for being chosen by sortition."},"currentSortitionWeight(address)":{"notice":"Informational getter concerning a provider's likelihood of being chosen by sortition."},"fetchAllCurrentFeeds()":{"notice":"Public access to the stored data of all feeds. A fee (calculated by the FeeCalculator contract) may need to be paid. **NOTE:** Overpayment is not refunded."},"fetchCurrentFeeds(uint256[])":{"notice":"Public access to the stored data of each feed, allowing controlled batch access to the lengthy complete data. Feeds should be sorted for better performance. A fee (calculated by the FeeCalculator contract) may need to be paid. **NOTE:** Overpayment is not refunded."},"numberOfUpdates(uint256)":{"notice":"The number of updates submitted in each block for the last `_historySize` blocks (up to `MAX_BLOCKS_HISTORY`)."},"numberOfUpdatesInBlock(uint256)":{"notice":"The number of updates submitted in a block - available only for the last `MAX_BLOCKS_HISTORY` blocks."},"submissionWindow()":{"notice":"The submission window is a number of blocks forming a \"grace period\" after a round of sortition starts, during which providers may submit updates for that round. In other words, each block starts a new round of sortition and that round lasts `submissionWindow` blocks."},"submitUpdates((uint256,(uint256,(uint256,uint256),uint256,uint256),bytes,(uint8,bytes32,bytes32)))":{"notice":"The entry point for providers to submit an update transaction."}},"version":1}},"settings":{"remappings":["@flarenetwork/flare-periphery-contracts/=lib/flare-periphery-contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","flare-periphery-contracts/=lib/flare-periphery-contracts/","forge-std/=lib/forge-std/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin/=lib/openzeppelin-contracts/contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/flare-periphery-contracts/coston2/IFastUpdater.sol":"IFastUpdater"},"evmVersion":"paris","libraries":{}},"sources":{"lib/flare-periphery-contracts/coston2/IBn256.sol":{"keccak256":"0xd04c3b6f729dbe78f57526de2b58510c4e906810dadf5836ba0715e4d60fe6f0","urls":["bzz-raw://50e44cf8560ae5e922eb038d3d9cd7b027d372a637377ab3de940018e21d95a0","dweb:/ipfs/Qmaqkda1YiXGZQqaGfpMgx9sgBZabBYAs6WMtZKToWUfNi"],"license":"MIT"},"lib/flare-periphery-contracts/coston2/IFastUpdater.sol":{"keccak256":"0x3686a45d54ded58b4350421c6b74f10c328be61351e86d2d0e9c7cc51b3470c5","urls":["bzz-raw://70dfb84850b38a489c5bd751f84c8fa8f54ea00827a4ffaf5c7daa3cea4ecb36","dweb:/ipfs/QmUbSqTHkuXbDeEUFG1TnKZ4ZtYHreSEXYmAmt8yq7UP84"],"license":"MIT"},"lib/flare-periphery-contracts/coston2/ISortition.sol":{"keccak256":"0xce8eac4878a9af3a2aea4f4dc74995358de06a0d3b937ad84d3fe98b953c0a6c","urls":["bzz-raw://66a85cee95f651b711fca4e828b067ec35f5f7720310942303cd5adb0ddb2a94","dweb:/ipfs/QmQVggejpPVf9sHG69dUSPPEh1Bimt5DML8jydV4Qmnfao"],"license":"MIT"}},"version":1},"id":9}