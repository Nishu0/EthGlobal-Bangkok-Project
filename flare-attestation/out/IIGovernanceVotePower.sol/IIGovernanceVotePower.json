{"abi":[{"type":"function","name":"delegate","inputs":[{"name":"_to","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"getCleanupBlockNumber","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getDelegateOfAt","inputs":[{"name":"_who","type":"address","internalType":"address"},{"name":"_blockNumber","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"getDelegateOfAtNow","inputs":[{"name":"_who","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"getVotes","inputs":[{"name":"_who","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"ownerToken","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract IVPToken"}],"stateMutability":"view"},{"type":"function","name":"pChainStakeMirror","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract IPChainStakeMirror"}],"stateMutability":"view"},{"type":"function","name":"setCleanerContract","inputs":[{"name":"_cleanerContract","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setCleanupBlockNumber","inputs":[{"name":"_blockNumber","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"undelegate","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"updateAtTokenTransfer","inputs":[{"name":"_from","type":"address","internalType":"address"},{"name":"_to","type":"address","internalType":"address"},{"name":"_fromBalance","type":"uint256","internalType":"uint256"},{"name":"_toBalance","type":"uint256","internalType":"uint256"},{"name":"_amount","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"votePowerOfAt","inputs":[{"name":"_who","type":"address","internalType":"address"},{"name":"_blockNumber","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"event","name":"DelegateChanged","inputs":[{"name":"delegator","type":"address","indexed":true,"internalType":"address"},{"name":"fromDelegate","type":"address","indexed":true,"internalType":"address"},{"name":"toDelegate","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"event","name":"DelegateVotesChanged","inputs":[{"name":"delegate","type":"address","indexed":true,"internalType":"address"},{"name":"previousBalance","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"newBalance","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"delegate(address)":"5c19a95c","getCleanupBlockNumber()":"a72ec4b6","getDelegateOfAt(address,uint256)":"3c028e9d","getDelegateOfAtNow(address)":"b3e871ee","getVotes(address)":"9ab24eb0","ownerToken()":"65371883","pChainStakeMirror()":"62d9c89a","setCleanerContract(address)":"f6a494af","setCleanupBlockNumber(uint256)":"13de97f5","undelegate()":"92ab89bb","updateAtTokenTransfer(address,address,uint256,uint256,uint256)":"eadb4362","votePowerOfAt(address,uint256)":"92bfe6d8"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCleanupBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"getDelegateOfAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"getDelegateOfAtNow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"getVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerToken\",\"outputs\":[{\"internalType\":\"contract IVPToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pChainStakeMirror\",\"outputs\":[{\"internalType\":\"contract IPChainStakeMirror\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cleanerContract\",\"type\":\"address\"}],\"name\":\"setCleanerContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"setCleanupBlockNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"undelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fromBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"updateAtTokenTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"votePowerOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"DelegateChanged(address,address,address)\":{\"params\":{\"delegator\":\"Account delegating its vote power.\",\"fromDelegate\":\"Account receiving the delegation before the change. Can be address(0) if there was no previous delegation.\",\"toDelegate\":\"Account receiving the delegation after the change. Can be address(0) if `delegator` just undelegated all its vote power.\"}},\"DelegateVotesChanged(address,uint256,uint256)\":{\"params\":{\"delegate\":\"The account receiving the changing delegated vote power.\",\"newBalance\":\"Delegated vote power after the change.\",\"previousBalance\":\"Delegated vote power before the change.\"}}},\"kind\":\"dev\",\"methods\":{\"delegate(address)\":{\"params\":{\"_to\":\"The address of the recipient.\"}},\"getCleanupBlockNumber()\":{\"returns\":{\"_0\":\"The currently set cleanup block number.\"}},\"getDelegateOfAt(address,uint256)\":{\"params\":{\"_blockNumber\":\"The block number at which to fetch the address.\",\"_who\":\"The address being queried.\"},\"returns\":{\"_0\":\"Address where `_who` was delegating its governance vote power at block `_blockNumber`.\"}},\"getDelegateOfAtNow(address)\":{\"params\":{\"_who\":\"The address being queried.\"},\"returns\":{\"_0\":\"Address where `_who` is currently delegating its governance vote power.\"}},\"getVotes(address)\":{\"params\":{\"_who\":\"The address being queried.\"},\"returns\":{\"_0\":\"Governance vote power of `account` at the lastest block.\"}},\"ownerToken()\":{\"returns\":{\"_0\":\"The IVPToken interface owning this contract.\"}},\"pChainStakeMirror()\":{\"returns\":{\"_0\":\"The IPChainStakeMirror interface owning this contract.\"}},\"setCleanerContract(address)\":{\"params\":{\"_cleanerContract\":\"Address of the cleanup contract. Usually this will be an instance of `CleanupBlockNumberManager`.\"}},\"setCleanupBlockNumber(uint256)\":{\"params\":{\"_blockNumber\":\"The new cleanup block number.\"}},\"updateAtTokenTransfer(address,address,uint256,uint256,uint256)\":{\"params\":{\"_amount\":\"Amount being transferred.\",\"_from\":\"Source address of the transfer.\",\"_fromBalance\":\"_Ignored._\",\"_to\":\"Destination address of the transfer.\",\"_toBalance\":\"_Ignored._\"}},\"votePowerOfAt(address,uint256)\":{\"params\":{\"_blockNumber\":\"The block number at which to fetch the vote power.\",\"_who\":\"The address being queried.\"},\"returns\":{\"_0\":\"Governance vote power of `_who` at `_blockNumber`.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"DelegateChanged(address,address,address)\":{\"notice\":\"Emitted when an account starts delegating vote power or switches its delegation to another address. The event is always emitted from a `GovernanceVotePower` contract.\"},\"DelegateVotesChanged(address,uint256,uint256)\":{\"notice\":\"Emitted when a delegate's vote power changes, as a result of a new delegation or a token transfer, for example. The event is always emitted from a `GovernanceVotePower` contract.\"}},\"kind\":\"user\",\"methods\":{\"delegate(address)\":{\"notice\":\"Delegates all governance vote power of `msg.sender` to address `_to`.\"},\"getCleanupBlockNumber()\":{\"notice\":\"Get the current cleanup block number set with `setCleanupBlockNumber()`.\"},\"getDelegateOfAt(address,uint256)\":{\"notice\":\"Gets the address an account is delegating its governance vote power to, at a given block number.\"},\"getDelegateOfAtNow(address)\":{\"notice\":\"Gets the address an account is delegating its governance vote power to, at the latest block number.\"},\"getVotes(address)\":{\"notice\":\"Gets the governance vote power of an address at the latest block, including all delegations made to it.\"},\"ownerToken()\":{\"notice\":\"Get the token that this governance vote power contract belongs to.\"},\"pChainStakeMirror()\":{\"notice\":\"Get the stake mirror contract that this governance vote power contract belongs to.\"},\"setCleanerContract(address)\":{\"notice\":\"Set the contract that is allowed to call history cleaning methods.\"},\"setCleanupBlockNumber(uint256)\":{\"notice\":\"Set the cleanup block number. Historic data for the blocks before `cleanupBlockNumber` can be erased. History before that block should never be used since it can be inconsistent. In particular, cleanup block number must be lower than the current vote power block.\"},\"undelegate()\":{\"notice\":\"Undelegates all governance vote power of `msg.sender`.\"},\"updateAtTokenTransfer(address,address,uint256,uint256,uint256)\":{\"notice\":\"Update governance vote power of all involved delegates after tokens are transferred. This function **MUST** be called after each governance token transfer for the delegates to reflect the correct balance.\"},\"votePowerOfAt(address,uint256)\":{\"notice\":\"Gets the governance vote power of an address at a given block number, including all delegations made to it.\"}},\"notice\":\"Internal interface for contracts delegating their governance vote power.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/flare-periphery-contracts/coston2/token/interface/IIGovernanceVotePower.sol\":\"IIGovernanceVotePower\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@flarenetwork/flare-periphery-contracts/=lib/flare-periphery-contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":flare-periphery-contracts/=lib/flare-periphery-contracts/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\"]},\"sources\":{\"lib/flare-periphery-contracts/coston2/IGovernanceVotePower.sol\":{\"keccak256\":\"0xac45cb04eedb4f19533df4867eb6cd50874a55ef04d73f4d2dc3d3b7d3927e3c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://12c190c019723041417c6f06c932a0719b837023d4fb42090d4bb6f820331132\",\"dweb:/ipfs/QmfAsGCz2FgYvearhCHLqJHkd4MMiSpZ8JkUUY5hNBU2oA\"]},\"lib/flare-periphery-contracts/coston2/IPChainStakeMirror.sol\":{\"keccak256\":\"0x8c70a1ae9079bb9d29c8e2dde781f546b6cb621f0b7cc943b9cbcbd52718bb41\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b4e89abe97c65481a1cacb59abcde6d18b127a89ed46f99402c30c6477ea0722\",\"dweb:/ipfs/Qmd6i71hUPHR11U1U8EvDwJyEg4xUZhLbDe7D4Z7LLrAZx\"]},\"lib/flare-periphery-contracts/coston2/IPChainStakeMirrorVerifier.sol\":{\"keccak256\":\"0x1a1d0a1302b59249f9d2ca2700bb9759bc66bae73fe1c920cf4c20ac75b475fe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7155abcad1dee722dbfad7bbdcf68608d9c9bddc0cb367897ce9ecc0185f7ff1\",\"dweb:/ipfs/Qmckp3mGWvBjQxeiGQAMQyeq3EK4tJmtMmj9EHZjzVXMQH\"]},\"lib/flare-periphery-contracts/coston2/IPChainVotePower.sol\":{\"keccak256\":\"0x23e31ef2ab9227795930728dc240fbe59f31f1b05e595ee137acc1e5e6e8497e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://aecec4b505b6ea3963e78b39a6131b4562b908c24cfea9a674559dde23af72fe\",\"dweb:/ipfs/QmQmK8aAzcSYUCkvcZcXRNVybermZ6CEqjSXbS99gpytLa\"]},\"lib/flare-periphery-contracts/coston2/IVPContractEvents.sol\":{\"keccak256\":\"0x651a2ff1d5c179b87259f564d02877ae496b236bd48f4813a4d815c25e2407cf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b68d9f9bfeeffa03a6d3f6c14a2633759f3739486e06e3daf03be60c6f9bbce7\",\"dweb:/ipfs/QmWJrZF5UYPXQaSKVeP4iJUZj4jhDqmmMopxU8K3KdvJe9\"]},\"lib/flare-periphery-contracts/coston2/IVPToken.sol\":{\"keccak256\":\"0xa8755907f367ef19f960759730e3c17fa95b18ee01e38b98c82071805af21f2e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b8526ec06e70f60a2e243bbb5808b63ff7dfb60f407297e70d4df33682bbdf92\",\"dweb:/ipfs/QmQyTcxXAAbHdNdkxPgNcCHXqrtTSFVzUBy5ayQdCXTehf\"]},\"lib/flare-periphery-contracts/coston2/token/interface/IIGovernanceVotePower.sol\":{\"keccak256\":\"0x3b175c30e7c500b9d8af13de07e631ab86b0ffce10917b0285cd06137f15be1a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f3874d73889a0878f146848b2bbbd65911c6b2cf5ae1b81a0c63086a34c51f7a\",\"dweb:/ipfs/QmSxRJ3Ej2WQc7sTRDyKnkq2pKaBKCwmgyDfDUyi6Ay3hB\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.20+commit.a1b79de6"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"delegator","type":"address","indexed":true},{"internalType":"address","name":"fromDelegate","type":"address","indexed":true},{"internalType":"address","name":"toDelegate","type":"address","indexed":true}],"type":"event","name":"DelegateChanged","anonymous":false},{"inputs":[{"internalType":"address","name":"delegate","type":"address","indexed":true},{"internalType":"uint256","name":"previousBalance","type":"uint256","indexed":false},{"internalType":"uint256","name":"newBalance","type":"uint256","indexed":false}],"type":"event","name":"DelegateVotesChanged","anonymous":false},{"inputs":[{"internalType":"address","name":"_to","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"delegate"},{"inputs":[],"stateMutability":"view","type":"function","name":"getCleanupBlockNumber","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"_who","type":"address"},{"internalType":"uint256","name":"_blockNumber","type":"uint256"}],"stateMutability":"view","type":"function","name":"getDelegateOfAt","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"address","name":"_who","type":"address"}],"stateMutability":"view","type":"function","name":"getDelegateOfAtNow","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"address","name":"_who","type":"address"}],"stateMutability":"view","type":"function","name":"getVotes","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"ownerToken","outputs":[{"internalType":"contract IVPToken","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"pChainStakeMirror","outputs":[{"internalType":"contract IPChainStakeMirror","name":"","type":"address"}]},{"inputs":[{"internalType":"address","name":"_cleanerContract","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"setCleanerContract"},{"inputs":[{"internalType":"uint256","name":"_blockNumber","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"setCleanupBlockNumber"},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"undelegate"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_fromBalance","type":"uint256"},{"internalType":"uint256","name":"_toBalance","type":"uint256"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"updateAtTokenTransfer"},{"inputs":[{"internalType":"address","name":"_who","type":"address"},{"internalType":"uint256","name":"_blockNumber","type":"uint256"}],"stateMutability":"view","type":"function","name":"votePowerOfAt","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]}],"devdoc":{"kind":"dev","methods":{"delegate(address)":{"params":{"_to":"The address of the recipient."}},"getCleanupBlockNumber()":{"returns":{"_0":"The currently set cleanup block number."}},"getDelegateOfAt(address,uint256)":{"params":{"_blockNumber":"The block number at which to fetch the address.","_who":"The address being queried."},"returns":{"_0":"Address where `_who` was delegating its governance vote power at block `_blockNumber`."}},"getDelegateOfAtNow(address)":{"params":{"_who":"The address being queried."},"returns":{"_0":"Address where `_who` is currently delegating its governance vote power."}},"getVotes(address)":{"params":{"_who":"The address being queried."},"returns":{"_0":"Governance vote power of `account` at the lastest block."}},"ownerToken()":{"returns":{"_0":"The IVPToken interface owning this contract."}},"pChainStakeMirror()":{"returns":{"_0":"The IPChainStakeMirror interface owning this contract."}},"setCleanerContract(address)":{"params":{"_cleanerContract":"Address of the cleanup contract. Usually this will be an instance of `CleanupBlockNumberManager`."}},"setCleanupBlockNumber(uint256)":{"params":{"_blockNumber":"The new cleanup block number."}},"updateAtTokenTransfer(address,address,uint256,uint256,uint256)":{"params":{"_amount":"Amount being transferred.","_from":"Source address of the transfer.","_fromBalance":"_Ignored._","_to":"Destination address of the transfer.","_toBalance":"_Ignored._"}},"votePowerOfAt(address,uint256)":{"params":{"_blockNumber":"The block number at which to fetch the vote power.","_who":"The address being queried."},"returns":{"_0":"Governance vote power of `_who` at `_blockNumber`."}}},"version":1},"userdoc":{"kind":"user","methods":{"delegate(address)":{"notice":"Delegates all governance vote power of `msg.sender` to address `_to`."},"getCleanupBlockNumber()":{"notice":"Get the current cleanup block number set with `setCleanupBlockNumber()`."},"getDelegateOfAt(address,uint256)":{"notice":"Gets the address an account is delegating its governance vote power to, at a given block number."},"getDelegateOfAtNow(address)":{"notice":"Gets the address an account is delegating its governance vote power to, at the latest block number."},"getVotes(address)":{"notice":"Gets the governance vote power of an address at the latest block, including all delegations made to it."},"ownerToken()":{"notice":"Get the token that this governance vote power contract belongs to."},"pChainStakeMirror()":{"notice":"Get the stake mirror contract that this governance vote power contract belongs to."},"setCleanerContract(address)":{"notice":"Set the contract that is allowed to call history cleaning methods."},"setCleanupBlockNumber(uint256)":{"notice":"Set the cleanup block number. Historic data for the blocks before `cleanupBlockNumber` can be erased. History before that block should never be used since it can be inconsistent. In particular, cleanup block number must be lower than the current vote power block."},"undelegate()":{"notice":"Undelegates all governance vote power of `msg.sender`."},"updateAtTokenTransfer(address,address,uint256,uint256,uint256)":{"notice":"Update governance vote power of all involved delegates after tokens are transferred. This function **MUST** be called after each governance token transfer for the delegates to reflect the correct balance."},"votePowerOfAt(address,uint256)":{"notice":"Gets the governance vote power of an address at a given block number, including all delegations made to it."}},"version":1}},"settings":{"remappings":["@flarenetwork/flare-periphery-contracts/=lib/flare-periphery-contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","flare-periphery-contracts/=lib/flare-periphery-contracts/","forge-std/=lib/forge-std/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin/=lib/openzeppelin-contracts/contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/flare-periphery-contracts/coston2/token/interface/IIGovernanceVotePower.sol":"IIGovernanceVotePower"},"evmVersion":"paris","libraries":{}},"sources":{"lib/flare-periphery-contracts/coston2/IGovernanceVotePower.sol":{"keccak256":"0xac45cb04eedb4f19533df4867eb6cd50874a55ef04d73f4d2dc3d3b7d3927e3c","urls":["bzz-raw://12c190c019723041417c6f06c932a0719b837023d4fb42090d4bb6f820331132","dweb:/ipfs/QmfAsGCz2FgYvearhCHLqJHkd4MMiSpZ8JkUUY5hNBU2oA"],"license":"MIT"},"lib/flare-periphery-contracts/coston2/IPChainStakeMirror.sol":{"keccak256":"0x8c70a1ae9079bb9d29c8e2dde781f546b6cb621f0b7cc943b9cbcbd52718bb41","urls":["bzz-raw://b4e89abe97c65481a1cacb59abcde6d18b127a89ed46f99402c30c6477ea0722","dweb:/ipfs/Qmd6i71hUPHR11U1U8EvDwJyEg4xUZhLbDe7D4Z7LLrAZx"],"license":"MIT"},"lib/flare-periphery-contracts/coston2/IPChainStakeMirrorVerifier.sol":{"keccak256":"0x1a1d0a1302b59249f9d2ca2700bb9759bc66bae73fe1c920cf4c20ac75b475fe","urls":["bzz-raw://7155abcad1dee722dbfad7bbdcf68608d9c9bddc0cb367897ce9ecc0185f7ff1","dweb:/ipfs/Qmckp3mGWvBjQxeiGQAMQyeq3EK4tJmtMmj9EHZjzVXMQH"],"license":"MIT"},"lib/flare-periphery-contracts/coston2/IPChainVotePower.sol":{"keccak256":"0x23e31ef2ab9227795930728dc240fbe59f31f1b05e595ee137acc1e5e6e8497e","urls":["bzz-raw://aecec4b505b6ea3963e78b39a6131b4562b908c24cfea9a674559dde23af72fe","dweb:/ipfs/QmQmK8aAzcSYUCkvcZcXRNVybermZ6CEqjSXbS99gpytLa"],"license":"MIT"},"lib/flare-periphery-contracts/coston2/IVPContractEvents.sol":{"keccak256":"0x651a2ff1d5c179b87259f564d02877ae496b236bd48f4813a4d815c25e2407cf","urls":["bzz-raw://b68d9f9bfeeffa03a6d3f6c14a2633759f3739486e06e3daf03be60c6f9bbce7","dweb:/ipfs/QmWJrZF5UYPXQaSKVeP4iJUZj4jhDqmmMopxU8K3KdvJe9"],"license":"MIT"},"lib/flare-periphery-contracts/coston2/IVPToken.sol":{"keccak256":"0xa8755907f367ef19f960759730e3c17fa95b18ee01e38b98c82071805af21f2e","urls":["bzz-raw://b8526ec06e70f60a2e243bbb5808b63ff7dfb60f407297e70d4df33682bbdf92","dweb:/ipfs/QmQyTcxXAAbHdNdkxPgNcCHXqrtTSFVzUBy5ayQdCXTehf"],"license":"MIT"},"lib/flare-periphery-contracts/coston2/token/interface/IIGovernanceVotePower.sol":{"keccak256":"0x3b175c30e7c500b9d8af13de07e631ab86b0ffce10917b0285cd06137f15be1a","urls":["bzz-raw://f3874d73889a0878f146848b2bbbd65911c6b2cf5ae1b81a0c63086a34c51f7a","dweb:/ipfs/QmSxRJ3Ej2WQc7sTRDyKnkq2pKaBKCwmgyDfDUyi6Ay3hB"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol":{"keccak256":"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305","urls":["bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5","dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53"],"license":"MIT"}},"version":1},"id":59}