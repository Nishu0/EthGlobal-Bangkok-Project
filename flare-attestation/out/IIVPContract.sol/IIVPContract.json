{"abi":[{"type":"function","name":"batchVotePowerOfAt","inputs":[{"name":"_owners","type":"address[]","internalType":"address[]"},{"name":"_blockNumber","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256[]","internalType":"uint256[]"}],"stateMutability":"view"},{"type":"function","name":"cleanupBlockNumber","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"delegate","inputs":[{"name":"_from","type":"address","internalType":"address"},{"name":"_to","type":"address","internalType":"address"},{"name":"_balance","type":"uint256","internalType":"uint256"},{"name":"_bips","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"delegateExplicit","inputs":[{"name":"_from","type":"address","internalType":"address"},{"name":"_to","type":"address","internalType":"address"},{"name":"_balance","type":"uint256","internalType":"uint256"},{"name":"_amount","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"delegatesOf","inputs":[{"name":"_owner","type":"address","internalType":"address"}],"outputs":[{"name":"_delegateAddresses","type":"address[]","internalType":"address[]"},{"name":"_bips","type":"uint256[]","internalType":"uint256[]"},{"name":"_count","type":"uint256","internalType":"uint256"},{"name":"_delegationMode","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"delegatesOfAt","inputs":[{"name":"_owner","type":"address","internalType":"address"},{"name":"_blockNumber","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"_delegateAddresses","type":"address[]","internalType":"address[]"},{"name":"_bips","type":"uint256[]","internalType":"uint256[]"},{"name":"_count","type":"uint256","internalType":"uint256"},{"name":"_delegationMode","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"delegationModeOf","inputs":[{"name":"_who","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"isReplacement","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"ownerToken","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract IVPToken"}],"stateMutability":"view"},{"type":"function","name":"revokeDelegationAt","inputs":[{"name":"_from","type":"address","internalType":"address"},{"name":"_who","type":"address","internalType":"address"},{"name":"_balance","type":"uint256","internalType":"uint256"},{"name":"_blockNumber","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setCleanerContract","inputs":[{"name":"_cleanerContract","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setCleanupBlockNumber","inputs":[{"name":"_blockNumber","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"undelegateAll","inputs":[{"name":"_from","type":"address","internalType":"address"},{"name":"_balance","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"undelegateAllExplicit","inputs":[{"name":"_from","type":"address","internalType":"address"},{"name":"_delegateAddresses","type":"address[]","internalType":"address[]"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"undelegatedVotePowerOf","inputs":[{"name":"_owner","type":"address","internalType":"address"},{"name":"_balance","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"undelegatedVotePowerOfAt","inputs":[{"name":"_owner","type":"address","internalType":"address"},{"name":"_balance","type":"uint256","internalType":"uint256"},{"name":"_blockNumber","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"updateAtTokenTransfer","inputs":[{"name":"_from","type":"address","internalType":"address"},{"name":"_to","type":"address","internalType":"address"},{"name":"_fromBalance","type":"uint256","internalType":"uint256"},{"name":"_toBalance","type":"uint256","internalType":"uint256"},{"name":"_amount","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"votePowerFromTo","inputs":[{"name":"_from","type":"address","internalType":"address"},{"name":"_to","type":"address","internalType":"address"},{"name":"_balance","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"votePowerFromToAt","inputs":[{"name":"_from","type":"address","internalType":"address"},{"name":"_to","type":"address","internalType":"address"},{"name":"_balance","type":"uint256","internalType":"uint256"},{"name":"_blockNumber","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"votePowerOf","inputs":[{"name":"_who","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"votePowerOfAt","inputs":[{"name":"_who","type":"address","internalType":"address"},{"name":"_blockNumber","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"votePowerOfAtCached","inputs":[{"name":"_who","type":"address","internalType":"address"},{"name":"_blockNumber","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"votePowerOfAtIgnoringRevocation","inputs":[{"name":"_who","type":"address","internalType":"address"},{"name":"_blockNumber","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"event","name":"Delegate","inputs":[{"name":"from","type":"address","indexed":true,"internalType":"address"},{"name":"to","type":"address","indexed":true,"internalType":"address"},{"name":"priorVotePower","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"newVotePower","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"Revoke","inputs":[{"name":"delegator","type":"address","indexed":true,"internalType":"address"},{"name":"delegatee","type":"address","indexed":true,"internalType":"address"},{"name":"votePower","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"blockNumber","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"batchVotePowerOfAt(address[],uint256)":"49e3c7e5","cleanupBlockNumber()":"deea13e7","delegate(address,address,uint256,uint256)":"6230001a","delegateExplicit(address,address,uint256,uint256)":"404d9e82","delegatesOf(address)":"7de5b8ed","delegatesOfAt(address,uint256)":"ed475a79","delegationModeOf(address)":"f6837767","isReplacement()":"aa94d3f2","ownerToken()":"65371883","revokeDelegationAt(address,address,uint256,uint256)":"c7c62fab","setCleanerContract(address)":"f6a494af","setCleanupBlockNumber(uint256)":"13de97f5","undelegateAll(address,uint256)":"05109ecf","undelegateAllExplicit(address,address[])":"0f8b8af7","undelegatedVotePowerOf(address,uint256)":"4a03d556","undelegatedVotePowerOfAt(address,uint256,uint256)":"31503927","updateAtTokenTransfer(address,address,uint256,uint256,uint256)":"eadb4362","votePowerFromTo(address,address,uint256)":"9dc6b9f2","votePowerFromToAt(address,address,uint256,uint256)":"833aca92","votePowerOf(address)":"142d1018","votePowerOfAt(address,uint256)":"92bfe6d8","votePowerOfAtCached(address,uint256)":"e587497e","votePowerOfAtIgnoringRevocation(address,uint256)":"04bb4e43"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priorVotePower\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newVotePower\",\"type\":\"uint256\"}],\"name\":\"Delegate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votePower\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"Revoke\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"batchVotePowerOfAt\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cleanupBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bips\",\"type\":\"uint256\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"delegateExplicit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"delegatesOf\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_delegateAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_bips\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_delegationMode\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"delegatesOfAt\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_delegateAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_bips\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_delegationMode\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"delegationModeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isReplacement\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerToken\",\"outputs\":[{\"internalType\":\"contract IVPToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"revokeDelegationAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cleanerContract\",\"type\":\"address\"}],\"name\":\"setCleanerContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"setCleanupBlockNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"undelegateAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_delegateAddresses\",\"type\":\"address[]\"}],\"name\":\"undelegateAllExplicit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"undelegatedVotePowerOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"undelegatedVotePowerOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fromBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"updateAtTokenTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"votePowerFromTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"votePowerFromToAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"votePowerOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"votePowerOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"votePowerOfAtCached\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"votePowerOfAtIgnoringRevocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"batchVotePowerOfAt(address[],uint256)\":{\"params\":{\"_blockNumber\":\"The block number at which to fetch.\",\"_owners\":\"The list of addresses to fetch vote power of.\"},\"returns\":{\"_0\":\"A list of vote powers.\"}},\"delegate(address,address,uint256,uint256)\":{\"params\":{\"_balance\":\"The delegator's current balance\",\"_bips\":\"The percentage of voting power to be delegated expressed in basis points (1/100 of one percent).   Not cumulative - every call resets the delegation value (and value of 0 revokes delegation).*\",\"_from\":\"The address of the delegator\",\"_to\":\"The address of the recipient\"}},\"delegateExplicit(address,address,uint256,uint256)\":{\"params\":{\"_amount\":\"An explicit vote power amount to be delegated.   Not cumulative - every call resets the delegation value (and value of 0 undelegates `to`).*\",\"_balance\":\"The delegator's current balance\",\"_from\":\"The address of the delegator\",\"_to\":\"The address of the recipient\"}},\"delegatesOf(address)\":{\"params\":{\"_owner\":\"The address to get delegations.\"},\"returns\":{\"_bips\":\"Positional array of delegation percents specified in basis points (1/100 or 1 percent)\",\"_count\":\"The number of delegates.\",\"_delegateAddresses\":\"Positional array of delegation addresses.\",\"_delegationMode\":\"The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2).\"}},\"delegatesOfAt(address,uint256)\":{\"params\":{\"_blockNumber\":\"The block for which we want to know the delegations.\",\"_owner\":\"The address to get delegations.\"},\"returns\":{\"_bips\":\"Positional array of delegation percents specified in basis points (1/100 or 1 percent)\",\"_count\":\"The number of delegates.\",\"_delegateAddresses\":\"Positional array of delegation addresses.\",\"_delegationMode\":\"The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2).\"}},\"delegationModeOf(address)\":{\"params\":{\"_who\":\"The address to get delegation mode.\"},\"returns\":{\"_0\":\"Delegation mode (NOTSET=0, PERCENTAGE=1, AMOUNT=2))\"}},\"revokeDelegationAt(address,address,uint256,uint256)\":{\"params\":{\"_balance\":\"The delegator's current balance\",\"_blockNumber\":\"The block number at which to revoke delegation.*\",\"_from\":\"The address of the delegator\",\"_who\":\"Address of the delegatee\"}},\"setCleanupBlockNumber(uint256)\":{\"params\":{\"_blockNumber\":\"The new cleanup block number.\"}},\"undelegateAll(address,uint256)\":{\"params\":{\"_from\":\"The address of the delegator*\"}},\"undelegateAllExplicit(address,address[])\":{\"params\":{\"_delegateAddresses\":\"Explicit delegation does not store delegatees' addresses,    so the caller must supply them.\",\"_from\":\"The address of the delegator\"},\"returns\":{\"_0\":\"The amount still delegated (in case the list of delegates was incomplete).\"}},\"undelegatedVotePowerOf(address,uint256)\":{\"params\":{\"_balance\":\"Owner's current balance\",\"_owner\":\"The address to get undelegated voting power.\"},\"returns\":{\"_0\":\"The unallocated vote power of `_owner`\"}},\"undelegatedVotePowerOfAt(address,uint256,uint256)\":{\"params\":{\"_blockNumber\":\"The block number at which to fetch.\",\"_owner\":\"The address to get undelegated voting power.\"},\"returns\":{\"_0\":\"The undelegated vote power of `_owner` (= owner's own balance minus all delegations from owner)\"}},\"votePowerFromTo(address,address,uint256)\":{\"params\":{\"_balance\":\"The delegator's current balance\",\"_from\":\"Address of delegator\",\"_to\":\"Address of delegatee\"},\"returns\":{\"_0\":\"The delegated vote power.\"}},\"votePowerFromToAt(address,address,uint256,uint256)\":{\"params\":{\"_balance\":\"The delegator's current balance\",\"_blockNumber\":\"The block number at which to fetch.\",\"_from\":\"Address of delegator\",\"_to\":\"Address of delegatee\"},\"returns\":{\"_0\":\"The delegated vote power.\"}},\"votePowerOf(address)\":{\"params\":{\"_who\":\"The address to get voting power.\"},\"returns\":{\"_0\":\"Current vote power of `_who`.\"}},\"votePowerOfAt(address,uint256)\":{\"params\":{\"_blockNumber\":\"The block number at which to fetch.\",\"_who\":\"The address to get voting power.\"},\"returns\":{\"_0\":\"Vote power of `_who` at `_blockNumber`.\"}},\"votePowerOfAtCached(address,uint256)\":{\"params\":{\"_blockNumber\":\"The block number at which to fetch.\",\"_who\":\"The address to get voting power.\"},\"returns\":{\"_0\":\"Vote power of `_who` at `_blockNumber`.\"}},\"votePowerOfAtIgnoringRevocation(address,uint256)\":{\"params\":{\"_blockNumber\":\"The block number at which to fetch.\",\"_who\":\"The address to get voting power.\"},\"returns\":{\"_0\":\"Vote power of `_who` at `_blockNumber`. Result doesn't change if vote power is revoked.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"Delegate(address,address,uint256,uint256)\":{\"notice\":\"Event triggered when an account delegates or undelegates another account.  Definition: `votePowerFromTo(from, to)` is `changed` from `priorVotePower` to `newVotePower`. For undelegation, `newVotePower` is 0. Note: the event is always emitted from VPToken's `writeVotePowerContract`.\"},\"Revoke(address,address,uint256,uint256)\":{\"notice\":\"Event triggered only when account `delegator` revokes delegation to `delegatee` for a single block in the past (typically the current vote block). Note: the event is always emitted from VPToken's `writeVotePowerContract` and/or `readVotePowerContract`.\"}},\"kind\":\"user\",\"methods\":{\"batchVotePowerOfAt(address[],uint256)\":{\"notice\":\"Return vote powers for several addresses in a batch.\"},\"cleanupBlockNumber()\":{\"notice\":\"Get the current cleanup block number.\"},\"delegate(address,address,uint256,uint256)\":{\"notice\":\"Delegate `_bips` percentage of voting power to `_to` from `_from`\"},\"delegateExplicit(address,address,uint256,uint256)\":{\"notice\":\"Explicitly delegate `_amount` of voting power to `_to` from `msg.sender`.\"},\"delegatesOf(address)\":{\"notice\":\"Get the vote power delegation `_delegateAddresses`   and `pcts` of an `_owner`. Returned in two separate positional arrays.\"},\"delegatesOfAt(address,uint256)\":{\"notice\":\"Get the vote power delegation `delegationAddresses`   and `pcts` of an `_owner`. Returned in two separate positional arrays.\"},\"delegationModeOf(address)\":{\"notice\":\"Get the delegation mode for '_who'. This mode determines whether vote power is  allocated by percentage or by explicit value.\"},\"isReplacement()\":{\"notice\":\"Return true if this IIVPContract is configured to be used as a replacement for other contract. It means that vote powers are not necessarily correct at the initialization, therefore every method that reads vote power must check whether it is initialized for that address and block.\"},\"ownerToken()\":{\"notice\":\"The VPToken (or some other contract) that owns this VPContract. All state changing methods may be called only from this address. This is because original msg.sender is sent in `_from` parameter and we must be sure that it cannot be faked by directly calling VPContract. Owner token is also used in case of replacement to recover vote powers from balances.\"},\"revokeDelegationAt(address,address,uint256,uint256)\":{\"notice\":\"Revoke all delegation from sender to `_who` at given block.     Only affects the reads via `votePowerOfAtCached()` in the block `_blockNumber`.    Block `_blockNumber` must be in the past.     This method should be used only to prevent rogue delegate voting in the current voting block.    To stop delegating use delegate/delegateExplicit with value of 0 or undelegateAll/undelegateAllExplicit.\"},\"setCleanerContract(address)\":{\"notice\":\"Set the contract that is allowed to call history cleaning methods.\"},\"setCleanupBlockNumber(uint256)\":{\"notice\":\"Set the cleanup block number. Historic data for the blocks before `cleanupBlockNumber` can be erased, history before that block should never be used since it can be inconsistent. In particular, cleanup block number must be before current vote power block.\"},\"undelegateAll(address,uint256)\":{\"notice\":\"Undelegate all voting power for delegates of `msg.sender`    Can only be used with percentage delegation.    Does not reset delegation mode back to NOTSET.\"},\"undelegateAllExplicit(address,address[])\":{\"notice\":\"Undelegate all explicit vote power by amount delegates for `msg.sender`.    Can only be used with explicit delegation.    Does not reset delegation mode back to NOTSET.\"},\"undelegatedVotePowerOf(address,uint256)\":{\"notice\":\"Compute the current undelegated vote power of `_owner`\"},\"undelegatedVotePowerOfAt(address,uint256,uint256)\":{\"notice\":\"Get the undelegated vote power of `_owner` at given block.\"},\"updateAtTokenTransfer(address,address,uint256,uint256,uint256)\":{\"notice\":\"Update vote powers when tokens are transfered. Also update delegated vote powers for percentage delegation and check for enough funds for explicit delegations.*\"},\"votePowerFromTo(address,address,uint256)\":{\"notice\":\"Get current delegated vote power `_from` delegator delegated `_to` delegatee.\"},\"votePowerFromToAt(address,address,uint256,uint256)\":{\"notice\":\"Get delegated the vote power `_from` delegator delegated `_to` delegatee at `_blockNumber`.\"},\"votePowerOf(address)\":{\"notice\":\"Get the current vote power of `_who`.\"},\"votePowerOfAt(address,uint256)\":{\"notice\":\"Get the vote power of `_who` at block `_blockNumber`\"},\"votePowerOfAtCached(address,uint256)\":{\"notice\":\"Get the vote power of `_who` at block `_blockNumber`   Reads/updates cache and upholds revocations.\"},\"votePowerOfAtIgnoringRevocation(address,uint256)\":{\"notice\":\"Get the vote power of `_who` at block `_blockNumber`, ignoring revocation information (and cache).\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/flare-periphery-contracts/coston2/token/interface/IIVPContract.sol\":\"IIVPContract\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@flarenetwork/flare-periphery-contracts/=lib/flare-periphery-contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":flare-periphery-contracts/=lib/flare-periphery-contracts/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\"]},\"sources\":{\"lib/flare-periphery-contracts/coston2/IGovernanceVotePower.sol\":{\"keccak256\":\"0xac45cb04eedb4f19533df4867eb6cd50874a55ef04d73f4d2dc3d3b7d3927e3c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://12c190c019723041417c6f06c932a0719b837023d4fb42090d4bb6f820331132\",\"dweb:/ipfs/QmfAsGCz2FgYvearhCHLqJHkd4MMiSpZ8JkUUY5hNBU2oA\"]},\"lib/flare-periphery-contracts/coston2/IVPContractEvents.sol\":{\"keccak256\":\"0x651a2ff1d5c179b87259f564d02877ae496b236bd48f4813a4d815c25e2407cf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b68d9f9bfeeffa03a6d3f6c14a2633759f3739486e06e3daf03be60c6f9bbce7\",\"dweb:/ipfs/QmWJrZF5UYPXQaSKVeP4iJUZj4jhDqmmMopxU8K3KdvJe9\"]},\"lib/flare-periphery-contracts/coston2/IVPToken.sol\":{\"keccak256\":\"0xa8755907f367ef19f960759730e3c17fa95b18ee01e38b98c82071805af21f2e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b8526ec06e70f60a2e243bbb5808b63ff7dfb60f407297e70d4df33682bbdf92\",\"dweb:/ipfs/QmQyTcxXAAbHdNdkxPgNcCHXqrtTSFVzUBy5ayQdCXTehf\"]},\"lib/flare-periphery-contracts/coston2/token/interface/IICleanable.sol\":{\"keccak256\":\"0x3ccc1532d642c3feff5b282a7c8901e2582844c1559acd1bd671afcb3aabaaef\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ff8edad3b7387bd54dbfa4975b51601d9a020fd1fb7baf1a9ce98888ff3cab6\",\"dweb:/ipfs/QmdsSTUMZmkc898q5LqWFt3M3gy9yrbqReMJes78WngJc7\"]},\"lib/flare-periphery-contracts/coston2/token/interface/IIVPContract.sol\":{\"keccak256\":\"0xfe46d34aedaf90b8835574b9cdcec39bb51e0bd00d79bb0e2c4ad51aaed417ba\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0f03450ae0d768d160c32d7d0de3c96e282959703cc8bf17aad31db7f54c0f8a\",\"dweb:/ipfs/QmUkua7iYr8RGU5zwfFe9qsegKXNX95gEihpuzutyNR2wZ\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.20+commit.a1b79de6"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"from","type":"address","indexed":true},{"internalType":"address","name":"to","type":"address","indexed":true},{"internalType":"uint256","name":"priorVotePower","type":"uint256","indexed":false},{"internalType":"uint256","name":"newVotePower","type":"uint256","indexed":false}],"type":"event","name":"Delegate","anonymous":false},{"inputs":[{"internalType":"address","name":"delegator","type":"address","indexed":true},{"internalType":"address","name":"delegatee","type":"address","indexed":true},{"internalType":"uint256","name":"votePower","type":"uint256","indexed":false},{"internalType":"uint256","name":"blockNumber","type":"uint256","indexed":false}],"type":"event","name":"Revoke","anonymous":false},{"inputs":[{"internalType":"address[]","name":"_owners","type":"address[]"},{"internalType":"uint256","name":"_blockNumber","type":"uint256"}],"stateMutability":"view","type":"function","name":"batchVotePowerOfAt","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"cleanupBlockNumber","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_balance","type":"uint256"},{"internalType":"uint256","name":"_bips","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"delegate"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_balance","type":"uint256"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"delegateExplicit"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"}],"stateMutability":"view","type":"function","name":"delegatesOf","outputs":[{"internalType":"address[]","name":"_delegateAddresses","type":"address[]"},{"internalType":"uint256[]","name":"_bips","type":"uint256[]"},{"internalType":"uint256","name":"_count","type":"uint256"},{"internalType":"uint256","name":"_delegationMode","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"uint256","name":"_blockNumber","type":"uint256"}],"stateMutability":"view","type":"function","name":"delegatesOfAt","outputs":[{"internalType":"address[]","name":"_delegateAddresses","type":"address[]"},{"internalType":"uint256[]","name":"_bips","type":"uint256[]"},{"internalType":"uint256","name":"_count","type":"uint256"},{"internalType":"uint256","name":"_delegationMode","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"_who","type":"address"}],"stateMutability":"view","type":"function","name":"delegationModeOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"isReplacement","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"ownerToken","outputs":[{"internalType":"contract IVPToken","name":"","type":"address"}]},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_who","type":"address"},{"internalType":"uint256","name":"_balance","type":"uint256"},{"internalType":"uint256","name":"_blockNumber","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"revokeDelegationAt"},{"inputs":[{"internalType":"address","name":"_cleanerContract","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"setCleanerContract"},{"inputs":[{"internalType":"uint256","name":"_blockNumber","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"setCleanupBlockNumber"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"uint256","name":"_balance","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"undelegateAll"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address[]","name":"_delegateAddresses","type":"address[]"}],"stateMutability":"nonpayable","type":"function","name":"undelegateAllExplicit","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"uint256","name":"_balance","type":"uint256"}],"stateMutability":"view","type":"function","name":"undelegatedVotePowerOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"uint256","name":"_balance","type":"uint256"},{"internalType":"uint256","name":"_blockNumber","type":"uint256"}],"stateMutability":"view","type":"function","name":"undelegatedVotePowerOfAt","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_fromBalance","type":"uint256"},{"internalType":"uint256","name":"_toBalance","type":"uint256"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"updateAtTokenTransfer"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_balance","type":"uint256"}],"stateMutability":"view","type":"function","name":"votePowerFromTo","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_balance","type":"uint256"},{"internalType":"uint256","name":"_blockNumber","type":"uint256"}],"stateMutability":"view","type":"function","name":"votePowerFromToAt","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"_who","type":"address"}],"stateMutability":"view","type":"function","name":"votePowerOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"_who","type":"address"},{"internalType":"uint256","name":"_blockNumber","type":"uint256"}],"stateMutability":"view","type":"function","name":"votePowerOfAt","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"_who","type":"address"},{"internalType":"uint256","name":"_blockNumber","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"votePowerOfAtCached","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"_who","type":"address"},{"internalType":"uint256","name":"_blockNumber","type":"uint256"}],"stateMutability":"view","type":"function","name":"votePowerOfAtIgnoringRevocation","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]}],"devdoc":{"kind":"dev","methods":{"batchVotePowerOfAt(address[],uint256)":{"params":{"_blockNumber":"The block number at which to fetch.","_owners":"The list of addresses to fetch vote power of."},"returns":{"_0":"A list of vote powers."}},"delegate(address,address,uint256,uint256)":{"params":{"_balance":"The delegator's current balance","_bips":"The percentage of voting power to be delegated expressed in basis points (1/100 of one percent).   Not cumulative - every call resets the delegation value (and value of 0 revokes delegation).*","_from":"The address of the delegator","_to":"The address of the recipient"}},"delegateExplicit(address,address,uint256,uint256)":{"params":{"_amount":"An explicit vote power amount to be delegated.   Not cumulative - every call resets the delegation value (and value of 0 undelegates `to`).*","_balance":"The delegator's current balance","_from":"The address of the delegator","_to":"The address of the recipient"}},"delegatesOf(address)":{"params":{"_owner":"The address to get delegations."},"returns":{"_bips":"Positional array of delegation percents specified in basis points (1/100 or 1 percent)","_count":"The number of delegates.","_delegateAddresses":"Positional array of delegation addresses.","_delegationMode":"The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2)."}},"delegatesOfAt(address,uint256)":{"params":{"_blockNumber":"The block for which we want to know the delegations.","_owner":"The address to get delegations."},"returns":{"_bips":"Positional array of delegation percents specified in basis points (1/100 or 1 percent)","_count":"The number of delegates.","_delegateAddresses":"Positional array of delegation addresses.","_delegationMode":"The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2)."}},"delegationModeOf(address)":{"params":{"_who":"The address to get delegation mode."},"returns":{"_0":"Delegation mode (NOTSET=0, PERCENTAGE=1, AMOUNT=2))"}},"revokeDelegationAt(address,address,uint256,uint256)":{"params":{"_balance":"The delegator's current balance","_blockNumber":"The block number at which to revoke delegation.*","_from":"The address of the delegator","_who":"Address of the delegatee"}},"setCleanupBlockNumber(uint256)":{"params":{"_blockNumber":"The new cleanup block number."}},"undelegateAll(address,uint256)":{"params":{"_from":"The address of the delegator*"}},"undelegateAllExplicit(address,address[])":{"params":{"_delegateAddresses":"Explicit delegation does not store delegatees' addresses,    so the caller must supply them.","_from":"The address of the delegator"},"returns":{"_0":"The amount still delegated (in case the list of delegates was incomplete)."}},"undelegatedVotePowerOf(address,uint256)":{"params":{"_balance":"Owner's current balance","_owner":"The address to get undelegated voting power."},"returns":{"_0":"The unallocated vote power of `_owner`"}},"undelegatedVotePowerOfAt(address,uint256,uint256)":{"params":{"_blockNumber":"The block number at which to fetch.","_owner":"The address to get undelegated voting power."},"returns":{"_0":"The undelegated vote power of `_owner` (= owner's own balance minus all delegations from owner)"}},"votePowerFromTo(address,address,uint256)":{"params":{"_balance":"The delegator's current balance","_from":"Address of delegator","_to":"Address of delegatee"},"returns":{"_0":"The delegated vote power."}},"votePowerFromToAt(address,address,uint256,uint256)":{"params":{"_balance":"The delegator's current balance","_blockNumber":"The block number at which to fetch.","_from":"Address of delegator","_to":"Address of delegatee"},"returns":{"_0":"The delegated vote power."}},"votePowerOf(address)":{"params":{"_who":"The address to get voting power."},"returns":{"_0":"Current vote power of `_who`."}},"votePowerOfAt(address,uint256)":{"params":{"_blockNumber":"The block number at which to fetch.","_who":"The address to get voting power."},"returns":{"_0":"Vote power of `_who` at `_blockNumber`."}},"votePowerOfAtCached(address,uint256)":{"params":{"_blockNumber":"The block number at which to fetch.","_who":"The address to get voting power."},"returns":{"_0":"Vote power of `_who` at `_blockNumber`."}},"votePowerOfAtIgnoringRevocation(address,uint256)":{"params":{"_blockNumber":"The block number at which to fetch.","_who":"The address to get voting power."},"returns":{"_0":"Vote power of `_who` at `_blockNumber`. Result doesn't change if vote power is revoked."}}},"version":1},"userdoc":{"kind":"user","methods":{"batchVotePowerOfAt(address[],uint256)":{"notice":"Return vote powers for several addresses in a batch."},"cleanupBlockNumber()":{"notice":"Get the current cleanup block number."},"delegate(address,address,uint256,uint256)":{"notice":"Delegate `_bips` percentage of voting power to `_to` from `_from`"},"delegateExplicit(address,address,uint256,uint256)":{"notice":"Explicitly delegate `_amount` of voting power to `_to` from `msg.sender`."},"delegatesOf(address)":{"notice":"Get the vote power delegation `_delegateAddresses`   and `pcts` of an `_owner`. Returned in two separate positional arrays."},"delegatesOfAt(address,uint256)":{"notice":"Get the vote power delegation `delegationAddresses`   and `pcts` of an `_owner`. Returned in two separate positional arrays."},"delegationModeOf(address)":{"notice":"Get the delegation mode for '_who'. This mode determines whether vote power is  allocated by percentage or by explicit value."},"isReplacement()":{"notice":"Return true if this IIVPContract is configured to be used as a replacement for other contract. It means that vote powers are not necessarily correct at the initialization, therefore every method that reads vote power must check whether it is initialized for that address and block."},"ownerToken()":{"notice":"The VPToken (or some other contract) that owns this VPContract. All state changing methods may be called only from this address. This is because original msg.sender is sent in `_from` parameter and we must be sure that it cannot be faked by directly calling VPContract. Owner token is also used in case of replacement to recover vote powers from balances."},"revokeDelegationAt(address,address,uint256,uint256)":{"notice":"Revoke all delegation from sender to `_who` at given block.     Only affects the reads via `votePowerOfAtCached()` in the block `_blockNumber`.    Block `_blockNumber` must be in the past.     This method should be used only to prevent rogue delegate voting in the current voting block.    To stop delegating use delegate/delegateExplicit with value of 0 or undelegateAll/undelegateAllExplicit."},"setCleanerContract(address)":{"notice":"Set the contract that is allowed to call history cleaning methods."},"setCleanupBlockNumber(uint256)":{"notice":"Set the cleanup block number. Historic data for the blocks before `cleanupBlockNumber` can be erased, history before that block should never be used since it can be inconsistent. In particular, cleanup block number must be before current vote power block."},"undelegateAll(address,uint256)":{"notice":"Undelegate all voting power for delegates of `msg.sender`    Can only be used with percentage delegation.    Does not reset delegation mode back to NOTSET."},"undelegateAllExplicit(address,address[])":{"notice":"Undelegate all explicit vote power by amount delegates for `msg.sender`.    Can only be used with explicit delegation.    Does not reset delegation mode back to NOTSET."},"undelegatedVotePowerOf(address,uint256)":{"notice":"Compute the current undelegated vote power of `_owner`"},"undelegatedVotePowerOfAt(address,uint256,uint256)":{"notice":"Get the undelegated vote power of `_owner` at given block."},"updateAtTokenTransfer(address,address,uint256,uint256,uint256)":{"notice":"Update vote powers when tokens are transfered. Also update delegated vote powers for percentage delegation and check for enough funds for explicit delegations.*"},"votePowerFromTo(address,address,uint256)":{"notice":"Get current delegated vote power `_from` delegator delegated `_to` delegatee."},"votePowerFromToAt(address,address,uint256,uint256)":{"notice":"Get delegated the vote power `_from` delegator delegated `_to` delegatee at `_blockNumber`."},"votePowerOf(address)":{"notice":"Get the current vote power of `_who`."},"votePowerOfAt(address,uint256)":{"notice":"Get the vote power of `_who` at block `_blockNumber`"},"votePowerOfAtCached(address,uint256)":{"notice":"Get the vote power of `_who` at block `_blockNumber`   Reads/updates cache and upholds revocations."},"votePowerOfAtIgnoringRevocation(address,uint256)":{"notice":"Get the vote power of `_who` at block `_blockNumber`, ignoring revocation information (and cache)."}},"version":1}},"settings":{"remappings":["@flarenetwork/flare-periphery-contracts/=lib/flare-periphery-contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","flare-periphery-contracts/=lib/flare-periphery-contracts/","forge-std/=lib/forge-std/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin/=lib/openzeppelin-contracts/contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/flare-periphery-contracts/coston2/token/interface/IIVPContract.sol":"IIVPContract"},"evmVersion":"paris","libraries":{}},"sources":{"lib/flare-periphery-contracts/coston2/IGovernanceVotePower.sol":{"keccak256":"0xac45cb04eedb4f19533df4867eb6cd50874a55ef04d73f4d2dc3d3b7d3927e3c","urls":["bzz-raw://12c190c019723041417c6f06c932a0719b837023d4fb42090d4bb6f820331132","dweb:/ipfs/QmfAsGCz2FgYvearhCHLqJHkd4MMiSpZ8JkUUY5hNBU2oA"],"license":"MIT"},"lib/flare-periphery-contracts/coston2/IVPContractEvents.sol":{"keccak256":"0x651a2ff1d5c179b87259f564d02877ae496b236bd48f4813a4d815c25e2407cf","urls":["bzz-raw://b68d9f9bfeeffa03a6d3f6c14a2633759f3739486e06e3daf03be60c6f9bbce7","dweb:/ipfs/QmWJrZF5UYPXQaSKVeP4iJUZj4jhDqmmMopxU8K3KdvJe9"],"license":"MIT"},"lib/flare-periphery-contracts/coston2/IVPToken.sol":{"keccak256":"0xa8755907f367ef19f960759730e3c17fa95b18ee01e38b98c82071805af21f2e","urls":["bzz-raw://b8526ec06e70f60a2e243bbb5808b63ff7dfb60f407297e70d4df33682bbdf92","dweb:/ipfs/QmQyTcxXAAbHdNdkxPgNcCHXqrtTSFVzUBy5ayQdCXTehf"],"license":"MIT"},"lib/flare-periphery-contracts/coston2/token/interface/IICleanable.sol":{"keccak256":"0x3ccc1532d642c3feff5b282a7c8901e2582844c1559acd1bd671afcb3aabaaef","urls":["bzz-raw://2ff8edad3b7387bd54dbfa4975b51601d9a020fd1fb7baf1a9ce98888ff3cab6","dweb:/ipfs/QmdsSTUMZmkc898q5LqWFt3M3gy9yrbqReMJes78WngJc7"],"license":"MIT"},"lib/flare-periphery-contracts/coston2/token/interface/IIVPContract.sol":{"keccak256":"0xfe46d34aedaf90b8835574b9cdcec39bb51e0bd00d79bb0e2c4ad51aaed417ba","urls":["bzz-raw://0f03450ae0d768d160c32d7d0de3c96e282959703cc8bf17aad31db7f54c0f8a","dweb:/ipfs/QmUkua7iYr8RGU5zwfFe9qsegKXNX95gEihpuzutyNR2wZ"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol":{"keccak256":"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305","urls":["bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5","dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53"],"license":"MIT"}},"version":1},"id":60}