{"abi":[{"type":"function","name":"allowance","inputs":[{"name":"owner","type":"address","internalType":"address"},{"name":"spender","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"approve","inputs":[{"name":"spender","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"balanceOf","inputs":[{"name":"account","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"balanceOfAt","inputs":[{"name":"_owner","type":"address","internalType":"address"},{"name":"_blockNumber","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"batchDelegate","inputs":[{"name":"_delegatees","type":"address[]","internalType":"address[]"},{"name":"_bips","type":"uint256[]","internalType":"uint256[]"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"batchVotePowerOfAt","inputs":[{"name":"_owners","type":"address[]","internalType":"address[]"},{"name":"_blockNumber","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256[]","internalType":"uint256[]"}],"stateMutability":"view"},{"type":"function","name":"cleanupBlockNumber","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"decimals","inputs":[],"outputs":[{"name":"","type":"uint8","internalType":"uint8"}],"stateMutability":"view"},{"type":"function","name":"delegate","inputs":[{"name":"_to","type":"address","internalType":"address"},{"name":"_bips","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"delegateExplicit","inputs":[{"name":"_to","type":"address","internalType":"address"},{"name":"_amount","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"delegatesOf","inputs":[{"name":"_who","type":"address","internalType":"address"}],"outputs":[{"name":"_delegateAddresses","type":"address[]","internalType":"address[]"},{"name":"_bips","type":"uint256[]","internalType":"uint256[]"},{"name":"_count","type":"uint256","internalType":"uint256"},{"name":"_delegationMode","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"delegatesOfAt","inputs":[{"name":"_who","type":"address","internalType":"address"},{"name":"_blockNumber","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"_delegateAddresses","type":"address[]","internalType":"address[]"},{"name":"_bips","type":"uint256[]","internalType":"uint256[]"},{"name":"_count","type":"uint256","internalType":"uint256"},{"name":"_delegationMode","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"delegationModeOf","inputs":[{"name":"_who","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"governanceVotePower","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract IGovernanceVotePower"}],"stateMutability":"view"},{"type":"function","name":"name","inputs":[],"outputs":[{"name":"","type":"string","internalType":"string"}],"stateMutability":"view"},{"type":"function","name":"readVotePowerContract","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract IVPContractEvents"}],"stateMutability":"view"},{"type":"function","name":"revokeDelegationAt","inputs":[{"name":"_who","type":"address","internalType":"address"},{"name":"_blockNumber","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setCleanerContract","inputs":[{"name":"_cleanerContract","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setCleanupBlockNumber","inputs":[{"name":"_blockNumber","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setCleanupBlockNumberManager","inputs":[{"name":"_cleanupBlockNumberManager","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setGovernanceVotePower","inputs":[{"name":"_governanceVotePower","type":"address","internalType":"contract IIGovernanceVotePower"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"symbol","inputs":[],"outputs":[{"name":"","type":"string","internalType":"string"}],"stateMutability":"view"},{"type":"function","name":"totalSupply","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"totalSupplyAt","inputs":[{"name":"_blockNumber","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"totalVotePower","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"totalVotePowerAt","inputs":[{"name":"_blockNumber","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"totalVotePowerAtCached","inputs":[{"name":"_blockNumber","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"transfer","inputs":[{"name":"to","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"transferFrom","inputs":[{"name":"from","type":"address","internalType":"address"},{"name":"to","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"undelegateAll","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"undelegateAllExplicit","inputs":[{"name":"_delegateAddresses","type":"address[]","internalType":"address[]"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"undelegatedVotePowerOf","inputs":[{"name":"_owner","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"undelegatedVotePowerOfAt","inputs":[{"name":"_owner","type":"address","internalType":"address"},{"name":"_blockNumber","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"votePowerFromTo","inputs":[{"name":"_from","type":"address","internalType":"address"},{"name":"_to","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"votePowerFromToAt","inputs":[{"name":"_from","type":"address","internalType":"address"},{"name":"_to","type":"address","internalType":"address"},{"name":"_blockNumber","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"votePowerOf","inputs":[{"name":"_owner","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"votePowerOfAt","inputs":[{"name":"_owner","type":"address","internalType":"address"},{"name":"_blockNumber","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"votePowerOfAtCached","inputs":[{"name":"_owner","type":"address","internalType":"address"},{"name":"_blockNumber","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"votePowerOfAtIgnoringRevocation","inputs":[{"name":"_owner","type":"address","internalType":"address"},{"name":"_blockNumber","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"writeVotePowerContract","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract IVPContractEvents"}],"stateMutability":"view"},{"type":"event","name":"Approval","inputs":[{"name":"owner","type":"address","indexed":true,"internalType":"address"},{"name":"spender","type":"address","indexed":true,"internalType":"address"},{"name":"value","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"Transfer","inputs":[{"name":"from","type":"address","indexed":true,"internalType":"address"},{"name":"to","type":"address","indexed":true,"internalType":"address"},{"name":"value","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","balanceOfAt(address,uint256)":"4ee2cd7e","batchDelegate(address[],uint256[])":"dc4fcda7","batchVotePowerOfAt(address[],uint256)":"49e3c7e5","cleanupBlockNumber()":"deea13e7","decimals()":"313ce567","delegate(address,uint256)":"026e402b","delegateExplicit(address,uint256)":"d06dc3ad","delegatesOf(address)":"7de5b8ed","delegatesOfAt(address,uint256)":"ed475a79","delegationModeOf(address)":"f6837767","governanceVotePower()":"8c2b8ae1","name()":"06fdde03","readVotePowerContract()":"9b3baa0e","revokeDelegationAt(address,uint256)":"bbd6fbf8","setCleanerContract(address)":"f6a494af","setCleanupBlockNumber(uint256)":"13de97f5","setCleanupBlockNumberManager(address)":"7f4fcaa9","setGovernanceVotePower(address)":"9ca2231a","symbol()":"95d89b41","totalSupply()":"18160ddd","totalSupplyAt(uint256)":"981b24d0","totalVotePower()":"f5f3d4f7","totalVotePowerAt(uint256)":"3e5aa26a","totalVotePowerAtCached(uint256)":"caeb942b","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd","undelegateAll()":"b302f393","undelegateAllExplicit(address[])":"5d6d11eb","undelegatedVotePowerOf(address)":"d6aa0b77","undelegatedVotePowerOfAt(address,uint256)":"83035a82","votePowerFromTo(address,address)":"be0ca747","votePowerFromToAt(address,address,uint256)":"e64767aa","votePowerOf(address)":"142d1018","votePowerOfAt(address,uint256)":"92bfe6d8","votePowerOfAtCached(address,uint256)":"e587497e","votePowerOfAtIgnoringRevocation(address,uint256)":"04bb4e43","writeVotePowerContract()":"1fec092a"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_delegatees\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_bips\",\"type\":\"uint256[]\"}],\"name\":\"batchDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"batchVotePowerOfAt\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cleanupBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bips\",\"type\":\"uint256\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"delegateExplicit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"delegatesOf\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_delegateAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_bips\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_delegationMode\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"delegatesOfAt\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_delegateAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_bips\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_delegationMode\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"delegationModeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governanceVotePower\",\"outputs\":[{\"internalType\":\"contract IGovernanceVotePower\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readVotePowerContract\",\"outputs\":[{\"internalType\":\"contract IVPContractEvents\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"revokeDelegationAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cleanerContract\",\"type\":\"address\"}],\"name\":\"setCleanerContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"setCleanupBlockNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cleanupBlockNumberManager\",\"type\":\"address\"}],\"name\":\"setCleanupBlockNumberManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IIGovernanceVotePower\",\"name\":\"_governanceVotePower\",\"type\":\"address\"}],\"name\":\"setGovernanceVotePower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalVotePower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"totalVotePowerAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"totalVotePowerAtCached\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"undelegateAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_delegateAddresses\",\"type\":\"address[]\"}],\"name\":\"undelegateAllExplicit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"undelegatedVotePowerOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"undelegatedVotePowerOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"votePowerFromTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"votePowerFromToAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"votePowerOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"votePowerOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"votePowerOfAtCached\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"votePowerOfAtIgnoringRevocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"writeVotePowerContract\",\"outputs\":[{\"internalType\":\"contract IVPContractEvents\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"balanceOfAt(address,uint256)\":{\"details\":\"Queries the token balance of `_owner` at a specific `_blockNumber`.\",\"params\":{\"_blockNumber\":\"The block number when the balance is queried.\",\"_owner\":\"The address from which the balance will be retrieved.\"},\"returns\":{\"_0\":\"The balance at `_blockNumber`.*\"}},\"batchDelegate(address[],uint256[])\":{\"params\":{\"_bips\":\"The percentages of voting power to be delegated expressed in basis points (1/100 of one percent).   Total of all `_bips` values must be at most 10000.*\",\"_delegatees\":\"The addresses of the new recipients.\"}},\"batchVotePowerOfAt(address[],uint256)\":{\"params\":{\"_blockNumber\":\"The block number at which to fetch.\",\"_owners\":\"The list of addresses to fetch vote power of.\"},\"returns\":{\"_0\":\"A list of vote powers.\"}},\"decimals()\":{\"details\":\"Should be compatible with ERC20 method\"},\"delegate(address,uint256)\":{\"params\":{\"_bips\":\"The percentage of voting power to be delegated expressed in basis points (1/100 of one percent).   Not cumulative - every call resets the delegation value (and value of 0 undelegates `to`).*\",\"_to\":\"The address of the recipient\"}},\"delegateExplicit(address,uint256)\":{\"params\":{\"_amount\":\"An explicit vote power amount to be delegated.   Not cumulative - every call resets the delegation value (and value of 0 undelegates `to`).*\",\"_to\":\"The address of the recipient\"}},\"delegatesOf(address)\":{\"params\":{\"_who\":\"The address to get delegations.\"},\"returns\":{\"_bips\":\"Positional array of delegation percents specified in basis points (1/100 or 1 percent)\",\"_count\":\"The number of delegates.\",\"_delegateAddresses\":\"Positional array of delegation addresses.\",\"_delegationMode\":\"The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2).\"}},\"delegatesOfAt(address,uint256)\":{\"params\":{\"_blockNumber\":\"The block for which we want to know the delegations.\",\"_who\":\"The address to get delegations.\"},\"returns\":{\"_bips\":\"Positional array of delegation percents specified in basis points (1/100 or 1 percent)\",\"_count\":\"The number of delegates.\",\"_delegateAddresses\":\"Positional array of delegation addresses.\",\"_delegationMode\":\"The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2).\"}},\"delegationModeOf(address)\":{\"params\":{\"_who\":\"The address to get delegation mode.\"},\"returns\":{\"_0\":\"delegation mode: 0 = NOTSET, 1 = PERCENTAGE, 2 = AMOUNT (i.e. explicit)\"}},\"name()\":{\"details\":\"Should be compatible with ERC20 method\"},\"revokeDelegationAt(address,uint256)\":{\"params\":{\"_blockNumber\":\"The block number at which to revoke delegation.\",\"_who\":\"Address of the delegatee\"}},\"setCleanupBlockNumber(uint256)\":{\"params\":{\"_blockNumber\":\"The new cleanup block number.\"}},\"symbol()\":{\"details\":\"Should be compatible with ERC20 method\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"totalSupplyAt(uint256)\":{\"params\":{\"_blockNumber\":\"The block number when the totalSupply is queried\"},\"returns\":{\"_0\":\"The total amount of tokens at `_blockNumber`*\"}},\"totalVotePower()\":{\"returns\":{\"_0\":\"The current total vote power (sum of all accounts' vote powers).\"}},\"totalVotePowerAt(uint256)\":{\"params\":{\"_blockNumber\":\"The block number at which to fetch.\"},\"returns\":{\"_0\":\"The total vote power at the block  (sum of all accounts' vote powers).\"}},\"totalVotePowerAtCached(uint256)\":{\"params\":{\"_blockNumber\":\"The block number at which to fetch.\"},\"returns\":{\"_0\":\"The total vote power at the block (sum of all accounts' vote powers).\"}},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"undelegateAllExplicit(address[])\":{\"params\":{\"_delegateAddresses\":\"Explicit delegation does not store delegatees' addresses,    so the caller must supply them.\"},\"returns\":{\"_0\":\"The amount still delegated (in case the list of delegates was incomplete).\"}},\"undelegatedVotePowerOf(address)\":{\"params\":{\"_owner\":\"The address to get undelegated voting power.\"},\"returns\":{\"_0\":\"The unallocated vote power of `_owner`\"}},\"undelegatedVotePowerOfAt(address,uint256)\":{\"params\":{\"_blockNumber\":\"The block number at which to fetch.\",\"_owner\":\"The address to get undelegated voting power.\"},\"returns\":{\"_0\":\"The undelegated vote power of `_owner` (= owner's own balance minus all delegations from owner)\"}},\"votePowerFromTo(address,address)\":{\"params\":{\"_from\":\"Address of delegator\",\"_to\":\"Address of delegatee\"},\"returns\":{\"_0\":\"The delegated vote power.\"}},\"votePowerFromToAt(address,address,uint256)\":{\"params\":{\"_blockNumber\":\"The block number at which to fetch.\",\"_from\":\"Address of delegator\",\"_to\":\"Address of delegatee\"},\"returns\":{\"_0\":\"The delegated vote power.\"}},\"votePowerOf(address)\":{\"params\":{\"_owner\":\"The address to get voting power.\"},\"returns\":{\"_0\":\"Current vote power of `_owner`.\"}},\"votePowerOfAt(address,uint256)\":{\"params\":{\"_blockNumber\":\"The block number at which to fetch.\",\"_owner\":\"The address to get voting power.\"},\"returns\":{\"_0\":\"Vote power of `_owner` at `_blockNumber`.\"}},\"votePowerOfAtCached(address,uint256)\":{\"params\":{\"_blockNumber\":\"The block number at which to fetch.\",\"_owner\":\"The address to get voting power.\"},\"returns\":{\"_0\":\"Vote power of `_owner` at `_blockNumber`.\"}},\"votePowerOfAtIgnoringRevocation(address,uint256)\":{\"params\":{\"_blockNumber\":\"The block number at which to fetch.\",\"_owner\":\"The address to get voting power.\"},\"returns\":{\"_0\":\"Vote power of `_owner` at `_blockNumber`. Result doesn't change if vote power is revoked.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"batchDelegate(address[],uint256[])\":{\"notice\":\"Undelegate all percentage delegations from the sender and then delegate corresponding    `_bips` percentage of voting power from the sender to each member of `_delegatees`.\"},\"batchVotePowerOfAt(address[],uint256)\":{\"notice\":\"Return vote powers for several addresses in a batch.\"},\"cleanupBlockNumber()\":{\"notice\":\"Get the current cleanup block number.\"},\"delegate(address,uint256)\":{\"notice\":\"Delegate by percentage `_bips` of voting power to `_to` from `msg.sender`.\"},\"delegateExplicit(address,uint256)\":{\"notice\":\"Explicitly delegate `_amount` of voting power to `_to` from `msg.sender`.\"},\"delegatesOf(address)\":{\"notice\":\"Get the vote power delegation `delegationAddresses`   and `_bips` of `_who`. Returned in two separate positional arrays.\"},\"delegatesOfAt(address,uint256)\":{\"notice\":\"Get the vote power delegation `delegationAddresses`   and `pcts` of `_who`. Returned in two separate positional arrays.\"},\"delegationModeOf(address)\":{\"notice\":\"Get the delegation mode for '_who'. This mode determines whether vote power is  allocated by percentage or by explicit value. Once the delegation mode is set,   it never changes, even if all delegations are removed.\"},\"governanceVotePower()\":{\"notice\":\"When set, allows token owners to participate in governance voting and delegate governance vote power.\"},\"readVotePowerContract()\":{\"notice\":\"Returns VPContract used for readonly operations (view methods). The only non-view method that might be called on it is `revokeDelegationAt`.`readVotePowerContract` is almost always equal to `writeVotePowerContract` except during upgrade from one VPContract to a new version (which should happen rarely or never and will be anounced before).You shouldn't call any methods on VPContract directly, all are exposed via VPToken (and state changing methods are forbidden from direct calls).  This is the reason why this method returns `IVPContractEvents` - it should only be used for listening to events (`Revoke` only).\"},\"revokeDelegationAt(address,uint256)\":{\"notice\":\"Revoke all delegation from sender to `_who` at given block.     Only affects the reads via `votePowerOfAtCached()` in the block `_blockNumber`.    Block `_blockNumber` must be in the past.     This method should be used only to prevent rogue delegate voting in the current voting block.    To stop delegating use delegate/delegateExplicit with value of 0 or undelegateAll/undelegateAllExplicit.\"},\"setCleanerContract(address)\":{\"notice\":\"Set the contract that is allowed to call history cleaning methods.\"},\"setCleanupBlockNumber(uint256)\":{\"notice\":\"Set the cleanup block number. Historic data for the blocks before `cleanupBlockNumber` can be erased, history before that block should never be used since it can be inconsistent. In particular, cleanup block number must be before current vote power block.\"},\"setCleanupBlockNumberManager(address)\":{\"notice\":\"Set the contract that is allowed to set cleanupBlockNumber. Usually this will be an instance of CleanupBlockNumberManager.\"},\"setGovernanceVotePower(address)\":{\"notice\":\"Sets new governance vote power contract that allows token owners to participate in governance voting and delegate governance vote power. \"},\"totalSupplyAt(uint256)\":{\"notice\":\"Total amount of tokens at a specific `_blockNumber`.\"},\"totalVotePower()\":{\"notice\":\"Get the current total vote power.\"},\"totalVotePowerAt(uint256)\":{\"notice\":\"Get the total vote power at block `_blockNumber`\"},\"totalVotePowerAtCached(uint256)\":{\"notice\":\"Get the total vote power at block `_blockNumber` using cache.   It tries to read the cached value and if not found, reads the actual value and stores it in cache.   Can only be used if `_blockNumber` is in the past, otherwise reverts.    \"},\"undelegateAll()\":{\"notice\":\"Undelegate all voting power for delegates of `msg.sender`    Can only be used with percentage delegation.    Does not reset delegation mode back to NOTSET.*\"},\"undelegateAllExplicit(address[])\":{\"notice\":\"Undelegate all explicit vote power by amount delegates for `msg.sender`.    Can only be used with explicit delegation.    Does not reset delegation mode back to NOTSET.\"},\"undelegatedVotePowerOf(address)\":{\"notice\":\"Compute the current undelegated vote power of `_owner`\"},\"undelegatedVotePowerOfAt(address,uint256)\":{\"notice\":\"Get the undelegated vote power of `_owner` at given block.\"},\"votePowerFromTo(address,address)\":{\"notice\":\"Get current delegated vote power `_from` delegator delegated `_to` delegatee.\"},\"votePowerFromToAt(address,address,uint256)\":{\"notice\":\"Get delegated the vote power `_from` delegator delegated `_to` delegatee at `_blockNumber`.\"},\"votePowerOf(address)\":{\"notice\":\"Get the current vote power of `_owner`.\"},\"votePowerOfAt(address,uint256)\":{\"notice\":\"Get the vote power of `_owner` at block `_blockNumber`\"},\"votePowerOfAtCached(address,uint256)\":{\"notice\":\"Get the vote power of `_owner` at block `_blockNumber` using cache.   It tries to read the cached value and if not found, reads the actual value and stores it in cache.   Can only be used if _blockNumber is in the past, otherwise reverts.    \"},\"votePowerOfAtIgnoringRevocation(address,uint256)\":{\"notice\":\"Get the vote power of `_owner` at block `_blockNumber`, ignoring revocation information (and cache).\"},\"writeVotePowerContract()\":{\"notice\":\"Returns VPContract used for state changing operations (non-view methods). The only non-view method that might be called on it is `revokeDelegationAt`.`writeVotePowerContract` is almost always equal to `readVotePowerContract` except during upgrade from one VPContract to a new version (which should happen rarely or never and will be anounced before). In the case of upgrade, `writeVotePowerContract` will be replaced first to establish delegations, and after some perio (e.g. after a reward epoch ends) `readVotePowerContract` will be set equal to it.You shouldn't call any methods on VPContract directly, all are exposed via VPToken (and state changing methods are forbidden from direct calls).  This is the reason why this method returns `IVPContractEvents` - it should only be used for listening to events (`Delegate` and `Revoke` only).\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/flare-periphery-contracts/coston2/token/interface/IIVPToken.sol\":\"IIVPToken\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@flarenetwork/flare-periphery-contracts/=lib/flare-periphery-contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":flare-periphery-contracts/=lib/flare-periphery-contracts/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\"]},\"sources\":{\"lib/flare-periphery-contracts/coston2/IGovernanceVotePower.sol\":{\"keccak256\":\"0xac45cb04eedb4f19533df4867eb6cd50874a55ef04d73f4d2dc3d3b7d3927e3c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://12c190c019723041417c6f06c932a0719b837023d4fb42090d4bb6f820331132\",\"dweb:/ipfs/QmfAsGCz2FgYvearhCHLqJHkd4MMiSpZ8JkUUY5hNBU2oA\"]},\"lib/flare-periphery-contracts/coston2/IPChainStakeMirror.sol\":{\"keccak256\":\"0x8c70a1ae9079bb9d29c8e2dde781f546b6cb621f0b7cc943b9cbcbd52718bb41\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b4e89abe97c65481a1cacb59abcde6d18b127a89ed46f99402c30c6477ea0722\",\"dweb:/ipfs/Qmd6i71hUPHR11U1U8EvDwJyEg4xUZhLbDe7D4Z7LLrAZx\"]},\"lib/flare-periphery-contracts/coston2/IPChainStakeMirrorVerifier.sol\":{\"keccak256\":\"0x1a1d0a1302b59249f9d2ca2700bb9759bc66bae73fe1c920cf4c20ac75b475fe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7155abcad1dee722dbfad7bbdcf68608d9c9bddc0cb367897ce9ecc0185f7ff1\",\"dweb:/ipfs/Qmckp3mGWvBjQxeiGQAMQyeq3EK4tJmtMmj9EHZjzVXMQH\"]},\"lib/flare-periphery-contracts/coston2/IPChainVotePower.sol\":{\"keccak256\":\"0x23e31ef2ab9227795930728dc240fbe59f31f1b05e595ee137acc1e5e6e8497e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://aecec4b505b6ea3963e78b39a6131b4562b908c24cfea9a674559dde23af72fe\",\"dweb:/ipfs/QmQmK8aAzcSYUCkvcZcXRNVybermZ6CEqjSXbS99gpytLa\"]},\"lib/flare-periphery-contracts/coston2/IVPContractEvents.sol\":{\"keccak256\":\"0x651a2ff1d5c179b87259f564d02877ae496b236bd48f4813a4d815c25e2407cf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b68d9f9bfeeffa03a6d3f6c14a2633759f3739486e06e3daf03be60c6f9bbce7\",\"dweb:/ipfs/QmWJrZF5UYPXQaSKVeP4iJUZj4jhDqmmMopxU8K3KdvJe9\"]},\"lib/flare-periphery-contracts/coston2/IVPToken.sol\":{\"keccak256\":\"0xa8755907f367ef19f960759730e3c17fa95b18ee01e38b98c82071805af21f2e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b8526ec06e70f60a2e243bbb5808b63ff7dfb60f407297e70d4df33682bbdf92\",\"dweb:/ipfs/QmQyTcxXAAbHdNdkxPgNcCHXqrtTSFVzUBy5ayQdCXTehf\"]},\"lib/flare-periphery-contracts/coston2/token/interface/IICleanable.sol\":{\"keccak256\":\"0x3ccc1532d642c3feff5b282a7c8901e2582844c1559acd1bd671afcb3aabaaef\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ff8edad3b7387bd54dbfa4975b51601d9a020fd1fb7baf1a9ce98888ff3cab6\",\"dweb:/ipfs/QmdsSTUMZmkc898q5LqWFt3M3gy9yrbqReMJes78WngJc7\"]},\"lib/flare-periphery-contracts/coston2/token/interface/IIGovernanceVotePower.sol\":{\"keccak256\":\"0x3b175c30e7c500b9d8af13de07e631ab86b0ffce10917b0285cd06137f15be1a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f3874d73889a0878f146848b2bbbd65911c6b2cf5ae1b81a0c63086a34c51f7a\",\"dweb:/ipfs/QmSxRJ3Ej2WQc7sTRDyKnkq2pKaBKCwmgyDfDUyi6Ay3hB\"]},\"lib/flare-periphery-contracts/coston2/token/interface/IIVPContract.sol\":{\"keccak256\":\"0xfe46d34aedaf90b8835574b9cdcec39bb51e0bd00d79bb0e2c4ad51aaed417ba\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0f03450ae0d768d160c32d7d0de3c96e282959703cc8bf17aad31db7f54c0f8a\",\"dweb:/ipfs/QmUkua7iYr8RGU5zwfFe9qsegKXNX95gEihpuzutyNR2wZ\"]},\"lib/flare-periphery-contracts/coston2/token/interface/IIVPToken.sol\":{\"keccak256\":\"0x66a179df6d76a8270dd0f2532a3c565eed4a6fd53b6fca1f657cf22be12acac0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d61d0d40ce1beb57fb0ef5b26fd4937c9e104ea459c7c37e00796c97aaf83443\",\"dweb:/ipfs/QmUzHJBmBNZBPtjEjo1gXps5S6qHuKseshTRbHzYg8Cuqk\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.20+commit.a1b79de6"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"owner","type":"address","indexed":true},{"internalType":"address","name":"spender","type":"address","indexed":true},{"internalType":"uint256","name":"value","type":"uint256","indexed":false}],"type":"event","name":"Approval","anonymous":false},{"inputs":[{"internalType":"address","name":"from","type":"address","indexed":true},{"internalType":"address","name":"to","type":"address","indexed":true},{"internalType":"uint256","name":"value","type":"uint256","indexed":false}],"type":"event","name":"Transfer","anonymous":false},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"stateMutability":"view","type":"function","name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"stateMutability":"view","type":"function","name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"uint256","name":"_blockNumber","type":"uint256"}],"stateMutability":"view","type":"function","name":"balanceOfAt","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address[]","name":"_delegatees","type":"address[]"},{"internalType":"uint256[]","name":"_bips","type":"uint256[]"}],"stateMutability":"nonpayable","type":"function","name":"batchDelegate"},{"inputs":[{"internalType":"address[]","name":"_owners","type":"address[]"},{"internalType":"uint256","name":"_blockNumber","type":"uint256"}],"stateMutability":"view","type":"function","name":"batchVotePowerOfAt","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"cleanupBlockNumber","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}]},{"inputs":[{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_bips","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"delegate"},{"inputs":[{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"delegateExplicit"},{"inputs":[{"internalType":"address","name":"_who","type":"address"}],"stateMutability":"view","type":"function","name":"delegatesOf","outputs":[{"internalType":"address[]","name":"_delegateAddresses","type":"address[]"},{"internalType":"uint256[]","name":"_bips","type":"uint256[]"},{"internalType":"uint256","name":"_count","type":"uint256"},{"internalType":"uint256","name":"_delegationMode","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"_who","type":"address"},{"internalType":"uint256","name":"_blockNumber","type":"uint256"}],"stateMutability":"view","type":"function","name":"delegatesOfAt","outputs":[{"internalType":"address[]","name":"_delegateAddresses","type":"address[]"},{"internalType":"uint256[]","name":"_bips","type":"uint256[]"},{"internalType":"uint256","name":"_count","type":"uint256"},{"internalType":"uint256","name":"_delegationMode","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"_who","type":"address"}],"stateMutability":"view","type":"function","name":"delegationModeOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"governanceVotePower","outputs":[{"internalType":"contract IGovernanceVotePower","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"name","outputs":[{"internalType":"string","name":"","type":"string"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"readVotePowerContract","outputs":[{"internalType":"contract IVPContractEvents","name":"","type":"address"}]},{"inputs":[{"internalType":"address","name":"_who","type":"address"},{"internalType":"uint256","name":"_blockNumber","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"revokeDelegationAt"},{"inputs":[{"internalType":"address","name":"_cleanerContract","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"setCleanerContract"},{"inputs":[{"internalType":"uint256","name":"_blockNumber","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"setCleanupBlockNumber"},{"inputs":[{"internalType":"address","name":"_cleanupBlockNumberManager","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"setCleanupBlockNumberManager"},{"inputs":[{"internalType":"contract IIGovernanceVotePower","name":"_governanceVotePower","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"setGovernanceVotePower"},{"inputs":[],"stateMutability":"view","type":"function","name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"_blockNumber","type":"uint256"}],"stateMutability":"view","type":"function","name":"totalSupplyAt","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"totalVotePower","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"_blockNumber","type":"uint256"}],"stateMutability":"view","type":"function","name":"totalVotePowerAt","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"_blockNumber","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"totalVotePowerAtCached","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"undelegateAll"},{"inputs":[{"internalType":"address[]","name":"_delegateAddresses","type":"address[]"}],"stateMutability":"nonpayable","type":"function","name":"undelegateAllExplicit","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"_owner","type":"address"}],"stateMutability":"view","type":"function","name":"undelegatedVotePowerOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"uint256","name":"_blockNumber","type":"uint256"}],"stateMutability":"view","type":"function","name":"undelegatedVotePowerOfAt","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"}],"stateMutability":"view","type":"function","name":"votePowerFromTo","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_blockNumber","type":"uint256"}],"stateMutability":"view","type":"function","name":"votePowerFromToAt","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"_owner","type":"address"}],"stateMutability":"view","type":"function","name":"votePowerOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"uint256","name":"_blockNumber","type":"uint256"}],"stateMutability":"view","type":"function","name":"votePowerOfAt","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"uint256","name":"_blockNumber","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"votePowerOfAtCached","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"uint256","name":"_blockNumber","type":"uint256"}],"stateMutability":"view","type":"function","name":"votePowerOfAtIgnoringRevocation","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"writeVotePowerContract","outputs":[{"internalType":"contract IVPContractEvents","name":"","type":"address"}]}],"devdoc":{"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"balanceOfAt(address,uint256)":{"details":"Queries the token balance of `_owner` at a specific `_blockNumber`.","params":{"_blockNumber":"The block number when the balance is queried.","_owner":"The address from which the balance will be retrieved."},"returns":{"_0":"The balance at `_blockNumber`.*"}},"batchDelegate(address[],uint256[])":{"params":{"_bips":"The percentages of voting power to be delegated expressed in basis points (1/100 of one percent).   Total of all `_bips` values must be at most 10000.*","_delegatees":"The addresses of the new recipients."}},"batchVotePowerOfAt(address[],uint256)":{"params":{"_blockNumber":"The block number at which to fetch.","_owners":"The list of addresses to fetch vote power of."},"returns":{"_0":"A list of vote powers."}},"decimals()":{"details":"Should be compatible with ERC20 method"},"delegate(address,uint256)":{"params":{"_bips":"The percentage of voting power to be delegated expressed in basis points (1/100 of one percent).   Not cumulative - every call resets the delegation value (and value of 0 undelegates `to`).*","_to":"The address of the recipient"}},"delegateExplicit(address,uint256)":{"params":{"_amount":"An explicit vote power amount to be delegated.   Not cumulative - every call resets the delegation value (and value of 0 undelegates `to`).*","_to":"The address of the recipient"}},"delegatesOf(address)":{"params":{"_who":"The address to get delegations."},"returns":{"_bips":"Positional array of delegation percents specified in basis points (1/100 or 1 percent)","_count":"The number of delegates.","_delegateAddresses":"Positional array of delegation addresses.","_delegationMode":"The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2)."}},"delegatesOfAt(address,uint256)":{"params":{"_blockNumber":"The block for which we want to know the delegations.","_who":"The address to get delegations."},"returns":{"_bips":"Positional array of delegation percents specified in basis points (1/100 or 1 percent)","_count":"The number of delegates.","_delegateAddresses":"Positional array of delegation addresses.","_delegationMode":"The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2)."}},"delegationModeOf(address)":{"params":{"_who":"The address to get delegation mode."},"returns":{"_0":"delegation mode: 0 = NOTSET, 1 = PERCENTAGE, 2 = AMOUNT (i.e. explicit)"}},"name()":{"details":"Should be compatible with ERC20 method"},"revokeDelegationAt(address,uint256)":{"params":{"_blockNumber":"The block number at which to revoke delegation.","_who":"Address of the delegatee"}},"setCleanupBlockNumber(uint256)":{"params":{"_blockNumber":"The new cleanup block number."}},"symbol()":{"details":"Should be compatible with ERC20 method"},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"totalSupplyAt(uint256)":{"params":{"_blockNumber":"The block number when the totalSupply is queried"},"returns":{"_0":"The total amount of tokens at `_blockNumber`*"}},"totalVotePower()":{"returns":{"_0":"The current total vote power (sum of all accounts' vote powers)."}},"totalVotePowerAt(uint256)":{"params":{"_blockNumber":"The block number at which to fetch."},"returns":{"_0":"The total vote power at the block  (sum of all accounts' vote powers)."}},"totalVotePowerAtCached(uint256)":{"params":{"_blockNumber":"The block number at which to fetch."},"returns":{"_0":"The total vote power at the block (sum of all accounts' vote powers)."}},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"undelegateAllExplicit(address[])":{"params":{"_delegateAddresses":"Explicit delegation does not store delegatees' addresses,    so the caller must supply them."},"returns":{"_0":"The amount still delegated (in case the list of delegates was incomplete)."}},"undelegatedVotePowerOf(address)":{"params":{"_owner":"The address to get undelegated voting power."},"returns":{"_0":"The unallocated vote power of `_owner`"}},"undelegatedVotePowerOfAt(address,uint256)":{"params":{"_blockNumber":"The block number at which to fetch.","_owner":"The address to get undelegated voting power."},"returns":{"_0":"The undelegated vote power of `_owner` (= owner's own balance minus all delegations from owner)"}},"votePowerFromTo(address,address)":{"params":{"_from":"Address of delegator","_to":"Address of delegatee"},"returns":{"_0":"The delegated vote power."}},"votePowerFromToAt(address,address,uint256)":{"params":{"_blockNumber":"The block number at which to fetch.","_from":"Address of delegator","_to":"Address of delegatee"},"returns":{"_0":"The delegated vote power."}},"votePowerOf(address)":{"params":{"_owner":"The address to get voting power."},"returns":{"_0":"Current vote power of `_owner`."}},"votePowerOfAt(address,uint256)":{"params":{"_blockNumber":"The block number at which to fetch.","_owner":"The address to get voting power."},"returns":{"_0":"Vote power of `_owner` at `_blockNumber`."}},"votePowerOfAtCached(address,uint256)":{"params":{"_blockNumber":"The block number at which to fetch.","_owner":"The address to get voting power."},"returns":{"_0":"Vote power of `_owner` at `_blockNumber`."}},"votePowerOfAtIgnoringRevocation(address,uint256)":{"params":{"_blockNumber":"The block number at which to fetch.","_owner":"The address to get voting power."},"returns":{"_0":"Vote power of `_owner` at `_blockNumber`. Result doesn't change if vote power is revoked."}}},"version":1},"userdoc":{"kind":"user","methods":{"batchDelegate(address[],uint256[])":{"notice":"Undelegate all percentage delegations from the sender and then delegate corresponding    `_bips` percentage of voting power from the sender to each member of `_delegatees`."},"batchVotePowerOfAt(address[],uint256)":{"notice":"Return vote powers for several addresses in a batch."},"cleanupBlockNumber()":{"notice":"Get the current cleanup block number."},"delegate(address,uint256)":{"notice":"Delegate by percentage `_bips` of voting power to `_to` from `msg.sender`."},"delegateExplicit(address,uint256)":{"notice":"Explicitly delegate `_amount` of voting power to `_to` from `msg.sender`."},"delegatesOf(address)":{"notice":"Get the vote power delegation `delegationAddresses`   and `_bips` of `_who`. Returned in two separate positional arrays."},"delegatesOfAt(address,uint256)":{"notice":"Get the vote power delegation `delegationAddresses`   and `pcts` of `_who`. Returned in two separate positional arrays."},"delegationModeOf(address)":{"notice":"Get the delegation mode for '_who'. This mode determines whether vote power is  allocated by percentage or by explicit value. Once the delegation mode is set,   it never changes, even if all delegations are removed."},"governanceVotePower()":{"notice":"When set, allows token owners to participate in governance voting and delegate governance vote power."},"readVotePowerContract()":{"notice":"Returns VPContract used for readonly operations (view methods). The only non-view method that might be called on it is `revokeDelegationAt`.`readVotePowerContract` is almost always equal to `writeVotePowerContract` except during upgrade from one VPContract to a new version (which should happen rarely or never and will be anounced before).You shouldn't call any methods on VPContract directly, all are exposed via VPToken (and state changing methods are forbidden from direct calls).  This is the reason why this method returns `IVPContractEvents` - it should only be used for listening to events (`Revoke` only)."},"revokeDelegationAt(address,uint256)":{"notice":"Revoke all delegation from sender to `_who` at given block.     Only affects the reads via `votePowerOfAtCached()` in the block `_blockNumber`.    Block `_blockNumber` must be in the past.     This method should be used only to prevent rogue delegate voting in the current voting block.    To stop delegating use delegate/delegateExplicit with value of 0 or undelegateAll/undelegateAllExplicit."},"setCleanerContract(address)":{"notice":"Set the contract that is allowed to call history cleaning methods."},"setCleanupBlockNumber(uint256)":{"notice":"Set the cleanup block number. Historic data for the blocks before `cleanupBlockNumber` can be erased, history before that block should never be used since it can be inconsistent. In particular, cleanup block number must be before current vote power block."},"setCleanupBlockNumberManager(address)":{"notice":"Set the contract that is allowed to set cleanupBlockNumber. Usually this will be an instance of CleanupBlockNumberManager."},"setGovernanceVotePower(address)":{"notice":"Sets new governance vote power contract that allows token owners to participate in governance voting and delegate governance vote power. "},"totalSupplyAt(uint256)":{"notice":"Total amount of tokens at a specific `_blockNumber`."},"totalVotePower()":{"notice":"Get the current total vote power."},"totalVotePowerAt(uint256)":{"notice":"Get the total vote power at block `_blockNumber`"},"totalVotePowerAtCached(uint256)":{"notice":"Get the total vote power at block `_blockNumber` using cache.   It tries to read the cached value and if not found, reads the actual value and stores it in cache.   Can only be used if `_blockNumber` is in the past, otherwise reverts.    "},"undelegateAll()":{"notice":"Undelegate all voting power for delegates of `msg.sender`    Can only be used with percentage delegation.    Does not reset delegation mode back to NOTSET.*"},"undelegateAllExplicit(address[])":{"notice":"Undelegate all explicit vote power by amount delegates for `msg.sender`.    Can only be used with explicit delegation.    Does not reset delegation mode back to NOTSET."},"undelegatedVotePowerOf(address)":{"notice":"Compute the current undelegated vote power of `_owner`"},"undelegatedVotePowerOfAt(address,uint256)":{"notice":"Get the undelegated vote power of `_owner` at given block."},"votePowerFromTo(address,address)":{"notice":"Get current delegated vote power `_from` delegator delegated `_to` delegatee."},"votePowerFromToAt(address,address,uint256)":{"notice":"Get delegated the vote power `_from` delegator delegated `_to` delegatee at `_blockNumber`."},"votePowerOf(address)":{"notice":"Get the current vote power of `_owner`."},"votePowerOfAt(address,uint256)":{"notice":"Get the vote power of `_owner` at block `_blockNumber`"},"votePowerOfAtCached(address,uint256)":{"notice":"Get the vote power of `_owner` at block `_blockNumber` using cache.   It tries to read the cached value and if not found, reads the actual value and stores it in cache.   Can only be used if _blockNumber is in the past, otherwise reverts.    "},"votePowerOfAtIgnoringRevocation(address,uint256)":{"notice":"Get the vote power of `_owner` at block `_blockNumber`, ignoring revocation information (and cache)."},"writeVotePowerContract()":{"notice":"Returns VPContract used for state changing operations (non-view methods). The only non-view method that might be called on it is `revokeDelegationAt`.`writeVotePowerContract` is almost always equal to `readVotePowerContract` except during upgrade from one VPContract to a new version (which should happen rarely or never and will be anounced before). In the case of upgrade, `writeVotePowerContract` will be replaced first to establish delegations, and after some perio (e.g. after a reward epoch ends) `readVotePowerContract` will be set equal to it.You shouldn't call any methods on VPContract directly, all are exposed via VPToken (and state changing methods are forbidden from direct calls).  This is the reason why this method returns `IVPContractEvents` - it should only be used for listening to events (`Delegate` and `Revoke` only)."}},"version":1}},"settings":{"remappings":["@flarenetwork/flare-periphery-contracts/=lib/flare-periphery-contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","flare-periphery-contracts/=lib/flare-periphery-contracts/","forge-std/=lib/forge-std/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin/=lib/openzeppelin-contracts/contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/flare-periphery-contracts/coston2/token/interface/IIVPToken.sol":"IIVPToken"},"evmVersion":"paris","libraries":{}},"sources":{"lib/flare-periphery-contracts/coston2/IGovernanceVotePower.sol":{"keccak256":"0xac45cb04eedb4f19533df4867eb6cd50874a55ef04d73f4d2dc3d3b7d3927e3c","urls":["bzz-raw://12c190c019723041417c6f06c932a0719b837023d4fb42090d4bb6f820331132","dweb:/ipfs/QmfAsGCz2FgYvearhCHLqJHkd4MMiSpZ8JkUUY5hNBU2oA"],"license":"MIT"},"lib/flare-periphery-contracts/coston2/IPChainStakeMirror.sol":{"keccak256":"0x8c70a1ae9079bb9d29c8e2dde781f546b6cb621f0b7cc943b9cbcbd52718bb41","urls":["bzz-raw://b4e89abe97c65481a1cacb59abcde6d18b127a89ed46f99402c30c6477ea0722","dweb:/ipfs/Qmd6i71hUPHR11U1U8EvDwJyEg4xUZhLbDe7D4Z7LLrAZx"],"license":"MIT"},"lib/flare-periphery-contracts/coston2/IPChainStakeMirrorVerifier.sol":{"keccak256":"0x1a1d0a1302b59249f9d2ca2700bb9759bc66bae73fe1c920cf4c20ac75b475fe","urls":["bzz-raw://7155abcad1dee722dbfad7bbdcf68608d9c9bddc0cb367897ce9ecc0185f7ff1","dweb:/ipfs/Qmckp3mGWvBjQxeiGQAMQyeq3EK4tJmtMmj9EHZjzVXMQH"],"license":"MIT"},"lib/flare-periphery-contracts/coston2/IPChainVotePower.sol":{"keccak256":"0x23e31ef2ab9227795930728dc240fbe59f31f1b05e595ee137acc1e5e6e8497e","urls":["bzz-raw://aecec4b505b6ea3963e78b39a6131b4562b908c24cfea9a674559dde23af72fe","dweb:/ipfs/QmQmK8aAzcSYUCkvcZcXRNVybermZ6CEqjSXbS99gpytLa"],"license":"MIT"},"lib/flare-periphery-contracts/coston2/IVPContractEvents.sol":{"keccak256":"0x651a2ff1d5c179b87259f564d02877ae496b236bd48f4813a4d815c25e2407cf","urls":["bzz-raw://b68d9f9bfeeffa03a6d3f6c14a2633759f3739486e06e3daf03be60c6f9bbce7","dweb:/ipfs/QmWJrZF5UYPXQaSKVeP4iJUZj4jhDqmmMopxU8K3KdvJe9"],"license":"MIT"},"lib/flare-periphery-contracts/coston2/IVPToken.sol":{"keccak256":"0xa8755907f367ef19f960759730e3c17fa95b18ee01e38b98c82071805af21f2e","urls":["bzz-raw://b8526ec06e70f60a2e243bbb5808b63ff7dfb60f407297e70d4df33682bbdf92","dweb:/ipfs/QmQyTcxXAAbHdNdkxPgNcCHXqrtTSFVzUBy5ayQdCXTehf"],"license":"MIT"},"lib/flare-periphery-contracts/coston2/token/interface/IICleanable.sol":{"keccak256":"0x3ccc1532d642c3feff5b282a7c8901e2582844c1559acd1bd671afcb3aabaaef","urls":["bzz-raw://2ff8edad3b7387bd54dbfa4975b51601d9a020fd1fb7baf1a9ce98888ff3cab6","dweb:/ipfs/QmdsSTUMZmkc898q5LqWFt3M3gy9yrbqReMJes78WngJc7"],"license":"MIT"},"lib/flare-periphery-contracts/coston2/token/interface/IIGovernanceVotePower.sol":{"keccak256":"0x3b175c30e7c500b9d8af13de07e631ab86b0ffce10917b0285cd06137f15be1a","urls":["bzz-raw://f3874d73889a0878f146848b2bbbd65911c6b2cf5ae1b81a0c63086a34c51f7a","dweb:/ipfs/QmSxRJ3Ej2WQc7sTRDyKnkq2pKaBKCwmgyDfDUyi6Ay3hB"],"license":"MIT"},"lib/flare-periphery-contracts/coston2/token/interface/IIVPContract.sol":{"keccak256":"0xfe46d34aedaf90b8835574b9cdcec39bb51e0bd00d79bb0e2c4ad51aaed417ba","urls":["bzz-raw://0f03450ae0d768d160c32d7d0de3c96e282959703cc8bf17aad31db7f54c0f8a","dweb:/ipfs/QmUkua7iYr8RGU5zwfFe9qsegKXNX95gEihpuzutyNR2wZ"],"license":"MIT"},"lib/flare-periphery-contracts/coston2/token/interface/IIVPToken.sol":{"keccak256":"0x66a179df6d76a8270dd0f2532a3c565eed4a6fd53b6fca1f657cf22be12acac0","urls":["bzz-raw://d61d0d40ce1beb57fb0ef5b26fd4937c9e104ea459c7c37e00796c97aaf83443","dweb:/ipfs/QmUzHJBmBNZBPtjEjo1gXps5S6qHuKseshTRbHzYg8Cuqk"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol":{"keccak256":"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305","urls":["bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5","dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53"],"license":"MIT"}},"version":1},"id":61}