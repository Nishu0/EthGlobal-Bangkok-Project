{"abi":[{"type":"function","name":"balanceOf","inputs":[{"name":"_owner","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"balanceOfAt","inputs":[{"name":"_owner","type":"address","internalType":"address"},{"name":"_blockNumber","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"batchVotePowerOfAt","inputs":[{"name":"_nodeIds","type":"bytes20[]","internalType":"bytes20[]"},{"name":"_blockNumber","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256[]","internalType":"uint256[]"}],"stateMutability":"view"},{"type":"function","name":"isActiveStakeMirrored","inputs":[{"name":"_txId","type":"bytes32","internalType":"bytes32"},{"name":"_inputAddress","type":"bytes20","internalType":"bytes20"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"mirrorStake","inputs":[{"name":"_stakeData","type":"tuple","internalType":"struct IPChainStakeMirrorVerifier.PChainStake","components":[{"name":"txId","type":"bytes32","internalType":"bytes32"},{"name":"stakingType","type":"uint8","internalType":"uint8"},{"name":"inputAddress","type":"bytes20","internalType":"bytes20"},{"name":"nodeId","type":"bytes20","internalType":"bytes20"},{"name":"startTime","type":"uint64","internalType":"uint64"},{"name":"endTime","type":"uint64","internalType":"uint64"},{"name":"weight","type":"uint64","internalType":"uint64"}]},{"name":"_merkleProof","type":"bytes32[]","internalType":"bytes32[]"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"stakesOf","inputs":[{"name":"_owner","type":"address","internalType":"address"}],"outputs":[{"name":"_nodeIds","type":"bytes20[]","internalType":"bytes20[]"},{"name":"_amounts","type":"uint256[]","internalType":"uint256[]"}],"stateMutability":"view"},{"type":"function","name":"stakesOfAt","inputs":[{"name":"_owner","type":"address","internalType":"address"},{"name":"_blockNumber","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"_nodeIds","type":"bytes20[]","internalType":"bytes20[]"},{"name":"_amounts","type":"uint256[]","internalType":"uint256[]"}],"stateMutability":"view"},{"type":"function","name":"totalSupply","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"totalSupplyAt","inputs":[{"name":"_blockNumber","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"totalVotePower","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"totalVotePowerAt","inputs":[{"name":"_blockNumber","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"totalVotePowerAtCached","inputs":[{"name":"_blockNumber","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"votePowerFromTo","inputs":[{"name":"_owner","type":"address","internalType":"address"},{"name":"_nodeId","type":"bytes20","internalType":"bytes20"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"votePowerFromToAt","inputs":[{"name":"_owner","type":"address","internalType":"address"},{"name":"_nodeId","type":"bytes20","internalType":"bytes20"},{"name":"_blockNumber","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"votePowerOf","inputs":[{"name":"_nodeId","type":"bytes20","internalType":"bytes20"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"votePowerOfAt","inputs":[{"name":"_nodeId","type":"bytes20","internalType":"bytes20"},{"name":"_blockNumber","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"votePowerOfAtCached","inputs":[{"name":"_owner","type":"bytes20","internalType":"bytes20"},{"name":"_blockNumber","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"event","name":"MaxUpdatesPerBlockSet","inputs":[{"name":"maxUpdatesPerBlock","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"StakeConfirmed","inputs":[{"name":"owner","type":"address","indexed":true,"internalType":"address"},{"name":"nodeId","type":"bytes20","indexed":true,"internalType":"bytes20"},{"name":"txHash","type":"bytes32","indexed":true,"internalType":"bytes32"},{"name":"amountWei","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"pChainTxId","type":"bytes32","indexed":false,"internalType":"bytes32"}],"anonymous":false},{"type":"event","name":"StakeEnded","inputs":[{"name":"owner","type":"address","indexed":true,"internalType":"address"},{"name":"nodeId","type":"bytes20","indexed":true,"internalType":"bytes20"},{"name":"txHash","type":"bytes32","indexed":true,"internalType":"bytes32"},{"name":"amountWei","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"StakeRevoked","inputs":[{"name":"owner","type":"address","indexed":true,"internalType":"address"},{"name":"nodeId","type":"bytes20","indexed":true,"internalType":"bytes20"},{"name":"txHash","type":"bytes32","indexed":true,"internalType":"bytes32"},{"name":"amountWei","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"VotePowerCacheCreated","inputs":[{"name":"nodeId","type":"bytes20","indexed":false,"internalType":"bytes20"},{"name":"blockNumber","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"VotePowerChanged","inputs":[{"name":"owner","type":"address","indexed":true,"internalType":"address"},{"name":"nodeId","type":"bytes20","indexed":true,"internalType":"bytes20"},{"name":"priorVotePower","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"newVotePower","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"balanceOf(address)":"70a08231","balanceOfAt(address,uint256)":"4ee2cd7e","batchVotePowerOfAt(bytes20[],uint256)":"a9e70199","isActiveStakeMirrored(bytes32,bytes20)":"d9ab4dfe","mirrorStake((bytes32,uint8,bytes20,bytes20,uint64,uint64,uint64),bytes32[])":"2e335805","stakesOf(address)":"33b69c4c","stakesOfAt(address,uint256)":"4be91f32","totalSupply()":"18160ddd","totalSupplyAt(uint256)":"981b24d0","totalVotePower()":"f5f3d4f7","totalVotePowerAt(uint256)":"3e5aa26a","totalVotePowerAtCached(uint256)":"caeb942b","votePowerFromTo(address,bytes20)":"59c345f5","votePowerFromToAt(address,bytes20,uint256)":"1f7ff2c7","votePowerOf(bytes20)":"b4eb2a81","votePowerOfAt(bytes20,uint256)":"46431374","votePowerOfAtCached(bytes20,uint256)":"bd61ffee"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxUpdatesPerBlock\",\"type\":\"uint256\"}],\"name\":\"MaxUpdatesPerBlockSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes20\",\"name\":\"nodeId\",\"type\":\"bytes20\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountWei\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"pChainTxId\",\"type\":\"bytes32\"}],\"name\":\"StakeConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes20\",\"name\":\"nodeId\",\"type\":\"bytes20\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountWei\",\"type\":\"uint256\"}],\"name\":\"StakeEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes20\",\"name\":\"nodeId\",\"type\":\"bytes20\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountWei\",\"type\":\"uint256\"}],\"name\":\"StakeRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes20\",\"name\":\"nodeId\",\"type\":\"bytes20\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"VotePowerCacheCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes20\",\"name\":\"nodeId\",\"type\":\"bytes20\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priorVotePower\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newVotePower\",\"type\":\"uint256\"}],\"name\":\"VotePowerChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes20[]\",\"name\":\"_nodeIds\",\"type\":\"bytes20[]\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"batchVotePowerOfAt\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_txId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes20\",\"name\":\"_inputAddress\",\"type\":\"bytes20\"}],\"name\":\"isActiveStakeMirrored\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"txId\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"stakingType\",\"type\":\"uint8\"},{\"internalType\":\"bytes20\",\"name\":\"inputAddress\",\"type\":\"bytes20\"},{\"internalType\":\"bytes20\",\"name\":\"nodeId\",\"type\":\"bytes20\"},{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"weight\",\"type\":\"uint64\"}],\"internalType\":\"struct IPChainStakeMirrorVerifier.PChainStake\",\"name\":\"_stakeData\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"mirrorStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"stakesOf\",\"outputs\":[{\"internalType\":\"bytes20[]\",\"name\":\"_nodeIds\",\"type\":\"bytes20[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"stakesOfAt\",\"outputs\":[{\"internalType\":\"bytes20[]\",\"name\":\"_nodeIds\",\"type\":\"bytes20[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalVotePower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"totalVotePowerAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"totalVotePowerAtCached\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"bytes20\",\"name\":\"_nodeId\",\"type\":\"bytes20\"}],\"name\":\"votePowerFromTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"bytes20\",\"name\":\"_nodeId\",\"type\":\"bytes20\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"votePowerFromToAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes20\",\"name\":\"_nodeId\",\"type\":\"bytes20\"}],\"name\":\"votePowerOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes20\",\"name\":\"_nodeId\",\"type\":\"bytes20\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"votePowerOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes20\",\"name\":\"_owner\",\"type\":\"bytes20\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"votePowerOfAtCached\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"MaxUpdatesPerBlockSet(uint256)\":{\"params\":{\"maxUpdatesPerBlock\":\"new number of max updated per block\"}},\"StakeConfirmed(address,bytes20,bytes32,uint256,bytes32)\":{\"params\":{\"amountWei\":\"Stake amount (in wei).\",\"nodeId\":\"Node id to which the stake was added.\",\"owner\":\"The address who opened the stake.\",\"pChainTxId\":\"P-chain transaction id.\",\"txHash\":\"Unique tx hash - keccak256(abi.encode(PChainStake.txId, PChainStake.inputAddress));\"}},\"StakeEnded(address,bytes20,bytes32,uint256)\":{\"params\":{\"amountWei\":\"Stake amount (in wei).\",\"nodeId\":\"Node id from which the stake was removed.\",\"owner\":\"The address whose stake has ended.\",\"txHash\":\"Unique tx hash - keccak256(abi.encode(PChainStake.txId, PChainStake.inputAddress));\"}},\"StakeRevoked(address,bytes20,bytes32,uint256)\":{\"params\":{\"amountWei\":\"Stake amount (in wei).\",\"nodeId\":\"Node id from which the stake was removed.\",\"owner\":\"The address whose stake has ended.\",\"txHash\":\"Unique tx hash - keccak256(abi.encode(PChainStake.txId, PChainStake.inputAddress));\"}},\"VotePowerCacheCreated(bytes20,uint256)\":{\"params\":{\"blockNumber\":\"The block number at which the vote power has been cached.\",\"nodeId\":\"The node id whose vote power has just been cached.\"}},\"VotePowerChanged(address,bytes20,uint256,uint256)\":{\"params\":{\"newVotePower\":\"The new vote power that triggered this event.\",\"nodeId\":\"The node id whose received vote power has changed.\",\"owner\":\"The account that has changed the amount of vote power it is staking.\",\"priorVotePower\":\"The vote power originally on that node id.\"}}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address)\":{\"params\":{\"_owner\":\"The address from which the balance will be retrieved.\"},\"returns\":{\"_0\":\"The current balance.*\"}},\"balanceOfAt(address,uint256)\":{\"params\":{\"_blockNumber\":\"The block number when the balance is queried.\",\"_owner\":\"The address from which the balance will be retrieved.\"},\"returns\":{\"_0\":\"The balance at `_blockNumber`.*\"}},\"batchVotePowerOfAt(bytes20[],uint256)\":{\"params\":{\"_blockNumber\":\"The block number at which to fetch.\",\"_nodeIds\":\"The list of node ids to fetch vote power of.\"},\"returns\":{\"_0\":\"A list of vote powers.\"}},\"isActiveStakeMirrored(bytes32,bytes20)\":{\"params\":{\"_inputAddress\":\"P-chain address that opened stake.\",\"_txId\":\"P-chain stake transaction id.\"},\"returns\":{\"_0\":\"True if stake is active and mirrored.\"}},\"mirrorStake((bytes32,uint8,bytes20,bytes20,uint64,uint64,uint64),bytes32[])\":{\"params\":{\"_merkleProof\":\"Merkle proof that should be used to prove the P-chain stake.\",\"_stakeData\":\"Information about P-chain stake.\"}},\"stakesOf(address)\":{\"params\":{\"_owner\":\"The address being queried.\"},\"returns\":{\"_amounts\":\"Array of staked amounts, for each node id.\",\"_nodeIds\":\"Array of node ids.\"}},\"stakesOfAt(address,uint256)\":{\"params\":{\"_blockNumber\":\"The block number being queried.\",\"_owner\":\"The address being queried.\"},\"returns\":{\"_amounts\":\"Array of staked amounts, for each node id.\",\"_nodeIds\":\"Array of node ids.\"}},\"totalSupply()\":{\"returns\":{\"_0\":\"The current total amount of tokens.*\"}},\"totalSupplyAt(uint256)\":{\"params\":{\"_blockNumber\":\"The block number when the totalSupply is queried.\"},\"returns\":{\"_0\":\"The total amount of tokens at `_blockNumber`.*\"}},\"totalVotePower()\":{\"returns\":{\"_0\":\"The current total vote power (sum of all accounts' vote powers).\"}},\"totalVotePowerAt(uint256)\":{\"params\":{\"_blockNumber\":\"The block number at which to fetch.\"},\"returns\":{\"_0\":\"The total vote power at the block  (sum of all accounts' vote powers).\"}},\"totalVotePowerAtCached(uint256)\":{\"params\":{\"_blockNumber\":\"The block number at which to fetch.\"},\"returns\":{\"_0\":\"The total vote power at the block (sum of all accounts' vote powers).\"}},\"votePowerFromTo(address,bytes20)\":{\"params\":{\"_nodeId\":\"Node id.\",\"_owner\":\"Address of vote power owner.\"},\"returns\":{\"_0\":\"The staked vote power.\"}},\"votePowerFromToAt(address,bytes20,uint256)\":{\"params\":{\"_blockNumber\":\"The block number at which to fetch.\",\"_nodeId\":\"Node id.\",\"_owner\":\"Address of vote power owner.\"},\"returns\":{\"_0\":\"The staked vote power.\"}},\"votePowerOf(bytes20)\":{\"params\":{\"_nodeId\":\"The node id to get voting power.\"},\"returns\":{\"_0\":\"Current vote power of `_nodeId`.\"}},\"votePowerOfAt(bytes20,uint256)\":{\"params\":{\"_blockNumber\":\"The block number at which to fetch.\",\"_nodeId\":\"The node id to get voting power.\"},\"returns\":{\"_0\":\"Vote power of `_nodeId` at `_blockNumber`.\"}},\"votePowerOfAtCached(bytes20,uint256)\":{\"params\":{\"_blockNumber\":\"The block number at which to fetch.\",\"_owner\":\"The node id to get voting power.\"},\"returns\":{\"_0\":\"Vote power of `_owner` at `_blockNumber`.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"MaxUpdatesPerBlockSet(uint256)\":{\"notice\":\"Event emitted when max updates per block is set.\"},\"StakeConfirmed(address,bytes20,bytes32,uint256,bytes32)\":{\"notice\":\"Event emitted when the stake is confirmed.\"},\"StakeEnded(address,bytes20,bytes32,uint256)\":{\"notice\":\"Event emitted when the stake has ended.\"},\"StakeRevoked(address,bytes20,bytes32,uint256)\":{\"notice\":\"Event emitted when the stake was revoked.\"},\"VotePowerCacheCreated(bytes20,uint256)\":{\"notice\":\"Emitted when a vote power cache entry is created. Allows history cleaners to track vote power cache cleanup opportunities off-chain.\"},\"VotePowerChanged(address,bytes20,uint256,uint256)\":{\"notice\":\"Event triggered when a stake is confirmed or at the time it ends. Definition: `votePowerFromTo(owner, nodeId)` is `changed` from `priorVotePower` to `newVotePower`.\"}},\"kind\":\"user\",\"methods\":{\"balanceOf(address)\":{\"notice\":\"Queries the token balance of `_owner` at current block.\"},\"balanceOfAt(address,uint256)\":{\"notice\":\"Queries the token balance of `_owner` at a specific `_blockNumber`.\"},\"batchVotePowerOfAt(bytes20[],uint256)\":{\"notice\":\"Return vote powers for several node ids in a batch.\"},\"isActiveStakeMirrored(bytes32,bytes20)\":{\"notice\":\"Method for checking if active stake (stake start time <= block.timestamp < stake end time) was already mirrored.\"},\"mirrorStake((bytes32,uint8,bytes20,bytes20,uint64,uint64,uint64),bytes32[])\":{\"notice\":\"Method for P-chain stake mirroring using `PChainStake` data and Merkle proof.\"},\"stakesOf(address)\":{\"notice\":\"Get the amounts and node ids being staked to by a vote power owner.\"},\"stakesOfAt(address,uint256)\":{\"notice\":\"Get the amounts and node ids being staked to by a vote power owner, at a given block.\"},\"totalSupply()\":{\"notice\":\"Total amount of tokens at current block.\"},\"totalSupplyAt(uint256)\":{\"notice\":\"Total amount of tokens at a specific `_blockNumber`.\"},\"totalVotePower()\":{\"notice\":\"Get the current total vote power.\"},\"totalVotePowerAt(uint256)\":{\"notice\":\"Get the total vote power at block `_blockNumber`\"},\"totalVotePowerAtCached(uint256)\":{\"notice\":\"Get the total vote power at block `_blockNumber` using cache.   It tries to read the cached value and if not found, reads the actual value and stores it in cache.   Can only be used if `_blockNumber` is in the past, otherwise reverts.\"},\"votePowerFromTo(address,bytes20)\":{\"notice\":\"Get current staked vote power from `_owner` staked to `_nodeId`.\"},\"votePowerFromToAt(address,bytes20,uint256)\":{\"notice\":\"Get current staked vote power from `_owner` staked to `_nodeId` at `_blockNumber`.\"},\"votePowerOf(bytes20)\":{\"notice\":\"Get the current vote power of `_nodeId`.\"},\"votePowerOfAt(bytes20,uint256)\":{\"notice\":\"Get the vote power of `_nodeId` at block `_blockNumber`\"},\"votePowerOfAtCached(bytes20,uint256)\":{\"notice\":\"Get the vote power of `_owner` at block `_blockNumber` using cache.   It tries to read the cached value and if not found, reads the actual value and stores it in cache.   Can only be used if _blockNumber is in the past, otherwise reverts.\"}},\"notice\":\"Interface for the `PChainStakeMirror` contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/flare-periphery-contracts/coston2/IPChainStakeMirror.sol\":\"IPChainStakeMirror\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@flarenetwork/flare-periphery-contracts/=lib/flare-periphery-contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":flare-periphery-contracts/=lib/flare-periphery-contracts/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\"]},\"sources\":{\"lib/flare-periphery-contracts/coston2/IPChainStakeMirror.sol\":{\"keccak256\":\"0x8c70a1ae9079bb9d29c8e2dde781f546b6cb621f0b7cc943b9cbcbd52718bb41\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b4e89abe97c65481a1cacb59abcde6d18b127a89ed46f99402c30c6477ea0722\",\"dweb:/ipfs/Qmd6i71hUPHR11U1U8EvDwJyEg4xUZhLbDe7D4Z7LLrAZx\"]},\"lib/flare-periphery-contracts/coston2/IPChainStakeMirrorVerifier.sol\":{\"keccak256\":\"0x1a1d0a1302b59249f9d2ca2700bb9759bc66bae73fe1c920cf4c20ac75b475fe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7155abcad1dee722dbfad7bbdcf68608d9c9bddc0cb367897ce9ecc0185f7ff1\",\"dweb:/ipfs/Qmckp3mGWvBjQxeiGQAMQyeq3EK4tJmtMmj9EHZjzVXMQH\"]},\"lib/flare-periphery-contracts/coston2/IPChainVotePower.sol\":{\"keccak256\":\"0x23e31ef2ab9227795930728dc240fbe59f31f1b05e595ee137acc1e5e6e8497e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://aecec4b505b6ea3963e78b39a6131b4562b908c24cfea9a674559dde23af72fe\",\"dweb:/ipfs/QmQmK8aAzcSYUCkvcZcXRNVybermZ6CEqjSXbS99gpytLa\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.20+commit.a1b79de6"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"uint256","name":"maxUpdatesPerBlock","type":"uint256","indexed":false}],"type":"event","name":"MaxUpdatesPerBlockSet","anonymous":false},{"inputs":[{"internalType":"address","name":"owner","type":"address","indexed":true},{"internalType":"bytes20","name":"nodeId","type":"bytes20","indexed":true},{"internalType":"bytes32","name":"txHash","type":"bytes32","indexed":true},{"internalType":"uint256","name":"amountWei","type":"uint256","indexed":false},{"internalType":"bytes32","name":"pChainTxId","type":"bytes32","indexed":false}],"type":"event","name":"StakeConfirmed","anonymous":false},{"inputs":[{"internalType":"address","name":"owner","type":"address","indexed":true},{"internalType":"bytes20","name":"nodeId","type":"bytes20","indexed":true},{"internalType":"bytes32","name":"txHash","type":"bytes32","indexed":true},{"internalType":"uint256","name":"amountWei","type":"uint256","indexed":false}],"type":"event","name":"StakeEnded","anonymous":false},{"inputs":[{"internalType":"address","name":"owner","type":"address","indexed":true},{"internalType":"bytes20","name":"nodeId","type":"bytes20","indexed":true},{"internalType":"bytes32","name":"txHash","type":"bytes32","indexed":true},{"internalType":"uint256","name":"amountWei","type":"uint256","indexed":false}],"type":"event","name":"StakeRevoked","anonymous":false},{"inputs":[{"internalType":"bytes20","name":"nodeId","type":"bytes20","indexed":false},{"internalType":"uint256","name":"blockNumber","type":"uint256","indexed":false}],"type":"event","name":"VotePowerCacheCreated","anonymous":false},{"inputs":[{"internalType":"address","name":"owner","type":"address","indexed":true},{"internalType":"bytes20","name":"nodeId","type":"bytes20","indexed":true},{"internalType":"uint256","name":"priorVotePower","type":"uint256","indexed":false},{"internalType":"uint256","name":"newVotePower","type":"uint256","indexed":false}],"type":"event","name":"VotePowerChanged","anonymous":false},{"inputs":[{"internalType":"address","name":"_owner","type":"address"}],"stateMutability":"view","type":"function","name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"uint256","name":"_blockNumber","type":"uint256"}],"stateMutability":"view","type":"function","name":"balanceOfAt","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"bytes20[]","name":"_nodeIds","type":"bytes20[]"},{"internalType":"uint256","name":"_blockNumber","type":"uint256"}],"stateMutability":"view","type":"function","name":"batchVotePowerOfAt","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}]},{"inputs":[{"internalType":"bytes32","name":"_txId","type":"bytes32"},{"internalType":"bytes20","name":"_inputAddress","type":"bytes20"}],"stateMutability":"view","type":"function","name":"isActiveStakeMirrored","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"struct IPChainStakeMirrorVerifier.PChainStake","name":"_stakeData","type":"tuple","components":[{"internalType":"bytes32","name":"txId","type":"bytes32"},{"internalType":"uint8","name":"stakingType","type":"uint8"},{"internalType":"bytes20","name":"inputAddress","type":"bytes20"},{"internalType":"bytes20","name":"nodeId","type":"bytes20"},{"internalType":"uint64","name":"startTime","type":"uint64"},{"internalType":"uint64","name":"endTime","type":"uint64"},{"internalType":"uint64","name":"weight","type":"uint64"}]},{"internalType":"bytes32[]","name":"_merkleProof","type":"bytes32[]"}],"stateMutability":"nonpayable","type":"function","name":"mirrorStake"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"}],"stateMutability":"view","type":"function","name":"stakesOf","outputs":[{"internalType":"bytes20[]","name":"_nodeIds","type":"bytes20[]"},{"internalType":"uint256[]","name":"_amounts","type":"uint256[]"}]},{"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"uint256","name":"_blockNumber","type":"uint256"}],"stateMutability":"view","type":"function","name":"stakesOfAt","outputs":[{"internalType":"bytes20[]","name":"_nodeIds","type":"bytes20[]"},{"internalType":"uint256[]","name":"_amounts","type":"uint256[]"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"_blockNumber","type":"uint256"}],"stateMutability":"view","type":"function","name":"totalSupplyAt","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"totalVotePower","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"_blockNumber","type":"uint256"}],"stateMutability":"view","type":"function","name":"totalVotePowerAt","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"_blockNumber","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"totalVotePowerAtCached","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"bytes20","name":"_nodeId","type":"bytes20"}],"stateMutability":"view","type":"function","name":"votePowerFromTo","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"bytes20","name":"_nodeId","type":"bytes20"},{"internalType":"uint256","name":"_blockNumber","type":"uint256"}],"stateMutability":"view","type":"function","name":"votePowerFromToAt","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"bytes20","name":"_nodeId","type":"bytes20"}],"stateMutability":"view","type":"function","name":"votePowerOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"bytes20","name":"_nodeId","type":"bytes20"},{"internalType":"uint256","name":"_blockNumber","type":"uint256"}],"stateMutability":"view","type":"function","name":"votePowerOfAt","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"bytes20","name":"_owner","type":"bytes20"},{"internalType":"uint256","name":"_blockNumber","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"votePowerOfAtCached","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]}],"devdoc":{"kind":"dev","methods":{"balanceOf(address)":{"params":{"_owner":"The address from which the balance will be retrieved."},"returns":{"_0":"The current balance.*"}},"balanceOfAt(address,uint256)":{"params":{"_blockNumber":"The block number when the balance is queried.","_owner":"The address from which the balance will be retrieved."},"returns":{"_0":"The balance at `_blockNumber`.*"}},"batchVotePowerOfAt(bytes20[],uint256)":{"params":{"_blockNumber":"The block number at which to fetch.","_nodeIds":"The list of node ids to fetch vote power of."},"returns":{"_0":"A list of vote powers."}},"isActiveStakeMirrored(bytes32,bytes20)":{"params":{"_inputAddress":"P-chain address that opened stake.","_txId":"P-chain stake transaction id."},"returns":{"_0":"True if stake is active and mirrored."}},"mirrorStake((bytes32,uint8,bytes20,bytes20,uint64,uint64,uint64),bytes32[])":{"params":{"_merkleProof":"Merkle proof that should be used to prove the P-chain stake.","_stakeData":"Information about P-chain stake."}},"stakesOf(address)":{"params":{"_owner":"The address being queried."},"returns":{"_amounts":"Array of staked amounts, for each node id.","_nodeIds":"Array of node ids."}},"stakesOfAt(address,uint256)":{"params":{"_blockNumber":"The block number being queried.","_owner":"The address being queried."},"returns":{"_amounts":"Array of staked amounts, for each node id.","_nodeIds":"Array of node ids."}},"totalSupply()":{"returns":{"_0":"The current total amount of tokens.*"}},"totalSupplyAt(uint256)":{"params":{"_blockNumber":"The block number when the totalSupply is queried."},"returns":{"_0":"The total amount of tokens at `_blockNumber`.*"}},"totalVotePower()":{"returns":{"_0":"The current total vote power (sum of all accounts' vote powers)."}},"totalVotePowerAt(uint256)":{"params":{"_blockNumber":"The block number at which to fetch."},"returns":{"_0":"The total vote power at the block  (sum of all accounts' vote powers)."}},"totalVotePowerAtCached(uint256)":{"params":{"_blockNumber":"The block number at which to fetch."},"returns":{"_0":"The total vote power at the block (sum of all accounts' vote powers)."}},"votePowerFromTo(address,bytes20)":{"params":{"_nodeId":"Node id.","_owner":"Address of vote power owner."},"returns":{"_0":"The staked vote power."}},"votePowerFromToAt(address,bytes20,uint256)":{"params":{"_blockNumber":"The block number at which to fetch.","_nodeId":"Node id.","_owner":"Address of vote power owner."},"returns":{"_0":"The staked vote power."}},"votePowerOf(bytes20)":{"params":{"_nodeId":"The node id to get voting power."},"returns":{"_0":"Current vote power of `_nodeId`."}},"votePowerOfAt(bytes20,uint256)":{"params":{"_blockNumber":"The block number at which to fetch.","_nodeId":"The node id to get voting power."},"returns":{"_0":"Vote power of `_nodeId` at `_blockNumber`."}},"votePowerOfAtCached(bytes20,uint256)":{"params":{"_blockNumber":"The block number at which to fetch.","_owner":"The node id to get voting power."},"returns":{"_0":"Vote power of `_owner` at `_blockNumber`."}}},"version":1},"userdoc":{"kind":"user","methods":{"balanceOf(address)":{"notice":"Queries the token balance of `_owner` at current block."},"balanceOfAt(address,uint256)":{"notice":"Queries the token balance of `_owner` at a specific `_blockNumber`."},"batchVotePowerOfAt(bytes20[],uint256)":{"notice":"Return vote powers for several node ids in a batch."},"isActiveStakeMirrored(bytes32,bytes20)":{"notice":"Method for checking if active stake (stake start time <= block.timestamp < stake end time) was already mirrored."},"mirrorStake((bytes32,uint8,bytes20,bytes20,uint64,uint64,uint64),bytes32[])":{"notice":"Method for P-chain stake mirroring using `PChainStake` data and Merkle proof."},"stakesOf(address)":{"notice":"Get the amounts and node ids being staked to by a vote power owner."},"stakesOfAt(address,uint256)":{"notice":"Get the amounts and node ids being staked to by a vote power owner, at a given block."},"totalSupply()":{"notice":"Total amount of tokens at current block."},"totalSupplyAt(uint256)":{"notice":"Total amount of tokens at a specific `_blockNumber`."},"totalVotePower()":{"notice":"Get the current total vote power."},"totalVotePowerAt(uint256)":{"notice":"Get the total vote power at block `_blockNumber`"},"totalVotePowerAtCached(uint256)":{"notice":"Get the total vote power at block `_blockNumber` using cache.   It tries to read the cached value and if not found, reads the actual value and stores it in cache.   Can only be used if `_blockNumber` is in the past, otherwise reverts."},"votePowerFromTo(address,bytes20)":{"notice":"Get current staked vote power from `_owner` staked to `_nodeId`."},"votePowerFromToAt(address,bytes20,uint256)":{"notice":"Get current staked vote power from `_owner` staked to `_nodeId` at `_blockNumber`."},"votePowerOf(bytes20)":{"notice":"Get the current vote power of `_nodeId`."},"votePowerOfAt(bytes20,uint256)":{"notice":"Get the vote power of `_nodeId` at block `_blockNumber`"},"votePowerOfAtCached(bytes20,uint256)":{"notice":"Get the vote power of `_owner` at block `_blockNumber` using cache.   It tries to read the cached value and if not found, reads the actual value and stores it in cache.   Can only be used if _blockNumber is in the past, otherwise reverts."}},"version":1}},"settings":{"remappings":["@flarenetwork/flare-periphery-contracts/=lib/flare-periphery-contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","flare-periphery-contracts/=lib/flare-periphery-contracts/","forge-std/=lib/forge-std/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin/=lib/openzeppelin-contracts/contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/flare-periphery-contracts/coston2/IPChainStakeMirror.sol":"IPChainStakeMirror"},"evmVersion":"paris","libraries":{}},"sources":{"lib/flare-periphery-contracts/coston2/IPChainStakeMirror.sol":{"keccak256":"0x8c70a1ae9079bb9d29c8e2dde781f546b6cb621f0b7cc943b9cbcbd52718bb41","urls":["bzz-raw://b4e89abe97c65481a1cacb59abcde6d18b127a89ed46f99402c30c6477ea0722","dweb:/ipfs/Qmd6i71hUPHR11U1U8EvDwJyEg4xUZhLbDe7D4Z7LLrAZx"],"license":"MIT"},"lib/flare-periphery-contracts/coston2/IPChainStakeMirrorVerifier.sol":{"keccak256":"0x1a1d0a1302b59249f9d2ca2700bb9759bc66bae73fe1c920cf4c20ac75b475fe","urls":["bzz-raw://7155abcad1dee722dbfad7bbdcf68608d9c9bddc0cb367897ce9ecc0185f7ff1","dweb:/ipfs/Qmckp3mGWvBjQxeiGQAMQyeq3EK4tJmtMmj9EHZjzVXMQH"],"license":"MIT"},"lib/flare-periphery-contracts/coston2/IPChainVotePower.sol":{"keccak256":"0x23e31ef2ab9227795930728dc240fbe59f31f1b05e595ee137acc1e5e6e8497e","urls":["bzz-raw://aecec4b505b6ea3963e78b39a6131b4562b908c24cfea9a674559dde23af72fe","dweb:/ipfs/QmQmK8aAzcSYUCkvcZcXRNVybermZ6CEqjSXbS99gpytLa"],"license":"MIT"}},"version":1},"id":30}