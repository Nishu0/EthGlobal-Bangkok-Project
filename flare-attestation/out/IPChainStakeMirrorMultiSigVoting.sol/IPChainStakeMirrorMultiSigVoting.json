{"abi":[{"type":"function","name":"getCurrentEpochId","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getEpochConfiguration","inputs":[],"outputs":[{"name":"_firstEpochStartTs","type":"uint256","internalType":"uint256"},{"name":"_epochDurationSeconds","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getEpochId","inputs":[{"name":"_timestamp","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getMerkleRoot","inputs":[{"name":"_epochId","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"getVoters","inputs":[],"outputs":[{"name":"","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"function","name":"getVotes","inputs":[{"name":"_epochId","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"tuple[]","internalType":"struct IPChainStakeMirrorMultiSigVoting.PChainVotes[]","components":[{"name":"merkleRoot","type":"bytes32","internalType":"bytes32"},{"name":"votes","type":"address[]","internalType":"address[]"}]}],"stateMutability":"view"},{"type":"function","name":"getVotingThreshold","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"shouldVote","inputs":[{"name":"_epochId","type":"uint256","internalType":"uint256"},{"name":"_voter","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"submitValidatorUptimeVote","inputs":[{"name":"_rewardEpochId","type":"uint256","internalType":"uint256"},{"name":"_nodeIds","type":"bytes20[]","internalType":"bytes20[]"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"submitVote","inputs":[{"name":"_epochId","type":"uint256","internalType":"uint256"},{"name":"_merkleRoot","type":"bytes32","internalType":"bytes32"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"PChainStakeMirrorValidatorUptimeVoteSubmitted","inputs":[{"name":"rewardEpochId","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"timestamp","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"voter","type":"address","indexed":false,"internalType":"address"},{"name":"nodeIds","type":"bytes20[]","indexed":false,"internalType":"bytes20[]"}],"anonymous":false},{"type":"event","name":"PChainStakeMirrorVoteSubmitted","inputs":[{"name":"epochId","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"voter","type":"address","indexed":false,"internalType":"address"},{"name":"merkleRoot","type":"bytes32","indexed":false,"internalType":"bytes32"}],"anonymous":false},{"type":"event","name":"PChainStakeMirrorVotersSet","inputs":[{"name":"voters","type":"address[]","indexed":false,"internalType":"address[]"}],"anonymous":false},{"type":"event","name":"PChainStakeMirrorVotingFinalized","inputs":[{"name":"epochId","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"merkleRoot","type":"bytes32","indexed":false,"internalType":"bytes32"}],"anonymous":false},{"type":"event","name":"PChainStakeMirrorVotingReset","inputs":[{"name":"epochId","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"PChainStakeMirrorVotingThresholdSet","inputs":[{"name":"votingThreshold","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"getCurrentEpochId()":"a29a839f","getEpochConfiguration()":"d72a2005","getEpochId(uint256)":"5303548b","getMerkleRoot(uint256)":"0aab8ba5","getVoters()":"cdd72253","getVotes(uint256)":"ff981099","getVotingThreshold()":"3d7e4e30","shouldVote(uint256,address)":"59fa6d59","submitValidatorUptimeVote(uint256,bytes20[])":"5f9f3fd9","submitVote(uint256,bytes32)":"ac8f38c8"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"rewardEpochId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes20[]\",\"name\":\"nodeIds\",\"type\":\"bytes20[]\"}],\"name\":\"PChainStakeMirrorValidatorUptimeVoteSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"PChainStakeMirrorVoteSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"voters\",\"type\":\"address[]\"}],\"name\":\"PChainStakeMirrorVotersSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"PChainStakeMirrorVotingFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"}],\"name\":\"PChainStakeMirrorVotingReset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votingThreshold\",\"type\":\"uint256\"}],\"name\":\"PChainStakeMirrorVotingThresholdSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getCurrentEpochId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEpochConfiguration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_firstEpochStartTs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_epochDurationSeconds\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getEpochId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epochId\",\"type\":\"uint256\"}],\"name\":\"getMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVoters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epochId\",\"type\":\"uint256\"}],\"name\":\"getVotes\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"votes\",\"type\":\"address[]\"}],\"internalType\":\"struct IPChainStakeMirrorMultiSigVoting.PChainVotes[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVotingThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epochId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"shouldVote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardEpochId\",\"type\":\"uint256\"},{\"internalType\":\"bytes20[]\",\"name\":\"_nodeIds\",\"type\":\"bytes20[]\"}],\"name\":\"submitValidatorUptimeVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epochId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"submitVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"PChainStakeMirrorValidatorUptimeVoteSubmitted(uint256,uint256,address,bytes20[])\":{\"params\":{\"nodeIds\":\"List of node ids with high enough uptime.\",\"rewardEpochId\":\"Reward epoch id.\",\"timestamp\":\"Timestamp of the block when the vote happened, in seconds from UNIX epoch.\",\"voter\":\"Voter address.\"}},\"PChainStakeMirrorVoteSubmitted(uint256,address,bytes32)\":{\"params\":{\"epochId\":\"Epoch id.\",\"merkleRoot\":\"Merkle root voter voted for in given epoch.\",\"voter\":\"Voter address.\"}},\"PChainStakeMirrorVotersSet(address[])\":{\"params\":{\"voters\":\"List of new voters.\"}},\"PChainStakeMirrorVotingFinalized(uint256,bytes32)\":{\"params\":{\"epochId\":\"Epoch id.\",\"merkleRoot\":\"Voted Merkle root for that epoch id.\"}},\"PChainStakeMirrorVotingReset(uint256)\":{\"params\":{\"epochId\":\"Epoch id.\"}},\"PChainStakeMirrorVotingThresholdSet(uint256)\":{\"params\":{\"votingThreshold\":\"New voting threshold.\"}}},\"kind\":\"dev\",\"methods\":{\"getCurrentEpochId()\":{\"returns\":{\"_0\":\"Current epoch id.\"}},\"getEpochConfiguration()\":{\"returns\":{\"_epochDurationSeconds\":\"Epoch duration in seconds\",\"_firstEpochStartTs\":\"First epoch start timestamp\"}},\"getEpochId(uint256)\":{\"params\":{\"_timestamp\":\"Timestamp as seconds from unix epoch\"}},\"getMerkleRoot(uint256)\":{\"params\":{\"_epochId\":\"Epoch id of the interest.\"},\"returns\":{\"_0\":\"Merkle root for finalized epoch id and `bytes32(0)` otherwise.\"}},\"getVoters()\":{\"returns\":{\"_0\":\"List of all voters.\"}},\"getVotes(uint256)\":{\"params\":{\"_epochId\":\"Epoch id of the interest.\"},\"returns\":{\"_0\":\"Votes for for the given `_epochId`.\"}},\"getVotingThreshold()\":{\"returns\":{\"_0\":\"Voting threshold.\"}},\"shouldVote(uint256,address)\":{\"params\":{\"_epochId\":\"Epoch id of the interest.\",\"_voter\":\"Address of the voter.\"},\"returns\":{\"_0\":\"False if voter is not eligible to vote, epoch already finalized or voter already voted. True otherwise. **NOTE**: The method will return true even if epoch has not ended yet - `submitVote` will revert in that case.\"}},\"submitValidatorUptimeVote(uint256,bytes20[])\":{\"params\":{\"_nodeIds\":\"List of validators (node ids) with high enough uptime in given reward epoch. **NOTE**: Reward epochs are aligned with FTSO reward epochs.\",\"_rewardEpochId\":\"Reward epoch id voter is submitting vote for.\"}},\"submitVote(uint256,bytes32)\":{\"params\":{\"_epochId\":\"Epoch id voter is submitting vote for.\",\"_merkleRoot\":\"Merkle root for given epoch. **NOTE**: It reverts in case voter is not eligible to vote, epoch has not ended yet or is already finalized          or voter is submitting vote for the second time for the same Merkle root (voter can submit a vote for a different Merkle root even if voted already).\"}}},\"version\":1},\"userdoc\":{\"events\":{\"PChainStakeMirrorValidatorUptimeVoteSubmitted(uint256,uint256,address,bytes20[])\":{\"notice\":\"Event emitted when validator uptime vote for specific reward epoch is submitted.\"},\"PChainStakeMirrorVoteSubmitted(uint256,address,bytes32)\":{\"notice\":\"Event emitted when vote for specific epoch is submitted.\"},\"PChainStakeMirrorVotersSet(address[])\":{\"notice\":\"Event emitted when voters are set.\"},\"PChainStakeMirrorVotingFinalized(uint256,bytes32)\":{\"notice\":\"Event emitted when voting for specific epoch is finalized.\"},\"PChainStakeMirrorVotingReset(uint256)\":{\"notice\":\"Event emitted when voting for specific epoch is reset.\"},\"PChainStakeMirrorVotingThresholdSet(uint256)\":{\"notice\":\"Event emitted when voting threshold is updated.\"}},\"kind\":\"user\",\"methods\":{\"getCurrentEpochId()\":{\"notice\":\"Returns current epoch id.\"},\"getEpochConfiguration()\":{\"notice\":\"Returns epochs configuration data.\"},\"getEpochId(uint256)\":{\"notice\":\"Returns id of the epoch at the specified timestamp.\"},\"getMerkleRoot(uint256)\":{\"notice\":\"Returns Merkle root for the given `_epochId`.\"},\"getVoters()\":{\"notice\":\"Returns the list of all voters.\"},\"getVotes(uint256)\":{\"notice\":\"Returns all votes for the given `_epochId` util epoch is finalized. Reverts later.\"},\"getVotingThreshold()\":{\"notice\":\"Returns the voting threshold.\"},\"shouldVote(uint256,address)\":{\"notice\":\"Checks if `_voter` should vote for the given `_epochId`.\"},\"submitValidatorUptimeVote(uint256,bytes20[])\":{\"notice\":\"Method for submitting node ids of those validators that have high enough uptime in given reward epoch.\"},\"submitVote(uint256,bytes32)\":{\"notice\":\"Method for submitting Merkle roots for given epoch.\"}},\"notice\":\"Interface for the `PChainStakeMirrorMultiSigVoting` contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/flare-periphery-contracts/coston2/IPChainStakeMirrorMultiSigVoting.sol\":\"IPChainStakeMirrorMultiSigVoting\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@flarenetwork/flare-periphery-contracts/=lib/flare-periphery-contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":flare-periphery-contracts/=lib/flare-periphery-contracts/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\"]},\"sources\":{\"lib/flare-periphery-contracts/coston2/IPChainStakeMirrorMultiSigVoting.sol\":{\"keccak256\":\"0x6cd90b58cf75763f2e5188b2cf3f8655ba1f55259fe68ec3f938afdbfff0b78c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a875d402ccd47161a70000f96725470d1fd30ffb7e90dd0e74f4e8a135dddb14\",\"dweb:/ipfs/QmVoHchR6F8F6DHG4UX2CgZy6m4RLUYTf3q6BkGsrudgEL\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.20+commit.a1b79de6"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"uint256","name":"rewardEpochId","type":"uint256","indexed":true},{"internalType":"uint256","name":"timestamp","type":"uint256","indexed":true},{"internalType":"address","name":"voter","type":"address","indexed":false},{"internalType":"bytes20[]","name":"nodeIds","type":"bytes20[]","indexed":false}],"type":"event","name":"PChainStakeMirrorValidatorUptimeVoteSubmitted","anonymous":false},{"inputs":[{"internalType":"uint256","name":"epochId","type":"uint256","indexed":false},{"internalType":"address","name":"voter","type":"address","indexed":false},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32","indexed":false}],"type":"event","name":"PChainStakeMirrorVoteSubmitted","anonymous":false},{"inputs":[{"internalType":"address[]","name":"voters","type":"address[]","indexed":false}],"type":"event","name":"PChainStakeMirrorVotersSet","anonymous":false},{"inputs":[{"internalType":"uint256","name":"epochId","type":"uint256","indexed":true},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32","indexed":false}],"type":"event","name":"PChainStakeMirrorVotingFinalized","anonymous":false},{"inputs":[{"internalType":"uint256","name":"epochId","type":"uint256","indexed":false}],"type":"event","name":"PChainStakeMirrorVotingReset","anonymous":false},{"inputs":[{"internalType":"uint256","name":"votingThreshold","type":"uint256","indexed":false}],"type":"event","name":"PChainStakeMirrorVotingThresholdSet","anonymous":false},{"inputs":[],"stateMutability":"view","type":"function","name":"getCurrentEpochId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getEpochConfiguration","outputs":[{"internalType":"uint256","name":"_firstEpochStartTs","type":"uint256"},{"internalType":"uint256","name":"_epochDurationSeconds","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"_timestamp","type":"uint256"}],"stateMutability":"view","type":"function","name":"getEpochId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"_epochId","type":"uint256"}],"stateMutability":"view","type":"function","name":"getMerkleRoot","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getVoters","outputs":[{"internalType":"address[]","name":"","type":"address[]"}]},{"inputs":[{"internalType":"uint256","name":"_epochId","type":"uint256"}],"stateMutability":"view","type":"function","name":"getVotes","outputs":[{"internalType":"struct IPChainStakeMirrorMultiSigVoting.PChainVotes[]","name":"","type":"tuple[]","components":[{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"internalType":"address[]","name":"votes","type":"address[]"}]}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getVotingThreshold","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"_epochId","type":"uint256"},{"internalType":"address","name":"_voter","type":"address"}],"stateMutability":"view","type":"function","name":"shouldVote","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"uint256","name":"_rewardEpochId","type":"uint256"},{"internalType":"bytes20[]","name":"_nodeIds","type":"bytes20[]"}],"stateMutability":"nonpayable","type":"function","name":"submitValidatorUptimeVote"},{"inputs":[{"internalType":"uint256","name":"_epochId","type":"uint256"},{"internalType":"bytes32","name":"_merkleRoot","type":"bytes32"}],"stateMutability":"nonpayable","type":"function","name":"submitVote"}],"devdoc":{"kind":"dev","methods":{"getCurrentEpochId()":{"returns":{"_0":"Current epoch id."}},"getEpochConfiguration()":{"returns":{"_epochDurationSeconds":"Epoch duration in seconds","_firstEpochStartTs":"First epoch start timestamp"}},"getEpochId(uint256)":{"params":{"_timestamp":"Timestamp as seconds from unix epoch"}},"getMerkleRoot(uint256)":{"params":{"_epochId":"Epoch id of the interest."},"returns":{"_0":"Merkle root for finalized epoch id and `bytes32(0)` otherwise."}},"getVoters()":{"returns":{"_0":"List of all voters."}},"getVotes(uint256)":{"params":{"_epochId":"Epoch id of the interest."},"returns":{"_0":"Votes for for the given `_epochId`."}},"getVotingThreshold()":{"returns":{"_0":"Voting threshold."}},"shouldVote(uint256,address)":{"params":{"_epochId":"Epoch id of the interest.","_voter":"Address of the voter."},"returns":{"_0":"False if voter is not eligible to vote, epoch already finalized or voter already voted. True otherwise. **NOTE**: The method will return true even if epoch has not ended yet - `submitVote` will revert in that case."}},"submitValidatorUptimeVote(uint256,bytes20[])":{"params":{"_nodeIds":"List of validators (node ids) with high enough uptime in given reward epoch. **NOTE**: Reward epochs are aligned with FTSO reward epochs.","_rewardEpochId":"Reward epoch id voter is submitting vote for."}},"submitVote(uint256,bytes32)":{"params":{"_epochId":"Epoch id voter is submitting vote for.","_merkleRoot":"Merkle root for given epoch. **NOTE**: It reverts in case voter is not eligible to vote, epoch has not ended yet or is already finalized          or voter is submitting vote for the second time for the same Merkle root (voter can submit a vote for a different Merkle root even if voted already)."}}},"version":1},"userdoc":{"kind":"user","methods":{"getCurrentEpochId()":{"notice":"Returns current epoch id."},"getEpochConfiguration()":{"notice":"Returns epochs configuration data."},"getEpochId(uint256)":{"notice":"Returns id of the epoch at the specified timestamp."},"getMerkleRoot(uint256)":{"notice":"Returns Merkle root for the given `_epochId`."},"getVoters()":{"notice":"Returns the list of all voters."},"getVotes(uint256)":{"notice":"Returns all votes for the given `_epochId` util epoch is finalized. Reverts later."},"getVotingThreshold()":{"notice":"Returns the voting threshold."},"shouldVote(uint256,address)":{"notice":"Checks if `_voter` should vote for the given `_epochId`."},"submitValidatorUptimeVote(uint256,bytes20[])":{"notice":"Method for submitting node ids of those validators that have high enough uptime in given reward epoch."},"submitVote(uint256,bytes32)":{"notice":"Method for submitting Merkle roots for given epoch."}},"version":1}},"settings":{"remappings":["@flarenetwork/flare-periphery-contracts/=lib/flare-periphery-contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","flare-periphery-contracts/=lib/flare-periphery-contracts/","forge-std/=lib/forge-std/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin/=lib/openzeppelin-contracts/contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/flare-periphery-contracts/coston2/IPChainStakeMirrorMultiSigVoting.sol":"IPChainStakeMirrorMultiSigVoting"},"evmVersion":"paris","libraries":{}},"sources":{"lib/flare-periphery-contracts/coston2/IPChainStakeMirrorMultiSigVoting.sol":{"keccak256":"0x6cd90b58cf75763f2e5188b2cf3f8655ba1f55259fe68ec3f938afdbfff0b78c","urls":["bzz-raw://a875d402ccd47161a70000f96725470d1fd30ffb7e90dd0e74f4e8a135dddb14","dweb:/ipfs/QmVoHchR6F8F6DHG4UX2CgZy6m4RLUYTf3q6BkGsrudgEL"],"license":"MIT"}},"version":1},"id":31}