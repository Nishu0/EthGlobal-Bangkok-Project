{"abi":[{"type":"function","name":"canPropose","inputs":[{"name":"_account","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"canVote","inputs":[{"name":"_account","type":"address","internalType":"address"},{"name":"_proposalId","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"cancel","inputs":[{"name":"_proposalId","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"castVote","inputs":[{"name":"_proposalId","type":"uint256","internalType":"uint256"},{"name":"_support","type":"uint8","internalType":"uint8"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"getLastProposal","inputs":[],"outputs":[{"name":"_proposalId","type":"uint256","internalType":"uint256"},{"name":"_description","type":"string","internalType":"string"}],"stateMutability":"view"},{"type":"function","name":"getProposalDescription","inputs":[{"name":"_proposalId","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"_description","type":"string","internalType":"string"}],"stateMutability":"view"},{"type":"function","name":"getProposalInfo","inputs":[{"name":"_proposalId","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"_rewardEpochId","type":"uint256","internalType":"uint256"},{"name":"_description","type":"string","internalType":"string"},{"name":"_proposer","type":"address","internalType":"address"},{"name":"_voteStartTime","type":"uint256","internalType":"uint256"},{"name":"_voteEndTime","type":"uint256","internalType":"uint256"},{"name":"_thresholdConditionBIPS","type":"uint256","internalType":"uint256"},{"name":"_majorityConditionBIPS","type":"uint256","internalType":"uint256"},{"name":"_totalWeight","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getProposalVotes","inputs":[{"name":"_proposalId","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"_for","type":"uint256","internalType":"uint256"},{"name":"_against","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"hasVoted","inputs":[{"name":"_proposalId","type":"uint256","internalType":"uint256"},{"name":"_voter","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"propose","inputs":[{"name":"_description","type":"string","internalType":"string"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"payable"},{"type":"function","name":"setParameters","inputs":[{"name":"_votingDelaySeconds","type":"uint256","internalType":"uint256"},{"name":"_votingPeriodSeconds","type":"uint256","internalType":"uint256"},{"name":"_thresholdConditionBIPS","type":"uint256","internalType":"uint256"},{"name":"_majorityConditionBIPS","type":"uint256","internalType":"uint256"},{"name":"_proposalFeeValueWei","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setProxyVoter","inputs":[{"name":"_proxyVoter","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"state","inputs":[{"name":"_proposalId","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint8","internalType":"enum IPollingFtso.ProposalState"}],"stateMutability":"view"},{"type":"event","name":"FtsoProposalCreated","inputs":[{"name":"proposalId","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"rewardEpochId","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"proposer","type":"address","indexed":false,"internalType":"address"},{"name":"description","type":"string","indexed":false,"internalType":"string"},{"name":"voteStartTime","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"voteEndTime","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"threshold","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"majorityConditionBIPS","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"totalWeight","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"MaintainerSet","inputs":[{"name":"newMaintainer","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"ParametersSet","inputs":[{"name":"votingDelaySeconds","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"votingPeriodSeconds","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"thresholdConditionBIPS","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"majorityConditionBIPS","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"proposalFeeValueWei","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"ProposalCanceled","inputs":[{"name":"proposalId","type":"uint256","indexed":true,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"ProxyVoterSet","inputs":[{"name":"account","type":"address","indexed":false,"internalType":"address"},{"name":"proxyVoter","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"VoteCast","inputs":[{"name":"voter","type":"address","indexed":true,"internalType":"address"},{"name":"proposalId","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"support","type":"uint8","indexed":false,"internalType":"uint8"},{"name":"forVotePower","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"againstVotePower","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"canPropose(address)":"42b4632e","canVote(address,uint256)":"19eb8d48","cancel(uint256)":"40e58ee5","castVote(uint256,uint8)":"56781388","getLastProposal()":"f0ab3dd9","getProposalDescription(uint256)":"229acb17","getProposalInfo(uint256)":"bc903cb8","getProposalVotes(uint256)":"47c66140","hasVoted(uint256,address)":"43859632","propose(string)":"aa98df39","setParameters(uint256,uint256,uint256,uint256,uint256)":"bd67301e","setProxyVoter(address)":"306face1","state(uint256)":"3e4f49e6"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"rewardEpochId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voteStartTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voteEndTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"majorityConditionBIPS\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalWeight\",\"type\":\"uint256\"}],\"name\":\"FtsoProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newMaintainer\",\"type\":\"address\"}],\"name\":\"MaintainerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votingDelaySeconds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votingPeriodSeconds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"thresholdConditionBIPS\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"majorityConditionBIPS\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalFeeValueWei\",\"type\":\"uint256\"}],\"name\":\"ParametersSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"ProposalCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proxyVoter\",\"type\":\"address\"}],\"name\":\"ProxyVoterSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"forVotePower\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"againstVotePower\",\"type\":\"uint256\"}],\"name\":\"VoteCast\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"canPropose\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"canVote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_support\",\"type\":\"uint8\"}],\"name\":\"castVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"getProposalDescription\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"getProposalInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardEpochId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_proposer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_voteStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_voteEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_thresholdConditionBIPS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_majorityConditionBIPS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalWeight\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"getProposalVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_for\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_against\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"hasVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"}],\"name\":\"propose\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_votingDelaySeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_votingPeriodSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_thresholdConditionBIPS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_majorityConditionBIPS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_proposalFeeValueWei\",\"type\":\"uint256\"}],\"name\":\"setParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxyVoter\",\"type\":\"address\"}],\"name\":\"setProxyVoter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum IPollingFtso.ProposalState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"canPropose(address)\":{\"params\":{\"_account\":\"Address of the queried account.\"},\"returns\":{\"_0\":\"True if the queried account can create a proposal, false otherwise.\"}},\"canVote(address,uint256)\":{\"params\":{\"_account\":\"Address of the queried account.\",\"_proposalId\":\"Id of the queried proposal.\"},\"returns\":{\"_0\":\"True if account is eligible to vote, false otherwise.\"}},\"cancel(uint256)\":{\"params\":{\"_proposalId\":\"Unique identifier of a proposal. Emits a ProposalCanceled event.\"}},\"castVote(uint256,uint8)\":{\"params\":{\"_proposalId\":\"Id of the proposal.\",\"_support\":\"A value indicating vote type (against, for). Emits a VoteCast event.\"}},\"getLastProposal()\":{\"returns\":{\"_description\":\"Description of the last proposal.\",\"_proposalId\":\"Id of the last proposal.\"}},\"getProposalDescription(uint256)\":{\"params\":{\"_proposalId\":\"Id of the proposal.\"},\"returns\":{\"_description\":\"Description of the proposal.\"}},\"getProposalInfo(uint256)\":{\"params\":{\"_proposalId\":\"Id of the proposal.\"},\"returns\":{\"_description\":\"Description of the proposal.\",\"_majorityConditionBIPS\":\"Number of FOR votes, as a percentage in BIPS of the.\",\"_proposer\":\"Address of the proposal submitter.\",\"_rewardEpochId\":\"Reward epoch id.\",\"_thresholdConditionBIPS\":\"Number of votes (voter power) cast required for the proposal to pass.\",\"_totalWeight\":\"Total weight of all eligible voters.\",\"_voteEndTime\":\"End time (in seconds from epoch) of the proposal voting.\",\"_voteStartTime\":\"Start time (in seconds from epoch) of the proposal voting.\"}},\"getProposalVotes(uint256)\":{\"params\":{\"_proposalId\":\"Id of the proposal.\"},\"returns\":{\"_against\":\"Accumulated vote power against the proposal.\",\"_for\":\"Accumulated vote power for the proposal.\"}},\"hasVoted(uint256,address)\":{\"params\":{\"_proposalId\":\"Id of the proposal.\",\"_voter\":\"Address of the voter.\"},\"returns\":{\"_0\":\"True if the voter has cast a vote on the proposal, and false otherwise.\"}},\"propose(string)\":{\"params\":{\"_description\":\"String description of the proposal.\"},\"returns\":{\"_0\":\"_proposalId Unique identifier of the proposal. Emits a FtsoProposalCreated event.\"}},\"setParameters(uint256,uint256,uint256,uint256,uint256)\":{\"params\":{\"_majorityConditionBIPS\":\"Share of participating vote power (in BIPS) required to vote in favor.\",\"_proposalFeeValueWei\":\"Fee value (in wei) that proposer must pay to submit a proposal.\",\"_thresholdConditionBIPS\":\"Share of total vote power (in BIPS) required to participate in vote for proposal to pass.\",\"_votingDelaySeconds\":\"Period between proposal creation and start of the vote, in seconds.\",\"_votingPeriodSeconds\":\"Length of voting period, in seconds.\"}},\"setProxyVoter(address)\":{\"params\":{\"_proxyVoter\":\"Address to register as a proxy (use address(0) to remove proxy). Emits a ProxyVoterSet event.\"}},\"state(uint256)\":{\"params\":{\"_proposalId\":\"Id of the proposal.\"},\"returns\":{\"_0\":\"ProposalState enum.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"FtsoProposalCreated(uint256,uint256,address,string,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Event emitted when a proposal is created.\"},\"MaintainerSet(address)\":{\"notice\":\"Event emitted when maintainer is set.\"},\"ParametersSet(uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Event emitted when parameters are set.\"},\"ProposalCanceled(uint256)\":{\"notice\":\"Event emitted when a proposal is canceled.\"},\"ProxyVoterSet(address,address)\":{\"notice\":\"Event emitted when proxy voter is set.\"},\"VoteCast(address,uint256,uint8,uint256,uint256)\":{\"notice\":\"Event emitted when a vote is cast.\"}},\"kind\":\"user\",\"methods\":{\"canPropose(address)\":{\"notice\":\"Returns whether an account can create proposals. An address can make proposals if it is registered voter, its proxy or the maintainer of the contract.\"},\"canVote(address,uint256)\":{\"notice\":\"Returns whether an account can vote for a given proposal.\"},\"cancel(uint256)\":{\"notice\":\"Cancels an existing proposal.\"},\"castVote(uint256,uint8)\":{\"notice\":\"Casts a vote on a proposal.\"},\"getLastProposal()\":{\"notice\":\"Returns id and description of the last created proposal.\"},\"getProposalDescription(uint256)\":{\"notice\":\"Returns the description string that was supplied when the specified proposal was created.\"},\"getProposalInfo(uint256)\":{\"notice\":\"Returns information about the specified proposal.\"},\"getProposalVotes(uint256)\":{\"notice\":\"Returns number of votes for and against the specified proposal.\"},\"hasVoted(uint256,address)\":{\"notice\":\"Returns whether a voter has cast a vote on a specific proposal.\"},\"propose(string)\":{\"notice\":\"Creates a new proposal.\"},\"setParameters(uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Sets (or changes) contract's parameters. It is called after deployment of the contract and every time one of the parameters changes.\"},\"setProxyVoter(address)\":{\"notice\":\"Sets a proxy voter for a voter (i.e. address that can vote in its name).\"},\"state(uint256)\":{\"notice\":\"Returns the current state of a proposal.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/flare-periphery-contracts/coston2/IPollingFtso.sol\":\"IPollingFtso\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@flarenetwork/flare-periphery-contracts/=lib/flare-periphery-contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":flare-periphery-contracts/=lib/flare-periphery-contracts/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\"]},\"sources\":{\"lib/flare-periphery-contracts/coston2/IPollingFtso.sol\":{\"keccak256\":\"0x5b4406c9b2651a1a6bd766fe99c6f347d384b913f74368fcf53f1ecaeff95269\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://24fb79c812e459ddc44b907292d186ecee2406fff3e4def2a79426b7ec6c8e60\",\"dweb:/ipfs/QmYX1xS81rXALY1JEDb4XQF5iqiMEx5bFMuuj9uKBJy6Si\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.20+commit.a1b79de6"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"uint256","name":"proposalId","type":"uint256","indexed":true},{"internalType":"uint256","name":"rewardEpochId","type":"uint256","indexed":true},{"internalType":"address","name":"proposer","type":"address","indexed":false},{"internalType":"string","name":"description","type":"string","indexed":false},{"internalType":"uint256","name":"voteStartTime","type":"uint256","indexed":false},{"internalType":"uint256","name":"voteEndTime","type":"uint256","indexed":false},{"internalType":"uint256","name":"threshold","type":"uint256","indexed":false},{"internalType":"uint256","name":"majorityConditionBIPS","type":"uint256","indexed":false},{"internalType":"uint256","name":"totalWeight","type":"uint256","indexed":false}],"type":"event","name":"FtsoProposalCreated","anonymous":false},{"inputs":[{"internalType":"address","name":"newMaintainer","type":"address","indexed":false}],"type":"event","name":"MaintainerSet","anonymous":false},{"inputs":[{"internalType":"uint256","name":"votingDelaySeconds","type":"uint256","indexed":false},{"internalType":"uint256","name":"votingPeriodSeconds","type":"uint256","indexed":false},{"internalType":"uint256","name":"thresholdConditionBIPS","type":"uint256","indexed":false},{"internalType":"uint256","name":"majorityConditionBIPS","type":"uint256","indexed":false},{"internalType":"uint256","name":"proposalFeeValueWei","type":"uint256","indexed":false}],"type":"event","name":"ParametersSet","anonymous":false},{"inputs":[{"internalType":"uint256","name":"proposalId","type":"uint256","indexed":true}],"type":"event","name":"ProposalCanceled","anonymous":false},{"inputs":[{"internalType":"address","name":"account","type":"address","indexed":false},{"internalType":"address","name":"proxyVoter","type":"address","indexed":false}],"type":"event","name":"ProxyVoterSet","anonymous":false},{"inputs":[{"internalType":"address","name":"voter","type":"address","indexed":true},{"internalType":"uint256","name":"proposalId","type":"uint256","indexed":true},{"internalType":"uint8","name":"support","type":"uint8","indexed":false},{"internalType":"uint256","name":"forVotePower","type":"uint256","indexed":false},{"internalType":"uint256","name":"againstVotePower","type":"uint256","indexed":false}],"type":"event","name":"VoteCast","anonymous":false},{"inputs":[{"internalType":"address","name":"_account","type":"address"}],"stateMutability":"view","type":"function","name":"canPropose","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"address","name":"_account","type":"address"},{"internalType":"uint256","name":"_proposalId","type":"uint256"}],"stateMutability":"view","type":"function","name":"canVote","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"uint256","name":"_proposalId","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"cancel"},{"inputs":[{"internalType":"uint256","name":"_proposalId","type":"uint256"},{"internalType":"uint8","name":"_support","type":"uint8"}],"stateMutability":"nonpayable","type":"function","name":"castVote"},{"inputs":[],"stateMutability":"view","type":"function","name":"getLastProposal","outputs":[{"internalType":"uint256","name":"_proposalId","type":"uint256"},{"internalType":"string","name":"_description","type":"string"}]},{"inputs":[{"internalType":"uint256","name":"_proposalId","type":"uint256"}],"stateMutability":"view","type":"function","name":"getProposalDescription","outputs":[{"internalType":"string","name":"_description","type":"string"}]},{"inputs":[{"internalType":"uint256","name":"_proposalId","type":"uint256"}],"stateMutability":"view","type":"function","name":"getProposalInfo","outputs":[{"internalType":"uint256","name":"_rewardEpochId","type":"uint256"},{"internalType":"string","name":"_description","type":"string"},{"internalType":"address","name":"_proposer","type":"address"},{"internalType":"uint256","name":"_voteStartTime","type":"uint256"},{"internalType":"uint256","name":"_voteEndTime","type":"uint256"},{"internalType":"uint256","name":"_thresholdConditionBIPS","type":"uint256"},{"internalType":"uint256","name":"_majorityConditionBIPS","type":"uint256"},{"internalType":"uint256","name":"_totalWeight","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"_proposalId","type":"uint256"}],"stateMutability":"view","type":"function","name":"getProposalVotes","outputs":[{"internalType":"uint256","name":"_for","type":"uint256"},{"internalType":"uint256","name":"_against","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"_proposalId","type":"uint256"},{"internalType":"address","name":"_voter","type":"address"}],"stateMutability":"view","type":"function","name":"hasVoted","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"string","name":"_description","type":"string"}],"stateMutability":"payable","type":"function","name":"propose","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"_votingDelaySeconds","type":"uint256"},{"internalType":"uint256","name":"_votingPeriodSeconds","type":"uint256"},{"internalType":"uint256","name":"_thresholdConditionBIPS","type":"uint256"},{"internalType":"uint256","name":"_majorityConditionBIPS","type":"uint256"},{"internalType":"uint256","name":"_proposalFeeValueWei","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"setParameters"},{"inputs":[{"internalType":"address","name":"_proxyVoter","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"setProxyVoter"},{"inputs":[{"internalType":"uint256","name":"_proposalId","type":"uint256"}],"stateMutability":"view","type":"function","name":"state","outputs":[{"internalType":"enum IPollingFtso.ProposalState","name":"","type":"uint8"}]}],"devdoc":{"kind":"dev","methods":{"canPropose(address)":{"params":{"_account":"Address of the queried account."},"returns":{"_0":"True if the queried account can create a proposal, false otherwise."}},"canVote(address,uint256)":{"params":{"_account":"Address of the queried account.","_proposalId":"Id of the queried proposal."},"returns":{"_0":"True if account is eligible to vote, false otherwise."}},"cancel(uint256)":{"params":{"_proposalId":"Unique identifier of a proposal. Emits a ProposalCanceled event."}},"castVote(uint256,uint8)":{"params":{"_proposalId":"Id of the proposal.","_support":"A value indicating vote type (against, for). Emits a VoteCast event."}},"getLastProposal()":{"returns":{"_description":"Description of the last proposal.","_proposalId":"Id of the last proposal."}},"getProposalDescription(uint256)":{"params":{"_proposalId":"Id of the proposal."},"returns":{"_description":"Description of the proposal."}},"getProposalInfo(uint256)":{"params":{"_proposalId":"Id of the proposal."},"returns":{"_description":"Description of the proposal.","_majorityConditionBIPS":"Number of FOR votes, as a percentage in BIPS of the.","_proposer":"Address of the proposal submitter.","_rewardEpochId":"Reward epoch id.","_thresholdConditionBIPS":"Number of votes (voter power) cast required for the proposal to pass.","_totalWeight":"Total weight of all eligible voters.","_voteEndTime":"End time (in seconds from epoch) of the proposal voting.","_voteStartTime":"Start time (in seconds from epoch) of the proposal voting."}},"getProposalVotes(uint256)":{"params":{"_proposalId":"Id of the proposal."},"returns":{"_against":"Accumulated vote power against the proposal.","_for":"Accumulated vote power for the proposal."}},"hasVoted(uint256,address)":{"params":{"_proposalId":"Id of the proposal.","_voter":"Address of the voter."},"returns":{"_0":"True if the voter has cast a vote on the proposal, and false otherwise."}},"propose(string)":{"params":{"_description":"String description of the proposal."},"returns":{"_0":"_proposalId Unique identifier of the proposal. Emits a FtsoProposalCreated event."}},"setParameters(uint256,uint256,uint256,uint256,uint256)":{"params":{"_majorityConditionBIPS":"Share of participating vote power (in BIPS) required to vote in favor.","_proposalFeeValueWei":"Fee value (in wei) that proposer must pay to submit a proposal.","_thresholdConditionBIPS":"Share of total vote power (in BIPS) required to participate in vote for proposal to pass.","_votingDelaySeconds":"Period between proposal creation and start of the vote, in seconds.","_votingPeriodSeconds":"Length of voting period, in seconds."}},"setProxyVoter(address)":{"params":{"_proxyVoter":"Address to register as a proxy (use address(0) to remove proxy). Emits a ProxyVoterSet event."}},"state(uint256)":{"params":{"_proposalId":"Id of the proposal."},"returns":{"_0":"ProposalState enum."}}},"version":1},"userdoc":{"kind":"user","methods":{"canPropose(address)":{"notice":"Returns whether an account can create proposals. An address can make proposals if it is registered voter, its proxy or the maintainer of the contract."},"canVote(address,uint256)":{"notice":"Returns whether an account can vote for a given proposal."},"cancel(uint256)":{"notice":"Cancels an existing proposal."},"castVote(uint256,uint8)":{"notice":"Casts a vote on a proposal."},"getLastProposal()":{"notice":"Returns id and description of the last created proposal."},"getProposalDescription(uint256)":{"notice":"Returns the description string that was supplied when the specified proposal was created."},"getProposalInfo(uint256)":{"notice":"Returns information about the specified proposal."},"getProposalVotes(uint256)":{"notice":"Returns number of votes for and against the specified proposal."},"hasVoted(uint256,address)":{"notice":"Returns whether a voter has cast a vote on a specific proposal."},"propose(string)":{"notice":"Creates a new proposal."},"setParameters(uint256,uint256,uint256,uint256,uint256)":{"notice":"Sets (or changes) contract's parameters. It is called after deployment of the contract and every time one of the parameters changes."},"setProxyVoter(address)":{"notice":"Sets a proxy voter for a voter (i.e. address that can vote in its name)."},"state(uint256)":{"notice":"Returns the current state of a proposal."}},"version":1}},"settings":{"remappings":["@flarenetwork/flare-periphery-contracts/=lib/flare-periphery-contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","flare-periphery-contracts/=lib/flare-periphery-contracts/","forge-std/=lib/forge-std/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin/=lib/openzeppelin-contracts/contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/flare-periphery-contracts/coston2/IPollingFtso.sol":"IPollingFtso"},"evmVersion":"paris","libraries":{}},"sources":{"lib/flare-periphery-contracts/coston2/IPollingFtso.sol":{"keccak256":"0x5b4406c9b2651a1a6bd766fe99c6f347d384b913f74368fcf53f1ecaeff95269","urls":["bzz-raw://24fb79c812e459ddc44b907292d186ecee2406fff3e4def2a79426b7ec6c8e60","dweb:/ipfs/QmYX1xS81rXALY1JEDb4XQF5iqiMEx5bFMuuj9uKBJy6Si"],"license":"MIT"}},"version":1},"id":34}