{"abi":[{"type":"function","name":"feeCollectionAddress","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address payable"}],"stateMutability":"view"},{"type":"function","name":"getRandomNumber","inputs":[],"outputs":[{"name":"_randomNumber","type":"uint256","internalType":"uint256"},{"name":"_isSecureRandom","type":"bool","internalType":"bool"},{"name":"_randomTimestamp","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getRandomNumberHistorical","inputs":[{"name":"_votingRoundId","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"_randomNumber","type":"uint256","internalType":"uint256"},{"name":"_isSecureRandom","type":"bool","internalType":"bool"},{"name":"_randomTimestamp","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getVotingRoundId","inputs":[{"name":"_timestamp","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"_votingRoundId","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"governanceFeeSetup","inputs":[{"name":"_relayMessage","type":"bytes","internalType":"bytes"},{"name":"_config","type":"tuple","internalType":"struct IRelay.RelayGovernanceConfig","components":[{"name":"descriptionHash","type":"bytes32","internalType":"bytes32"},{"name":"chainId","type":"uint256","internalType":"uint256"},{"name":"newFeeConfigs","type":"tuple[]","internalType":"struct IRelay.FeeConfig[]","components":[{"name":"protocolId","type":"uint8","internalType":"uint8"},{"name":"feeInWei","type":"uint256","internalType":"uint256"}]}]}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"isFinalized","inputs":[{"name":"_protocolId","type":"uint256","internalType":"uint256"},{"name":"_votingRoundId","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"lastInitializedRewardEpochData","inputs":[],"outputs":[{"name":"_lastInitializedRewardEpoch","type":"uint32","internalType":"uint32"},{"name":"_startingVotingRoundIdForLastInitializedRewardEpoch","type":"uint32","internalType":"uint32"}],"stateMutability":"view"},{"type":"function","name":"merkleRoots","inputs":[{"name":"_protocolId","type":"uint256","internalType":"uint256"},{"name":"_votingRoundId","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"_merkleRoot","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"protocolFeeInWei","inputs":[{"name":"_protocolId","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"relay","inputs":[],"outputs":[{"name":"","type":"bytes","internalType":"bytes"}],"stateMutability":"nonpayable"},{"type":"function","name":"startingVotingRoundIds","inputs":[{"name":"_rewardEpochId","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"_startingVotingRoundId","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"toSigningPolicyHash","inputs":[{"name":"_rewardEpochId","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"_signingPolicyHash","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"verify","inputs":[{"name":"_protocolId","type":"uint256","internalType":"uint256"},{"name":"_votingRoundId","type":"uint256","internalType":"uint256"},{"name":"_leaf","type":"bytes32","internalType":"bytes32"},{"name":"_proof","type":"bytes32[]","internalType":"bytes32[]"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"payable"},{"type":"function","name":"verifyCustomSignature","inputs":[{"name":"_relayMessage","type":"bytes","internalType":"bytes"},{"name":"_messageHash","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"_rewardEpochId","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"event","name":"ProtocolMessageRelayed","inputs":[{"name":"protocolId","type":"uint8","indexed":true,"internalType":"uint8"},{"name":"votingRoundId","type":"uint32","indexed":true,"internalType":"uint32"},{"name":"isSecureRandom","type":"bool","indexed":false,"internalType":"bool"},{"name":"merkleRoot","type":"bytes32","indexed":false,"internalType":"bytes32"}],"anonymous":false},{"type":"event","name":"SigningPolicyInitialized","inputs":[{"name":"rewardEpochId","type":"uint24","indexed":true,"internalType":"uint24"},{"name":"startVotingRoundId","type":"uint32","indexed":false,"internalType":"uint32"},{"name":"threshold","type":"uint16","indexed":false,"internalType":"uint16"},{"name":"seed","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"voters","type":"address[]","indexed":false,"internalType":"address[]"},{"name":"weights","type":"uint16[]","indexed":false,"internalType":"uint16[]"},{"name":"signingPolicyBytes","type":"bytes","indexed":false,"internalType":"bytes"},{"name":"timestamp","type":"uint64","indexed":false,"internalType":"uint64"}],"anonymous":false},{"type":"event","name":"SigningPolicyRelayed","inputs":[{"name":"rewardEpochId","type":"uint256","indexed":true,"internalType":"uint256"}],"anonymous":false}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"feeCollectionAddress()":"377c50d4","getRandomNumber()":"dbdff2c1","getRandomNumberHistorical(uint256)":"a87f1438","getVotingRoundId(uint256)":"ab97db37","governanceFeeSetup(bytes,(bytes32,uint256,(uint8,uint256)[]))":"8275ae58","isFinalized(uint256,uint256)":"317ad33c","lastInitializedRewardEpochData()":"8af0c307","merkleRoots(uint256,uint256)":"39436b00","protocolFeeInWei(uint256)":"91e7d42f","relay()":"b59589d1","startingVotingRoundIds(uint256)":"7297c0a2","toSigningPolicyHash(uint256)":"0c85bf07","verify(uint256,uint256,bytes32,bytes32[])":"808506aa","verifyCustomSignature(bytes,bytes32)":"9932185e"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"protocolId\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"votingRoundId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isSecureRandom\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"ProtocolMessageRelayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"rewardEpochId\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"startVotingRoundId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"threshold\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"voters\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint16[]\",\"name\":\"weights\",\"type\":\"uint16[]\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signingPolicyBytes\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"}],\"name\":\"SigningPolicyInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"rewardEpochId\",\"type\":\"uint256\"}],\"name\":\"SigningPolicyRelayed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"feeCollectionAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRandomNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_randomNumber\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isSecureRandom\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_randomTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_votingRoundId\",\"type\":\"uint256\"}],\"name\":\"getRandomNumberHistorical\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_randomNumber\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isSecureRandom\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_randomTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getVotingRoundId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_votingRoundId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_relayMessage\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"descriptionHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"protocolId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"feeInWei\",\"type\":\"uint256\"}],\"internalType\":\"struct IRelay.FeeConfig[]\",\"name\":\"newFeeConfigs\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IRelay.RelayGovernanceConfig\",\"name\":\"_config\",\"type\":\"tuple\"}],\"name\":\"governanceFeeSetup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_votingRoundId\",\"type\":\"uint256\"}],\"name\":\"isFinalized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastInitializedRewardEpochData\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"_lastInitializedRewardEpoch\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_startingVotingRoundIdForLastInitializedRewardEpoch\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_votingRoundId\",\"type\":\"uint256\"}],\"name\":\"merkleRoots\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolId\",\"type\":\"uint256\"}],\"name\":\"protocolFeeInWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relay\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardEpochId\",\"type\":\"uint256\"}],\"name\":\"startingVotingRoundIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_startingVotingRoundId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardEpochId\",\"type\":\"uint256\"}],\"name\":\"toSigningPolicyHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"_signingPolicyHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_votingRoundId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_relayMessage\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_messageHash\",\"type\":\"bytes32\"}],\"name\":\"verifyCustomSignature\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardEpochId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRandomNumber()\":{\"returns\":{\"_isSecureRandom\":\"The flag indicating if the random number is secure.\",\"_randomNumber\":\"The current random number.\",\"_randomTimestamp\":\"The timestamp of the random number.\"}},\"getRandomNumberHistorical(uint256)\":{\"params\":{\"_votingRoundId\":\"The voting round id.\"},\"returns\":{\"_isSecureRandom\":\"The flag indicating if the random number is secure.\",\"_randomNumber\":\"The current random number.\",\"_randomTimestamp\":\"The timestamp of the random number.\"}},\"getVotingRoundId(uint256)\":{\"params\":{\"_timestamp\":\"The timestamp.\"},\"returns\":{\"_votingRoundId\":\"The voting round id.\"}},\"governanceFeeSetup(bytes,(bytes32,uint256,(uint8,uint256)[]))\":{\"params\":{\"_config\":\"The new relay configuration.\",\"_relayMessage\":\"The relay message.\"}},\"isFinalized(uint256,uint256)\":{\"params\":{\"_protocolId\":\"The protocol id.\",\"_votingRoundId\":\"The voting round id.\"}},\"lastInitializedRewardEpochData()\":{\"returns\":{\"_lastInitializedRewardEpoch\":\"Last initialized reward epoch.\",\"_startingVotingRoundIdForLastInitializedRewardEpoch\":\"Starting voting round id for it.\"}},\"merkleRoots(uint256,uint256)\":{\"params\":{\"_protocolId\":\"The protocol id.\",\"_votingRoundId\":\"The voting round id.\"},\"returns\":{\"_merkleRoot\":\"The Merkle root.\"}},\"protocolFeeInWei(uint256)\":{\"params\":{\"_protocolId\":\"The protocol id.\"}},\"startingVotingRoundIds(uint256)\":{\"params\":{\"_rewardEpochId\":\"The reward epoch id.\"},\"returns\":{\"_startingVotingRoundId\":\"The start voting round id.\"}},\"toSigningPolicyHash(uint256)\":{\"params\":{\"_rewardEpochId\":\"The reward epoch id.\"},\"returns\":{\"_signingPolicyHash\":\"The signing policy hash.\"}},\"verify(uint256,uint256,bytes32,bytes32[])\":{\"params\":{\"_leaf\":\"The leaf (or intermediate node) to verify.\",\"_proof\":\"The Merkle proof.\",\"_protocolId\":\"The protocol id.\",\"_votingRoundId\":\"The voting round id.\"},\"returns\":{\"_0\":\"True if the verification is successful.\"}},\"verifyCustomSignature(bytes,bytes32)\":{\"params\":{\"_messageHash\":\"The hash of the message.\",\"_relayMessage\":\"The relay message.\"},\"returns\":{\"_rewardEpochId\":\"The reward epoch id of the signing policy.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"feeCollectionAddress()\":{\"notice\":\"Returns fee collection address.\"},\"getRandomNumber()\":{\"notice\":\"Returns the current random number, its timestamp and the flag indicating if it is secure.\"},\"getRandomNumberHistorical(uint256)\":{\"notice\":\"Returns the historical random number for a given _votingRoundId, its timestamp and the flag indicating if it is secure. If no finalization in the _votingRoundId, the function reverts.\"},\"getVotingRoundId(uint256)\":{\"notice\":\"Returns the voting round id for given timestamp.\"},\"governanceFeeSetup(bytes,(bytes32,uint256,(uint8,uint256)[]))\":{\"notice\":\"Checks the relay message for sufficient weight of signatures of the hash of the _config data. If the check is successful, the relay contract is configured with the new _config data, which in particular means that fee configurations are updated. Otherwise the function reverts.\"},\"isFinalized(uint256,uint256)\":{\"notice\":\"Returns true if there is finalization for a given protocol id and voting round id.\"},\"lastInitializedRewardEpochData()\":{\"notice\":\"Returns last initialized reward epoch data.\"},\"merkleRoots(uint256,uint256)\":{\"notice\":\"Returns the Merkle root for given protocol id and voting round id. The function is reverted if signingPolicySetter is set, hence on all deployments where the contract is used as a pure relay.\"},\"protocolFeeInWei(uint256)\":{\"notice\":\"Returns fee in wei for one verification of a given protocol id.\"},\"relay()\":{\"notice\":\"Finalization function for new signing policies and protocol messages. It can be used as finalization contract on Flare chain or as relay contract on other EVM chain. Can be called in two modes. It expects calldata that is parsed in a custom manner. Hence the transaction calls should assemble relevant calldata in the 'data' field. Depending on the data provided, the contract operations in essentially two modes: (1) Relaying signing policy. The structure of the calldata is:        function signature (4 bytes) + active signing policy             + 0 (1 byte) + new signing policy,     total of exactly 4423 bytes. (2) Relaying signed message. The structure of the calldata is:        function signature (4 bytes) + signing policy           + signed message (38 bytes) + ECDSA signatures with indices (67 bytes each)     This case splits into two subcases:     - protocolMessageId = 1: Message id must be of the form (protocolMessageId, 0, 0, merkleRoot).       The validity of the signatures of sufficient weight is checked and if       successful, the merkleRoot from the message is returned (32 bytes) and the       reward epoch id of the signing policy as well (additional 3 bytes)     - protocolMessageId > 1: The validity of the signatures of sufficient weight is checked and if       it is valid, the merkleRoot is published for protocolId and votingRoundId. Reverts if relaying is not successful.\"},\"startingVotingRoundIds(uint256)\":{\"notice\":\"Returns the start voting round id for given reward epoch id.\"},\"toSigningPolicyHash(uint256)\":{\"notice\":\"Returns the signing policy hash for given reward epoch id. The function is reverted if signingPolicySetter is set, hence on all deployments where the contract is used as a pure relay.\"},\"verify(uint256,uint256,bytes32,bytes32[])\":{\"notice\":\"Verifies the leaf (or intermediate node) with the Merkle proof against the Merkle root for given protocol id and voting round id. A fee may need to be paid. It is protocol specific. **NOTE:** Overpayment is not refunded.\"},\"verifyCustomSignature(bytes,bytes32)\":{\"notice\":\"Checks the relay message for sufficient weight of signatures for the _messageHash signed for protocol message Merkle root of the form (1, 0, 0, _messageHash). If the check is successful, reward epoch id of the signing policy is returned. Otherwise the function reverts.\"}},\"notice\":\"Relay interface.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/flare-periphery-contracts/coston2/IRelay.sol\":\"IRelay\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@flarenetwork/flare-periphery-contracts/=lib/flare-periphery-contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":flare-periphery-contracts/=lib/flare-periphery-contracts/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\"]},\"sources\":{\"lib/flare-periphery-contracts/coston2/IRelay.sol\":{\"keccak256\":\"0x81598c5f3ae71afc5d8838125a3f26b5b928ae5a7fa911083381200f8a4f68cd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1b13fabcdc7ea9bd1f2dafbcfefae4ee7ceb9d733388d31d5844620a9c75dc48\",\"dweb:/ipfs/QmT8fimJQb1Xhp1XhZkv2BiVSxNrrZNH43avK6QSRpiur6\"]},\"lib/flare-periphery-contracts/coston2/RandomNumberV2Interface.sol\":{\"keccak256\":\"0xc35805236772520b075fb386d7967eaf6dd45e5d5bac6a514e932f90ad32924e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://18d2ed8d2b2d10b27fcbf61e9823dfeb8158d05fe333d917a86c11f8b6b51f7b\",\"dweb:/ipfs/QmWPbSRZDNNiuGA7u5iKFTyH3jbJaPy9XZGKHvWQ6vkV93\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.20+commit.a1b79de6"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"uint8","name":"protocolId","type":"uint8","indexed":true},{"internalType":"uint32","name":"votingRoundId","type":"uint32","indexed":true},{"internalType":"bool","name":"isSecureRandom","type":"bool","indexed":false},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32","indexed":false}],"type":"event","name":"ProtocolMessageRelayed","anonymous":false},{"inputs":[{"internalType":"uint24","name":"rewardEpochId","type":"uint24","indexed":true},{"internalType":"uint32","name":"startVotingRoundId","type":"uint32","indexed":false},{"internalType":"uint16","name":"threshold","type":"uint16","indexed":false},{"internalType":"uint256","name":"seed","type":"uint256","indexed":false},{"internalType":"address[]","name":"voters","type":"address[]","indexed":false},{"internalType":"uint16[]","name":"weights","type":"uint16[]","indexed":false},{"internalType":"bytes","name":"signingPolicyBytes","type":"bytes","indexed":false},{"internalType":"uint64","name":"timestamp","type":"uint64","indexed":false}],"type":"event","name":"SigningPolicyInitialized","anonymous":false},{"inputs":[{"internalType":"uint256","name":"rewardEpochId","type":"uint256","indexed":true}],"type":"event","name":"SigningPolicyRelayed","anonymous":false},{"inputs":[],"stateMutability":"view","type":"function","name":"feeCollectionAddress","outputs":[{"internalType":"address payable","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getRandomNumber","outputs":[{"internalType":"uint256","name":"_randomNumber","type":"uint256"},{"internalType":"bool","name":"_isSecureRandom","type":"bool"},{"internalType":"uint256","name":"_randomTimestamp","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"_votingRoundId","type":"uint256"}],"stateMutability":"view","type":"function","name":"getRandomNumberHistorical","outputs":[{"internalType":"uint256","name":"_randomNumber","type":"uint256"},{"internalType":"bool","name":"_isSecureRandom","type":"bool"},{"internalType":"uint256","name":"_randomTimestamp","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"_timestamp","type":"uint256"}],"stateMutability":"view","type":"function","name":"getVotingRoundId","outputs":[{"internalType":"uint256","name":"_votingRoundId","type":"uint256"}]},{"inputs":[{"internalType":"bytes","name":"_relayMessage","type":"bytes"},{"internalType":"struct IRelay.RelayGovernanceConfig","name":"_config","type":"tuple","components":[{"internalType":"bytes32","name":"descriptionHash","type":"bytes32"},{"internalType":"uint256","name":"chainId","type":"uint256"},{"internalType":"struct IRelay.FeeConfig[]","name":"newFeeConfigs","type":"tuple[]","components":[{"internalType":"uint8","name":"protocolId","type":"uint8"},{"internalType":"uint256","name":"feeInWei","type":"uint256"}]}]}],"stateMutability":"nonpayable","type":"function","name":"governanceFeeSetup"},{"inputs":[{"internalType":"uint256","name":"_protocolId","type":"uint256"},{"internalType":"uint256","name":"_votingRoundId","type":"uint256"}],"stateMutability":"view","type":"function","name":"isFinalized","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"lastInitializedRewardEpochData","outputs":[{"internalType":"uint32","name":"_lastInitializedRewardEpoch","type":"uint32"},{"internalType":"uint32","name":"_startingVotingRoundIdForLastInitializedRewardEpoch","type":"uint32"}]},{"inputs":[{"internalType":"uint256","name":"_protocolId","type":"uint256"},{"internalType":"uint256","name":"_votingRoundId","type":"uint256"}],"stateMutability":"view","type":"function","name":"merkleRoots","outputs":[{"internalType":"bytes32","name":"_merkleRoot","type":"bytes32"}]},{"inputs":[{"internalType":"uint256","name":"_protocolId","type":"uint256"}],"stateMutability":"view","type":"function","name":"protocolFeeInWei","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"relay","outputs":[{"internalType":"bytes","name":"","type":"bytes"}]},{"inputs":[{"internalType":"uint256","name":"_rewardEpochId","type":"uint256"}],"stateMutability":"view","type":"function","name":"startingVotingRoundIds","outputs":[{"internalType":"uint256","name":"_startingVotingRoundId","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"_rewardEpochId","type":"uint256"}],"stateMutability":"view","type":"function","name":"toSigningPolicyHash","outputs":[{"internalType":"bytes32","name":"_signingPolicyHash","type":"bytes32"}]},{"inputs":[{"internalType":"uint256","name":"_protocolId","type":"uint256"},{"internalType":"uint256","name":"_votingRoundId","type":"uint256"},{"internalType":"bytes32","name":"_leaf","type":"bytes32"},{"internalType":"bytes32[]","name":"_proof","type":"bytes32[]"}],"stateMutability":"payable","type":"function","name":"verify","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"bytes","name":"_relayMessage","type":"bytes"},{"internalType":"bytes32","name":"_messageHash","type":"bytes32"}],"stateMutability":"nonpayable","type":"function","name":"verifyCustomSignature","outputs":[{"internalType":"uint256","name":"_rewardEpochId","type":"uint256"}]}],"devdoc":{"kind":"dev","methods":{"getRandomNumber()":{"returns":{"_isSecureRandom":"The flag indicating if the random number is secure.","_randomNumber":"The current random number.","_randomTimestamp":"The timestamp of the random number."}},"getRandomNumberHistorical(uint256)":{"params":{"_votingRoundId":"The voting round id."},"returns":{"_isSecureRandom":"The flag indicating if the random number is secure.","_randomNumber":"The current random number.","_randomTimestamp":"The timestamp of the random number."}},"getVotingRoundId(uint256)":{"params":{"_timestamp":"The timestamp."},"returns":{"_votingRoundId":"The voting round id."}},"governanceFeeSetup(bytes,(bytes32,uint256,(uint8,uint256)[]))":{"params":{"_config":"The new relay configuration.","_relayMessage":"The relay message."}},"isFinalized(uint256,uint256)":{"params":{"_protocolId":"The protocol id.","_votingRoundId":"The voting round id."}},"lastInitializedRewardEpochData()":{"returns":{"_lastInitializedRewardEpoch":"Last initialized reward epoch.","_startingVotingRoundIdForLastInitializedRewardEpoch":"Starting voting round id for it."}},"merkleRoots(uint256,uint256)":{"params":{"_protocolId":"The protocol id.","_votingRoundId":"The voting round id."},"returns":{"_merkleRoot":"The Merkle root."}},"protocolFeeInWei(uint256)":{"params":{"_protocolId":"The protocol id."}},"startingVotingRoundIds(uint256)":{"params":{"_rewardEpochId":"The reward epoch id."},"returns":{"_startingVotingRoundId":"The start voting round id."}},"toSigningPolicyHash(uint256)":{"params":{"_rewardEpochId":"The reward epoch id."},"returns":{"_signingPolicyHash":"The signing policy hash."}},"verify(uint256,uint256,bytes32,bytes32[])":{"params":{"_leaf":"The leaf (or intermediate node) to verify.","_proof":"The Merkle proof.","_protocolId":"The protocol id.","_votingRoundId":"The voting round id."},"returns":{"_0":"True if the verification is successful."}},"verifyCustomSignature(bytes,bytes32)":{"params":{"_messageHash":"The hash of the message.","_relayMessage":"The relay message."},"returns":{"_rewardEpochId":"The reward epoch id of the signing policy."}}},"version":1},"userdoc":{"kind":"user","methods":{"feeCollectionAddress()":{"notice":"Returns fee collection address."},"getRandomNumber()":{"notice":"Returns the current random number, its timestamp and the flag indicating if it is secure."},"getRandomNumberHistorical(uint256)":{"notice":"Returns the historical random number for a given _votingRoundId, its timestamp and the flag indicating if it is secure. If no finalization in the _votingRoundId, the function reverts."},"getVotingRoundId(uint256)":{"notice":"Returns the voting round id for given timestamp."},"governanceFeeSetup(bytes,(bytes32,uint256,(uint8,uint256)[]))":{"notice":"Checks the relay message for sufficient weight of signatures of the hash of the _config data. If the check is successful, the relay contract is configured with the new _config data, which in particular means that fee configurations are updated. Otherwise the function reverts."},"isFinalized(uint256,uint256)":{"notice":"Returns true if there is finalization for a given protocol id and voting round id."},"lastInitializedRewardEpochData()":{"notice":"Returns last initialized reward epoch data."},"merkleRoots(uint256,uint256)":{"notice":"Returns the Merkle root for given protocol id and voting round id. The function is reverted if signingPolicySetter is set, hence on all deployments where the contract is used as a pure relay."},"protocolFeeInWei(uint256)":{"notice":"Returns fee in wei for one verification of a given protocol id."},"relay()":{"notice":"Finalization function for new signing policies and protocol messages. It can be used as finalization contract on Flare chain or as relay contract on other EVM chain. Can be called in two modes. It expects calldata that is parsed in a custom manner. Hence the transaction calls should assemble relevant calldata in the 'data' field. Depending on the data provided, the contract operations in essentially two modes: (1) Relaying signing policy. The structure of the calldata is:        function signature (4 bytes) + active signing policy             + 0 (1 byte) + new signing policy,     total of exactly 4423 bytes. (2) Relaying signed message. The structure of the calldata is:        function signature (4 bytes) + signing policy           + signed message (38 bytes) + ECDSA signatures with indices (67 bytes each)     This case splits into two subcases:     - protocolMessageId = 1: Message id must be of the form (protocolMessageId, 0, 0, merkleRoot).       The validity of the signatures of sufficient weight is checked and if       successful, the merkleRoot from the message is returned (32 bytes) and the       reward epoch id of the signing policy as well (additional 3 bytes)     - protocolMessageId > 1: The validity of the signatures of sufficient weight is checked and if       it is valid, the merkleRoot is published for protocolId and votingRoundId. Reverts if relaying is not successful."},"startingVotingRoundIds(uint256)":{"notice":"Returns the start voting round id for given reward epoch id."},"toSigningPolicyHash(uint256)":{"notice":"Returns the signing policy hash for given reward epoch id. The function is reverted if signingPolicySetter is set, hence on all deployments where the contract is used as a pure relay."},"verify(uint256,uint256,bytes32,bytes32[])":{"notice":"Verifies the leaf (or intermediate node) with the Merkle proof against the Merkle root for given protocol id and voting round id. A fee may need to be paid. It is protocol specific. **NOTE:** Overpayment is not refunded."},"verifyCustomSignature(bytes,bytes32)":{"notice":"Checks the relay message for sufficient weight of signatures for the _messageHash signed for protocol message Merkle root of the form (1, 0, 0, _messageHash). If the check is successful, reward epoch id of the signing policy is returned. Otherwise the function reverts."}},"version":1}},"settings":{"remappings":["@flarenetwork/flare-periphery-contracts/=lib/flare-periphery-contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","flare-periphery-contracts/=lib/flare-periphery-contracts/","forge-std/=lib/forge-std/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin/=lib/openzeppelin-contracts/contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/flare-periphery-contracts/coston2/IRelay.sol":"IRelay"},"evmVersion":"paris","libraries":{}},"sources":{"lib/flare-periphery-contracts/coston2/IRelay.sol":{"keccak256":"0x81598c5f3ae71afc5d8838125a3f26b5b928ae5a7fa911083381200f8a4f68cd","urls":["bzz-raw://1b13fabcdc7ea9bd1f2dafbcfefae4ee7ceb9d733388d31d5844620a9c75dc48","dweb:/ipfs/QmT8fimJQb1Xhp1XhZkv2BiVSxNrrZNH43avK6QSRpiur6"],"license":"MIT"},"lib/flare-periphery-contracts/coston2/RandomNumberV2Interface.sol":{"keccak256":"0xc35805236772520b075fb386d7967eaf6dd45e5d5bac6a514e932f90ad32924e","urls":["bzz-raw://18d2ed8d2b2d10b27fcbf61e9823dfeb8158d05fe333d917a86c11f8b6b51f7b","dweb:/ipfs/QmWPbSRZDNNiuGA7u5iKFTyH3jbJaPy9XZGKHvWQ6vkV93"],"license":"MIT"}},"version":1},"id":39}