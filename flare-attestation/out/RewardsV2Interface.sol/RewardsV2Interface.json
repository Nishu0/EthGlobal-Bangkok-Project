{"abi":[{"type":"function","name":"active","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"claim","inputs":[{"name":"_rewardOwner","type":"address","internalType":"address"},{"name":"_recipient","type":"address","internalType":"address payable"},{"name":"_rewardEpochId","type":"uint24","internalType":"uint24"},{"name":"_wrap","type":"bool","internalType":"bool"},{"name":"_proofs","type":"tuple[]","internalType":"struct RewardsV2Interface.RewardClaimWithProof[]","components":[{"name":"merkleProof","type":"bytes32[]","internalType":"bytes32[]"},{"name":"body","type":"tuple","internalType":"struct RewardsV2Interface.RewardClaim","components":[{"name":"rewardEpochId","type":"uint24","internalType":"uint24"},{"name":"beneficiary","type":"bytes20","internalType":"bytes20"},{"name":"amount","type":"uint120","internalType":"uint120"},{"name":"claimType","type":"uint8","internalType":"enum RewardsV2Interface.ClaimType"}]}]}],"outputs":[{"name":"_rewardAmountWei","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"getNextClaimableRewardEpochId","inputs":[{"name":"_rewardOwner","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getRewardEpochIdsWithClaimableRewards","inputs":[],"outputs":[{"name":"_startEpochId","type":"uint24","internalType":"uint24"},{"name":"_endEpochId","type":"uint24","internalType":"uint24"}],"stateMutability":"view"},{"type":"function","name":"getStateOfRewards","inputs":[{"name":"_rewardOwner","type":"address","internalType":"address"}],"outputs":[{"name":"_rewardStates","type":"tuple[][]","internalType":"struct RewardsV2Interface.RewardState[][]","components":[{"name":"rewardEpochId","type":"uint24","internalType":"uint24"},{"name":"beneficiary","type":"bytes20","internalType":"bytes20"},{"name":"amount","type":"uint120","internalType":"uint120"},{"name":"claimType","type":"uint8","internalType":"enum RewardsV2Interface.ClaimType"},{"name":"initialised","type":"bool","internalType":"bool"}]}],"stateMutability":"view"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"active()":"02fb0c5e","claim(address,address,uint24,bool,(bytes32[],(uint24,bytes20,uint120,uint8))[])":"8e33aba5","getNextClaimableRewardEpochId(address)":"d6ac4f72","getRewardEpochIdsWithClaimableRewards()":"d8def818","getStateOfRewards(address)":"f1367b7f"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"active\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardOwner\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"_rewardEpochId\",\"type\":\"uint24\"},{\"internalType\":\"bool\",\"name\":\"_wrap\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"},{\"components\":[{\"internalType\":\"uint24\",\"name\":\"rewardEpochId\",\"type\":\"uint24\"},{\"internalType\":\"bytes20\",\"name\":\"beneficiary\",\"type\":\"bytes20\"},{\"internalType\":\"uint120\",\"name\":\"amount\",\"type\":\"uint120\"},{\"internalType\":\"enum RewardsV2Interface.ClaimType\",\"name\":\"claimType\",\"type\":\"uint8\"}],\"internalType\":\"struct RewardsV2Interface.RewardClaim\",\"name\":\"body\",\"type\":\"tuple\"}],\"internalType\":\"struct RewardsV2Interface.RewardClaimWithProof[]\",\"name\":\"_proofs\",\"type\":\"tuple[]\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardAmountWei\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardOwner\",\"type\":\"address\"}],\"name\":\"getNextClaimableRewardEpochId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardEpochIdsWithClaimableRewards\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"_startEpochId\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"_endEpochId\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardOwner\",\"type\":\"address\"}],\"name\":\"getStateOfRewards\",\"outputs\":[{\"components\":[{\"internalType\":\"uint24\",\"name\":\"rewardEpochId\",\"type\":\"uint24\"},{\"internalType\":\"bytes20\",\"name\":\"beneficiary\",\"type\":\"bytes20\"},{\"internalType\":\"uint120\",\"name\":\"amount\",\"type\":\"uint120\"},{\"internalType\":\"enum RewardsV2Interface.ClaimType\",\"name\":\"claimType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"initialised\",\"type\":\"bool\"}],\"internalType\":\"struct RewardsV2Interface.RewardState[][]\",\"name\":\"_rewardStates\",\"type\":\"tuple[][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claim(address,address,uint24,bool,(bytes32[],(uint24,bytes20,uint120,uint8))[])\":{\"params\":{\"_proofs\":\"Array of reward claims with merkle proofs.\",\"_recipient\":\"Address of the reward recipient.\",\"_rewardEpochId\":\"Id of the reward epoch up to which the rewards are claimed.\",\"_rewardOwner\":\"Address of the reward owner.\",\"_wrap\":\"Indicates if the reward should be wrapped (deposited) to the WNAT contract.\"},\"returns\":{\"_rewardAmountWei\":\"Amount of rewarded native tokens (wei).\"}},\"getNextClaimableRewardEpochId(address)\":{\"params\":{\"_rewardOwner\":\"Address of the reward owner to query.\"}},\"getRewardEpochIdsWithClaimableRewards()\":{\"returns\":{\"_endEpochId\":\"The newest epoch id that allows reward claiming.\",\"_startEpochId\":\"The oldest epoch id that allows reward claiming.\"}},\"getStateOfRewards(address)\":{\"params\":{\"_rewardOwner\":\"Address of the reward owner.\"},\"returns\":{\"_rewardStates\":\"Array of reward states.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"active()\":{\"notice\":\"Indicates if the contract is active - claims are enabled.\"},\"claim(address,address,uint24,bool,(bytes32[],(uint24,bytes20,uint120,uint8))[])\":{\"notice\":\"Claim rewards for `_rewardOwner` and transfer them to `_recipient`. It can be called by reward owner or its authorized executor.\"},\"getNextClaimableRewardEpochId(address)\":{\"notice\":\"Returns the next claimable reward epoch for a reward owner.\"},\"getRewardEpochIdsWithClaimableRewards()\":{\"notice\":\"Returns the start and the end of the reward epoch range for which the reward is claimable.\"},\"getStateOfRewards(address)\":{\"notice\":\"Returns the state of rewards for a given address for all unclaimed reward epochs with claimable rewards.\"}},\"notice\":\"Rewards V2 long term support interface.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/flare-periphery-contracts/coston2/RewardsV2Interface.sol\":\"RewardsV2Interface\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@flarenetwork/flare-periphery-contracts/=lib/flare-periphery-contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":flare-periphery-contracts/=lib/flare-periphery-contracts/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\"]},\"sources\":{\"lib/flare-periphery-contracts/coston2/RewardsV2Interface.sol\":{\"keccak256\":\"0x448b3a425efbf66ce0200d202304143f6c3132868c2ef59c2cd39b2dad190ab2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3183ccca46f1c24bfbce1b1ede94484030ec15b9ba333b981b6bf9b125eb5e34\",\"dweb:/ipfs/QmPQogUwALcqmVP8n216BV4rUDWY4xYngAJaMMgokwpVXU\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.20+commit.a1b79de6"},"language":"Solidity","output":{"abi":[{"inputs":[],"stateMutability":"view","type":"function","name":"active","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"address","name":"_rewardOwner","type":"address"},{"internalType":"address payable","name":"_recipient","type":"address"},{"internalType":"uint24","name":"_rewardEpochId","type":"uint24"},{"internalType":"bool","name":"_wrap","type":"bool"},{"internalType":"struct RewardsV2Interface.RewardClaimWithProof[]","name":"_proofs","type":"tuple[]","components":[{"internalType":"bytes32[]","name":"merkleProof","type":"bytes32[]"},{"internalType":"struct RewardsV2Interface.RewardClaim","name":"body","type":"tuple","components":[{"internalType":"uint24","name":"rewardEpochId","type":"uint24"},{"internalType":"bytes20","name":"beneficiary","type":"bytes20"},{"internalType":"uint120","name":"amount","type":"uint120"},{"internalType":"enum RewardsV2Interface.ClaimType","name":"claimType","type":"uint8"}]}]}],"stateMutability":"nonpayable","type":"function","name":"claim","outputs":[{"internalType":"uint256","name":"_rewardAmountWei","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"_rewardOwner","type":"address"}],"stateMutability":"view","type":"function","name":"getNextClaimableRewardEpochId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getRewardEpochIdsWithClaimableRewards","outputs":[{"internalType":"uint24","name":"_startEpochId","type":"uint24"},{"internalType":"uint24","name":"_endEpochId","type":"uint24"}]},{"inputs":[{"internalType":"address","name":"_rewardOwner","type":"address"}],"stateMutability":"view","type":"function","name":"getStateOfRewards","outputs":[{"internalType":"struct RewardsV2Interface.RewardState[][]","name":"_rewardStates","type":"tuple[][]","components":[{"internalType":"uint24","name":"rewardEpochId","type":"uint24"},{"internalType":"bytes20","name":"beneficiary","type":"bytes20"},{"internalType":"uint120","name":"amount","type":"uint120"},{"internalType":"enum RewardsV2Interface.ClaimType","name":"claimType","type":"uint8"},{"internalType":"bool","name":"initialised","type":"bool"}]}]}],"devdoc":{"kind":"dev","methods":{"claim(address,address,uint24,bool,(bytes32[],(uint24,bytes20,uint120,uint8))[])":{"params":{"_proofs":"Array of reward claims with merkle proofs.","_recipient":"Address of the reward recipient.","_rewardEpochId":"Id of the reward epoch up to which the rewards are claimed.","_rewardOwner":"Address of the reward owner.","_wrap":"Indicates if the reward should be wrapped (deposited) to the WNAT contract."},"returns":{"_rewardAmountWei":"Amount of rewarded native tokens (wei)."}},"getNextClaimableRewardEpochId(address)":{"params":{"_rewardOwner":"Address of the reward owner to query."}},"getRewardEpochIdsWithClaimableRewards()":{"returns":{"_endEpochId":"The newest epoch id that allows reward claiming.","_startEpochId":"The oldest epoch id that allows reward claiming."}},"getStateOfRewards(address)":{"params":{"_rewardOwner":"Address of the reward owner."},"returns":{"_rewardStates":"Array of reward states."}}},"version":1},"userdoc":{"kind":"user","methods":{"active()":{"notice":"Indicates if the contract is active - claims are enabled."},"claim(address,address,uint24,bool,(bytes32[],(uint24,bytes20,uint120,uint8))[])":{"notice":"Claim rewards for `_rewardOwner` and transfer them to `_recipient`. It can be called by reward owner or its authorized executor."},"getNextClaimableRewardEpochId(address)":{"notice":"Returns the next claimable reward epoch for a reward owner."},"getRewardEpochIdsWithClaimableRewards()":{"notice":"Returns the start and the end of the reward epoch range for which the reward is claimable."},"getStateOfRewards(address)":{"notice":"Returns the state of rewards for a given address for all unclaimed reward epochs with claimable rewards."}},"version":1}},"settings":{"remappings":["@flarenetwork/flare-periphery-contracts/=lib/flare-periphery-contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","flare-periphery-contracts/=lib/flare-periphery-contracts/","forge-std/=lib/forge-std/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin/=lib/openzeppelin-contracts/contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/flare-periphery-contracts/coston2/RewardsV2Interface.sol":"RewardsV2Interface"},"evmVersion":"paris","libraries":{}},"sources":{"lib/flare-periphery-contracts/coston2/RewardsV2Interface.sol":{"keccak256":"0x448b3a425efbf66ce0200d202304143f6c3132868c2ef59c2cd39b2dad190ab2","urls":["bzz-raw://3183ccca46f1c24bfbce1b1ede94484030ec15b9ba333b981b6bf9b125eb5e34","dweb:/ipfs/QmPQogUwALcqmVP8n216BV4rUDWY4xYngAJaMMgokwpVXU"],"license":"MIT"}},"version":1},"id":52}